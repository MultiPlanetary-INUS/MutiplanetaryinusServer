// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GameMap.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GamePKG {

  /// <summary>Holder for reflection information generated from GameMap.proto</summary>
  public static partial class GameMapReflection {

    #region Descriptor
    /// <summary>File descriptor for GameMap.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameMapReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1HYW1lTWFwLnByb3RvEgdHYW1lUEtHGg9NZXNzYWdlSUQucHJvdG8aDVJv",
            "bGVQS0cucHJvdG8iWgoJRW50ZXJHYW1lEhkKBVBrZ0lEGAEgASgOMgouUEtH",
            "VHlwZUlEEg4KBlVzZXJJRBgCIAEoBBIOCgZSb2xlSUQYBCABKAQSEgoKVmVy",
            "aWZ5Q29kZRgFIAEoCSKtAQoRRW50ZXJHYW1lUmVzcG9uc2USGQoFUGtnSUQY",
            "ASABKA4yCi5QS0dUeXBlSUQSDgoGVXNlcklEGAIgASgEEg4KBlJvbGVJRBgE",
            "IAEoBBINCgVNYXBJRBgFIAEoDRIRCglDcmVhdG9ySUQYBiABKAQSDAoEUG9z",
            "WBgHIAEoAhIMCgRQb3NZGAggASgCEgwKBFBvc1oYCSABKAISEQoJRGlyZWN0",
            "aW9uGAogASgCIvgBChBPdGhlclBsYXllckVudGVyEhkKBVBrZ0lEGAEgASgO",
            "MgouUEtHVHlwZUlEEg4KBlVzZXJJRBgCIAEoBBITCgtPdGhlclVzZXJJRBgD",
            "IAEoBBITCgtPdGhlclJvbGVJRBgEIAEoBBIMCgRQb3NYGAcgASgCEgwKBFBv",
            "c1kYCCABKAISDAoEUG9zWhgJIAEoAhIRCglEaXJlY3Rpb24YCiABKAISKAoN",
            "T3RoZXJSb2xlSW5mbxgLIAEoCzIRLkdhbWVQS0cuUm9sZUluZm8SKAoNT3Ro",
            "ZXJSb2xlQXR0chgMIAEoCzIRLkdhbWVQS0cuUm9sZUF0dHIijwIKDVBsYXll",
            "ckNvbnRyb2wSGQoFUGtnSUQYASABKA4yCi5QS0dUeXBlSUQSDgoGVXNlcklE",
            "GAIgASgEEg4KBlJvbGVJRBgDIAEoBBISCgpIb3Jpem9udGFsGAQgASgCEhAK",
            "CFZlcnRpY2FsGAUgASgCEhEKCURpcmVjdGlvbhgGIAEoAhINCgVTdGF0ZRgH",
            "IAEoBRIMCgRKdW1wGAggASgIEg8KB0xCdXR0b24YCSABKAgSDwoHUkJ1dHRv",
            "bhgKIAEoCBINCgVEb2RnZRgLIAEoCBIMCgRQb3NYGAwgASgCEgwKBFBvc1kY",
            "DSABKAISDAoEUG9zWhgOIAEoAhISCgpWZXJpZnlDb2RlGA8gASgJIs4BCgdO",
            "cGNNb3ZlEhkKBVBrZ0lEGAEgASgOMgouUEtHVHlwZUlEEg4KBlVzZXJJRBgC",
            "IAEoBBINCgVOcGNJRBgDIAEoBBIRCglEaXJlY3Rpb24YBCABKAISDQoFU3Rh",
            "dGUYBSABKAUSDQoFU3BlZWQYBiABKAISDAoESnVtcBgHIAEoCBIPCgdMQnV0",
            "dG9uGAggASgIEg8KB1JCdXR0b24YCSABKAgSDAoEUG9zWBgLIAEoAhIMCgRQ",
            "b3NZGAwgASgCEgwKBFBvc1oYDSABKAIiTAoPUGxheWVyTGVhdmVHYW1lEhkK",
            "BVBrZ0lEGAEgASgOMgouUEtHVHlwZUlEEg4KBlVzZXJJRBgCIAEoBBIOCgZS",
            "b2xlSUQYAyABKAQirAEKB05wY0luZm8SGQoFUGtnSUQYASABKA4yCi5QS0dU",
            "eXBlSUQSDgoGVXNlcklEGAIgASgEEg0KBU5wY0lEGAMgASgEEg0KBURlZklE",
            "GAQgASgFEgwKBFBvc1gYBSABKAISDAoEUG9zWRgGIAEoAhIMCgRQb3NaGAcg",
            "ASgCEhEKCURpcmVjdGlvbhgIIAEoAhINCgVTcGVlZBgJIAEoAhIMCgRMaWZl",
            "GAogASgDIoUBCglDaGFuZ2VNYXASGQoFUGtnSUQYASABKA4yCi5QS0dUeXBl",
            "SUQSDgoGVXNlcklEGAIgASgEEg4KBlJvbGVJRBgDIAEoBBINCgVNYXBJRBgE",
            "IAEoBRIMCgRQb3NYGAUgASgCEgwKBFBvc1oYBiABKAISEgoKVmVyaWZ5Q29k",
            "ZRgHIAEoCSLmAQoJSXRlbU9uTWFwEhkKBVBrZ0lEGAEgASgOMgouUEtHVHlw",
            "ZUlEEg4KBlVzZXJJRBgCIAEoBBIOCgZSb2xlSUQYAyABKAQSDQoFTWFwSUQY",
            "BCABKAUSDgoGSXRlbUlEGAUgASgEEg4KBlR5cGVJRBgGIAEoBRIMCgRQb3NY",
            "GAcgASgCEgwKBFBvc1kYCCABKAISDAoEUG9zWhgJIAEoAhIRCglEaXJlY3Rp",
            "b24YCiABKAISEQoJUm90ZVNwZWVkGAsgASgCEg0KBUNvdW50GAwgASgFEhAK",
            "CExpZmVUaW1lGA0gASgDIowBCgxJdGVtRGVzT25NYXASGQoFUGtnSUQYASAB",
            "KA4yCi5QS0dUeXBlSUQSDgoGVXNlcklEGAIgASgEEg4KBlJvbGVJRBgDIAEo",
            "BBINCgVNYXBJRBgEIAEoBRIOCgZJdGVtSUQYBSABKAQSDgoGVHlwZUlEGAYg",
            "ASgFEhIKClZlcmlmeUNvZGUYByABKAkihgEKB05wY0RlYWQSGQoFUGtnSUQY",
            "ASABKA4yCi5QS0dUeXBlSUQSDgoGVXNlcklEGAIgASgEEg4KBlJvbGVJRBgD",
            "IAEoBBINCgVNYXBJRBgEIAEoBRINCgVOcGNJRBgFIAEoBBIOCgZUeXBlSUQY",
            "BiABKAUSEgoKVmVyaWZ5Q29kZRgHIAEoCSKKAQoKUGlja1VwSXRlbRIZCgVQ",
            "a2dJRBgBIAEoDjIKLlBLR1R5cGVJRBIOCgZVc2VySUQYAiABKAQSDgoGUm9s",
            "ZUlEGAMgASgEEg0KBU1hcElEGAQgASgFEg4KBkl0ZW1JRBgFIAEoBBIOCgZU",
            "eXBlSUQYBiABKAUSEgoKVmVyaWZ5Q29kZRgHIAEoCSK7AgoKQXR0YWNrSW5m",
            "bxIZCgVQa2dJRBgBIAEoDjIKLlBLR1R5cGVJRBIOCgZVc2VySUQYAiABKAQS",
            "DgoGUm9sZUlEGAMgASgEEhIKCkF0dGFja2VySUQYBCABKAQSFAoMQXR0YWNr",
            "ZXJUeXBlGAUgASgFEhEKCUJlSGl0ZXJJRBgGIAEoBBITCgtCZUhpdGVyVHlw",
            "ZRgHIAEoBRIUCgxBdHRhY2tUeXBlSUQYCCABKAUSEgoKVmVyaWZ5Q29kZRgJ",
            "IAEoCRISCgpBdHRhY2tQb3NYGAogASgCEhIKCkF0dGFja1Bvc1kYCyABKAIS",
            "EgoKQXR0YWNrUG9zWhgMIAEoAhISCgpCSGl0ZXJQb3NYGA0gASgCEhIKCkJI",
            "aXRlclBvc1kYDiABKAISEgoKQkhpdGVyUG9zWhgPIAEoAiLYAgoMQXR0YWNr",
            "UmVzdWx0EhkKBVBrZ0lEGAEgASgOMgouUEtHVHlwZUlEEg4KBlVzZXJJRBgC",
            "IAEoBBISCgpBdHRhY2tlcklEGAMgASgEEhQKDEF0dGFja2VyVHlwZRgEIAEo",
            "BRIRCglCZUhpdGVySUQYBSABKAQSEwoLQmVIaXRlclR5cGUYBiABKAUSFAoM",
            "QXR0YWNrVHlwZUlEGAcgASgFEhIKClJlc3VsdFR5cGUYCCABKAUSEwoLQXR0",
            "YWNrVmFsdWUYCSABKAUSFAoMQXR0YWNrUmV0dXJuGAogASgFEhIKCkF0dGFj",
            "a1Bvc1gYCyABKAISEgoKQXR0YWNrUG9zWRgMIAEoAhISCgpBdHRhY2tQb3Na",
            "GA0gASgCEhIKCkJIaXRlclBvc1gYDiABKAISEgoKQkhpdGVyUG9zWRgPIAEo",
            "AhISCgpCSGl0ZXJQb3NaGBAgASgCInQKDkRlYnVnTnBjVGFyZ2V0EhkKBVBr",
            "Z0lEGAEgASgOMgouUEtHVHlwZUlEEg4KBlVzZXJJRBgCIAEoBBINCgVOcGNJ",
            "RBgDIAEoBBIMCgRQb3NYGAcgASgCEgwKBFBvc1kYCCABKAISDAoEUG9zWhgJ",
            "IAEoAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::MessageIDReflection.Descriptor, global::GamePKG.RolePKGReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.EnterGame), global::GamePKG.EnterGame.Parser, new[]{ "PkgID", "UserID", "RoleID", "VerifyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.EnterGameResponse), global::GamePKG.EnterGameResponse.Parser, new[]{ "PkgID", "UserID", "RoleID", "MapID", "CreatorID", "PosX", "PosY", "PosZ", "Direction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.OtherPlayerEnter), global::GamePKG.OtherPlayerEnter.Parser, new[]{ "PkgID", "UserID", "OtherUserID", "OtherRoleID", "PosX", "PosY", "PosZ", "Direction", "OtherRoleInfo", "OtherRoleAttr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.PlayerControl), global::GamePKG.PlayerControl.Parser, new[]{ "PkgID", "UserID", "RoleID", "Horizontal", "Vertical", "Direction", "State", "Jump", "LButton", "RButton", "Dodge", "PosX", "PosY", "PosZ", "VerifyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.NpcMove), global::GamePKG.NpcMove.Parser, new[]{ "PkgID", "UserID", "NpcID", "Direction", "State", "Speed", "Jump", "LButton", "RButton", "PosX", "PosY", "PosZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.PlayerLeaveGame), global::GamePKG.PlayerLeaveGame.Parser, new[]{ "PkgID", "UserID", "RoleID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.NpcInfo), global::GamePKG.NpcInfo.Parser, new[]{ "PkgID", "UserID", "NpcID", "DefID", "PosX", "PosY", "PosZ", "Direction", "Speed", "Life" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.ChangeMap), global::GamePKG.ChangeMap.Parser, new[]{ "PkgID", "UserID", "RoleID", "MapID", "PosX", "PosZ", "VerifyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.ItemOnMap), global::GamePKG.ItemOnMap.Parser, new[]{ "PkgID", "UserID", "RoleID", "MapID", "ItemID", "TypeID", "PosX", "PosY", "PosZ", "Direction", "RoteSpeed", "Count", "LifeTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.ItemDesOnMap), global::GamePKG.ItemDesOnMap.Parser, new[]{ "PkgID", "UserID", "RoleID", "MapID", "ItemID", "TypeID", "VerifyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.NpcDead), global::GamePKG.NpcDead.Parser, new[]{ "PkgID", "UserID", "RoleID", "MapID", "NpcID", "TypeID", "VerifyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.PickUpItem), global::GamePKG.PickUpItem.Parser, new[]{ "PkgID", "UserID", "RoleID", "MapID", "ItemID", "TypeID", "VerifyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.AttackInfo), global::GamePKG.AttackInfo.Parser, new[]{ "PkgID", "UserID", "RoleID", "AttackerID", "AttackerType", "BeHiterID", "BeHiterType", "AttackTypeID", "VerifyCode", "AttackPosX", "AttackPosY", "AttackPosZ", "BHiterPosX", "BHiterPosY", "BHiterPosZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.AttackResult), global::GamePKG.AttackResult.Parser, new[]{ "PkgID", "UserID", "AttackerID", "AttackerType", "BeHiterID", "BeHiterType", "AttackTypeID", "ResultType", "AttackValue", "AttackReturn", "AttackPosX", "AttackPosY", "AttackPosZ", "BHiterPosX", "BHiterPosY", "BHiterPosZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.DebugNpcTarget), global::GamePKG.DebugNpcTarget.Parser, new[]{ "PkgID", "UserID", "NpcID", "PosX", "PosY", "PosZ" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class EnterGame : pb::IMessage<EnterGame> {
    private static readonly pb::MessageParser<EnterGame> _parser = new pb::MessageParser<EnterGame>(() => new EnterGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.GameMapReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterGame(EnterGame other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      roleID_ = other.roleID_;
      verifyCode_ = other.verifyCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterGame Clone() {
      return new EnterGame(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 4;
    private ulong roleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "VerifyCode" field.</summary>
    public const int VerifyCodeFieldNumber = 5;
    private string verifyCode_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (RoleID != other.RoleID) return false;
      if (VerifyCode != other.VerifyCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (RoleID != 0UL) hash ^= RoleID.GetHashCode();
      if (VerifyCode.Length != 0) hash ^= VerifyCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (RoleID != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RoleID);
      }
      if (VerifyCode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(VerifyCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      if (VerifyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerifyCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterGame other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.RoleID != 0UL) {
        RoleID = other.RoleID;
      }
      if (other.VerifyCode.Length != 0) {
        VerifyCode = other.VerifyCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 32: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 42: {
            VerifyCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterGameResponse : pb::IMessage<EnterGameResponse> {
    private static readonly pb::MessageParser<EnterGameResponse> _parser = new pb::MessageParser<EnterGameResponse>(() => new EnterGameResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterGameResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.GameMapReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterGameResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterGameResponse(EnterGameResponse other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      roleID_ = other.roleID_;
      mapID_ = other.mapID_;
      creatorID_ = other.creatorID_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      direction_ = other.direction_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterGameResponse Clone() {
      return new EnterGameResponse(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 4;
    private ulong roleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "MapID" field.</summary>
    public const int MapIDFieldNumber = 5;
    private uint mapID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MapID {
      get { return mapID_; }
      set {
        mapID_ = value;
      }
    }

    /// <summary>Field number for the "CreatorID" field.</summary>
    public const int CreatorIDFieldNumber = 6;
    private ulong creatorID_;
    /// <summary>
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreatorID {
      get { return creatorID_; }
      set {
        creatorID_ = value;
      }
    }

    /// <summary>Field number for the "PosX" field.</summary>
    public const int PosXFieldNumber = 7;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "PosY" field.</summary>
    public const int PosYFieldNumber = 8;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "PosZ" field.</summary>
    public const int PosZFieldNumber = 9;
    private float posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "Direction" field.</summary>
    public const int DirectionFieldNumber = 10;
    private float direction_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterGameResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterGameResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (RoleID != other.RoleID) return false;
      if (MapID != other.MapID) return false;
      if (CreatorID != other.CreatorID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosZ, other.PosZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Direction, other.Direction)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (RoleID != 0UL) hash ^= RoleID.GetHashCode();
      if (MapID != 0) hash ^= MapID.GetHashCode();
      if (CreatorID != 0UL) hash ^= CreatorID.GetHashCode();
      if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
      if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
      if (PosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosZ);
      if (Direction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Direction);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (RoleID != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RoleID);
      }
      if (MapID != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(MapID);
      }
      if (CreatorID != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(CreatorID);
      }
      if (PosX != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(PosZ);
      }
      if (Direction != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Direction);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      if (MapID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MapID);
      }
      if (CreatorID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CreatorID);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      if (Direction != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterGameResponse other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.RoleID != 0UL) {
        RoleID = other.RoleID;
      }
      if (other.MapID != 0) {
        MapID = other.MapID;
      }
      if (other.CreatorID != 0UL) {
        CreatorID = other.CreatorID;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
      if (other.Direction != 0F) {
        Direction = other.Direction;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 32: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 40: {
            MapID = input.ReadUInt32();
            break;
          }
          case 48: {
            CreatorID = input.ReadUInt64();
            break;
          }
          case 61: {
            PosX = input.ReadFloat();
            break;
          }
          case 69: {
            PosY = input.ReadFloat();
            break;
          }
          case 77: {
            PosZ = input.ReadFloat();
            break;
          }
          case 85: {
            Direction = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class OtherPlayerEnter : pb::IMessage<OtherPlayerEnter> {
    private static readonly pb::MessageParser<OtherPlayerEnter> _parser = new pb::MessageParser<OtherPlayerEnter>(() => new OtherPlayerEnter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OtherPlayerEnter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.GameMapReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherPlayerEnter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherPlayerEnter(OtherPlayerEnter other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      otherUserID_ = other.otherUserID_;
      otherRoleID_ = other.otherRoleID_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      direction_ = other.direction_;
      otherRoleInfo_ = other.otherRoleInfo_ != null ? other.otherRoleInfo_.Clone() : null;
      otherRoleAttr_ = other.otherRoleAttr_ != null ? other.otherRoleAttr_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OtherPlayerEnter Clone() {
      return new OtherPlayerEnter(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "OtherUserID" field.</summary>
    public const int OtherUserIDFieldNumber = 3;
    private ulong otherUserID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OtherUserID {
      get { return otherUserID_; }
      set {
        otherUserID_ = value;
      }
    }

    /// <summary>Field number for the "OtherRoleID" field.</summary>
    public const int OtherRoleIDFieldNumber = 4;
    private ulong otherRoleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong OtherRoleID {
      get { return otherRoleID_; }
      set {
        otherRoleID_ = value;
      }
    }

    /// <summary>Field number for the "PosX" field.</summary>
    public const int PosXFieldNumber = 7;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "PosY" field.</summary>
    public const int PosYFieldNumber = 8;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "PosZ" field.</summary>
    public const int PosZFieldNumber = 9;
    private float posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "Direction" field.</summary>
    public const int DirectionFieldNumber = 10;
    private float direction_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "OtherRoleInfo" field.</summary>
    public const int OtherRoleInfoFieldNumber = 11;
    private global::GamePKG.RoleInfo otherRoleInfo_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GamePKG.RoleInfo OtherRoleInfo {
      get { return otherRoleInfo_; }
      set {
        otherRoleInfo_ = value;
      }
    }

    /// <summary>Field number for the "OtherRoleAttr" field.</summary>
    public const int OtherRoleAttrFieldNumber = 12;
    private global::GamePKG.RoleAttr otherRoleAttr_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GamePKG.RoleAttr OtherRoleAttr {
      get { return otherRoleAttr_; }
      set {
        otherRoleAttr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OtherPlayerEnter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OtherPlayerEnter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (OtherUserID != other.OtherUserID) return false;
      if (OtherRoleID != other.OtherRoleID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosZ, other.PosZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Direction, other.Direction)) return false;
      if (!object.Equals(OtherRoleInfo, other.OtherRoleInfo)) return false;
      if (!object.Equals(OtherRoleAttr, other.OtherRoleAttr)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (OtherUserID != 0UL) hash ^= OtherUserID.GetHashCode();
      if (OtherRoleID != 0UL) hash ^= OtherRoleID.GetHashCode();
      if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
      if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
      if (PosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosZ);
      if (Direction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Direction);
      if (otherRoleInfo_ != null) hash ^= OtherRoleInfo.GetHashCode();
      if (otherRoleAttr_ != null) hash ^= OtherRoleAttr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (OtherUserID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(OtherUserID);
      }
      if (OtherRoleID != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(OtherRoleID);
      }
      if (PosX != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(PosZ);
      }
      if (Direction != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Direction);
      }
      if (otherRoleInfo_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(OtherRoleInfo);
      }
      if (otherRoleAttr_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(OtherRoleAttr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (OtherUserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OtherUserID);
      }
      if (OtherRoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OtherRoleID);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      if (Direction != 0F) {
        size += 1 + 4;
      }
      if (otherRoleInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OtherRoleInfo);
      }
      if (otherRoleAttr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OtherRoleAttr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OtherPlayerEnter other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.OtherUserID != 0UL) {
        OtherUserID = other.OtherUserID;
      }
      if (other.OtherRoleID != 0UL) {
        OtherRoleID = other.OtherRoleID;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
      if (other.Direction != 0F) {
        Direction = other.Direction;
      }
      if (other.otherRoleInfo_ != null) {
        if (otherRoleInfo_ == null) {
          otherRoleInfo_ = new global::GamePKG.RoleInfo();
        }
        OtherRoleInfo.MergeFrom(other.OtherRoleInfo);
      }
      if (other.otherRoleAttr_ != null) {
        if (otherRoleAttr_ == null) {
          otherRoleAttr_ = new global::GamePKG.RoleAttr();
        }
        OtherRoleAttr.MergeFrom(other.OtherRoleAttr);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 24: {
            OtherUserID = input.ReadUInt64();
            break;
          }
          case 32: {
            OtherRoleID = input.ReadUInt64();
            break;
          }
          case 61: {
            PosX = input.ReadFloat();
            break;
          }
          case 69: {
            PosY = input.ReadFloat();
            break;
          }
          case 77: {
            PosZ = input.ReadFloat();
            break;
          }
          case 85: {
            Direction = input.ReadFloat();
            break;
          }
          case 90: {
            if (otherRoleInfo_ == null) {
              otherRoleInfo_ = new global::GamePKG.RoleInfo();
            }
            input.ReadMessage(otherRoleInfo_);
            break;
          }
          case 98: {
            if (otherRoleAttr_ == null) {
              otherRoleAttr_ = new global::GamePKG.RoleAttr();
            }
            input.ReadMessage(otherRoleAttr_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerControl : pb::IMessage<PlayerControl> {
    private static readonly pb::MessageParser<PlayerControl> _parser = new pb::MessageParser<PlayerControl>(() => new PlayerControl());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerControl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.GameMapReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerControl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerControl(PlayerControl other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      roleID_ = other.roleID_;
      horizontal_ = other.horizontal_;
      vertical_ = other.vertical_;
      direction_ = other.direction_;
      state_ = other.state_;
      jump_ = other.jump_;
      lButton_ = other.lButton_;
      rButton_ = other.rButton_;
      dodge_ = other.dodge_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      verifyCode_ = other.verifyCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerControl Clone() {
      return new PlayerControl(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 3;
    private ulong roleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "Horizontal" field.</summary>
    public const int HorizontalFieldNumber = 4;
    private float horizontal_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Horizontal {
      get { return horizontal_; }
      set {
        horizontal_ = value;
      }
    }

    /// <summary>Field number for the "Vertical" field.</summary>
    public const int VerticalFieldNumber = 5;
    private float vertical_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Vertical {
      get { return vertical_; }
      set {
        vertical_ = value;
      }
    }

    /// <summary>Field number for the "Direction" field.</summary>
    public const int DirectionFieldNumber = 6;
    private float direction_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 7;
    private int state_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "Jump" field.</summary>
    public const int JumpFieldNumber = 8;
    private bool jump_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Jump {
      get { return jump_; }
      set {
        jump_ = value;
      }
    }

    /// <summary>Field number for the "LButton" field.</summary>
    public const int LButtonFieldNumber = 9;
    private bool lButton_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LButton {
      get { return lButton_; }
      set {
        lButton_ = value;
      }
    }

    /// <summary>Field number for the "RButton" field.</summary>
    public const int RButtonFieldNumber = 10;
    private bool rButton_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RButton {
      get { return rButton_; }
      set {
        rButton_ = value;
      }
    }

    /// <summary>Field number for the "Dodge" field.</summary>
    public const int DodgeFieldNumber = 11;
    private bool dodge_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Dodge {
      get { return dodge_; }
      set {
        dodge_ = value;
      }
    }

    /// <summary>Field number for the "PosX" field.</summary>
    public const int PosXFieldNumber = 12;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "PosY" field.</summary>
    public const int PosYFieldNumber = 13;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "PosZ" field.</summary>
    public const int PosZFieldNumber = 14;
    private float posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "VerifyCode" field.</summary>
    public const int VerifyCodeFieldNumber = 15;
    private string verifyCode_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerControl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerControl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (RoleID != other.RoleID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Horizontal, other.Horizontal)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Vertical, other.Vertical)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Direction, other.Direction)) return false;
      if (State != other.State) return false;
      if (Jump != other.Jump) return false;
      if (LButton != other.LButton) return false;
      if (RButton != other.RButton) return false;
      if (Dodge != other.Dodge) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosZ, other.PosZ)) return false;
      if (VerifyCode != other.VerifyCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (RoleID != 0UL) hash ^= RoleID.GetHashCode();
      if (Horizontal != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Horizontal);
      if (Vertical != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Vertical);
      if (Direction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Direction);
      if (State != 0) hash ^= State.GetHashCode();
      if (Jump != false) hash ^= Jump.GetHashCode();
      if (LButton != false) hash ^= LButton.GetHashCode();
      if (RButton != false) hash ^= RButton.GetHashCode();
      if (Dodge != false) hash ^= Dodge.GetHashCode();
      if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
      if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
      if (PosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosZ);
      if (VerifyCode.Length != 0) hash ^= VerifyCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (RoleID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoleID);
      }
      if (Horizontal != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Horizontal);
      }
      if (Vertical != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Vertical);
      }
      if (Direction != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Direction);
      }
      if (State != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(State);
      }
      if (Jump != false) {
        output.WriteRawTag(64);
        output.WriteBool(Jump);
      }
      if (LButton != false) {
        output.WriteRawTag(72);
        output.WriteBool(LButton);
      }
      if (RButton != false) {
        output.WriteRawTag(80);
        output.WriteBool(RButton);
      }
      if (Dodge != false) {
        output.WriteRawTag(88);
        output.WriteBool(Dodge);
      }
      if (PosX != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(PosZ);
      }
      if (VerifyCode.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(VerifyCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      if (Horizontal != 0F) {
        size += 1 + 4;
      }
      if (Vertical != 0F) {
        size += 1 + 4;
      }
      if (Direction != 0F) {
        size += 1 + 4;
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (Jump != false) {
        size += 1 + 1;
      }
      if (LButton != false) {
        size += 1 + 1;
      }
      if (RButton != false) {
        size += 1 + 1;
      }
      if (Dodge != false) {
        size += 1 + 1;
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      if (VerifyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerifyCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerControl other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.RoleID != 0UL) {
        RoleID = other.RoleID;
      }
      if (other.Horizontal != 0F) {
        Horizontal = other.Horizontal;
      }
      if (other.Vertical != 0F) {
        Vertical = other.Vertical;
      }
      if (other.Direction != 0F) {
        Direction = other.Direction;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Jump != false) {
        Jump = other.Jump;
      }
      if (other.LButton != false) {
        LButton = other.LButton;
      }
      if (other.RButton != false) {
        RButton = other.RButton;
      }
      if (other.Dodge != false) {
        Dodge = other.Dodge;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
      if (other.VerifyCode.Length != 0) {
        VerifyCode = other.VerifyCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 24: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 37: {
            Horizontal = input.ReadFloat();
            break;
          }
          case 45: {
            Vertical = input.ReadFloat();
            break;
          }
          case 53: {
            Direction = input.ReadFloat();
            break;
          }
          case 56: {
            State = input.ReadInt32();
            break;
          }
          case 64: {
            Jump = input.ReadBool();
            break;
          }
          case 72: {
            LButton = input.ReadBool();
            break;
          }
          case 80: {
            RButton = input.ReadBool();
            break;
          }
          case 88: {
            Dodge = input.ReadBool();
            break;
          }
          case 101: {
            PosX = input.ReadFloat();
            break;
          }
          case 109: {
            PosY = input.ReadFloat();
            break;
          }
          case 117: {
            PosZ = input.ReadFloat();
            break;
          }
          case 122: {
            VerifyCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NpcMove : pb::IMessage<NpcMove> {
    private static readonly pb::MessageParser<NpcMove> _parser = new pb::MessageParser<NpcMove>(() => new NpcMove());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcMove> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.GameMapReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcMove() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcMove(NpcMove other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      npcID_ = other.npcID_;
      direction_ = other.direction_;
      state_ = other.state_;
      speed_ = other.speed_;
      jump_ = other.jump_;
      lButton_ = other.lButton_;
      rButton_ = other.rButton_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcMove Clone() {
      return new NpcMove(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "NpcID" field.</summary>
    public const int NpcIDFieldNumber = 3;
    private ulong npcID_;
    /// <summary>
    ///NPCID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NpcID {
      get { return npcID_; }
      set {
        npcID_ = value;
      }
    }

    /// <summary>Field number for the "Direction" field.</summary>
    public const int DirectionFieldNumber = 4;
    private float direction_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 5;
    private int state_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 6;
    private float speed_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "Jump" field.</summary>
    public const int JumpFieldNumber = 7;
    private bool jump_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Jump {
      get { return jump_; }
      set {
        jump_ = value;
      }
    }

    /// <summary>Field number for the "LButton" field.</summary>
    public const int LButtonFieldNumber = 8;
    private bool lButton_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LButton {
      get { return lButton_; }
      set {
        lButton_ = value;
      }
    }

    /// <summary>Field number for the "RButton" field.</summary>
    public const int RButtonFieldNumber = 9;
    private bool rButton_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RButton {
      get { return rButton_; }
      set {
        rButton_ = value;
      }
    }

    /// <summary>Field number for the "PosX" field.</summary>
    public const int PosXFieldNumber = 11;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "PosY" field.</summary>
    public const int PosYFieldNumber = 12;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "PosZ" field.</summary>
    public const int PosZFieldNumber = 13;
    private float posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NpcMove);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NpcMove other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (NpcID != other.NpcID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Direction, other.Direction)) return false;
      if (State != other.State) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (Jump != other.Jump) return false;
      if (LButton != other.LButton) return false;
      if (RButton != other.RButton) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosZ, other.PosZ)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (NpcID != 0UL) hash ^= NpcID.GetHashCode();
      if (Direction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Direction);
      if (State != 0) hash ^= State.GetHashCode();
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (Jump != false) hash ^= Jump.GetHashCode();
      if (LButton != false) hash ^= LButton.GetHashCode();
      if (RButton != false) hash ^= RButton.GetHashCode();
      if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
      if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
      if (PosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosZ);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (NpcID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(NpcID);
      }
      if (Direction != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Direction);
      }
      if (State != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(State);
      }
      if (Speed != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Speed);
      }
      if (Jump != false) {
        output.WriteRawTag(56);
        output.WriteBool(Jump);
      }
      if (LButton != false) {
        output.WriteRawTag(64);
        output.WriteBool(LButton);
      }
      if (RButton != false) {
        output.WriteRawTag(72);
        output.WriteBool(RButton);
      }
      if (PosX != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(PosZ);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (NpcID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NpcID);
      }
      if (Direction != 0F) {
        size += 1 + 4;
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (Jump != false) {
        size += 1 + 1;
      }
      if (LButton != false) {
        size += 1 + 1;
      }
      if (RButton != false) {
        size += 1 + 1;
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NpcMove other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.NpcID != 0UL) {
        NpcID = other.NpcID;
      }
      if (other.Direction != 0F) {
        Direction = other.Direction;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.Jump != false) {
        Jump = other.Jump;
      }
      if (other.LButton != false) {
        LButton = other.LButton;
      }
      if (other.RButton != false) {
        RButton = other.RButton;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 24: {
            NpcID = input.ReadUInt64();
            break;
          }
          case 37: {
            Direction = input.ReadFloat();
            break;
          }
          case 40: {
            State = input.ReadInt32();
            break;
          }
          case 53: {
            Speed = input.ReadFloat();
            break;
          }
          case 56: {
            Jump = input.ReadBool();
            break;
          }
          case 64: {
            LButton = input.ReadBool();
            break;
          }
          case 72: {
            RButton = input.ReadBool();
            break;
          }
          case 93: {
            PosX = input.ReadFloat();
            break;
          }
          case 101: {
            PosY = input.ReadFloat();
            break;
          }
          case 109: {
            PosZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerLeaveGame : pb::IMessage<PlayerLeaveGame> {
    private static readonly pb::MessageParser<PlayerLeaveGame> _parser = new pb::MessageParser<PlayerLeaveGame>(() => new PlayerLeaveGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerLeaveGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.GameMapReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLeaveGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLeaveGame(PlayerLeaveGame other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      roleID_ = other.roleID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLeaveGame Clone() {
      return new PlayerLeaveGame(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 3;
    private ulong roleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerLeaveGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerLeaveGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (RoleID != other.RoleID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (RoleID != 0UL) hash ^= RoleID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (RoleID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoleID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerLeaveGame other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.RoleID != 0UL) {
        RoleID = other.RoleID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 24: {
            RoleID = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NpcInfo : pb::IMessage<NpcInfo> {
    private static readonly pb::MessageParser<NpcInfo> _parser = new pb::MessageParser<NpcInfo>(() => new NpcInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.GameMapReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcInfo(NpcInfo other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      npcID_ = other.npcID_;
      defID_ = other.defID_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      direction_ = other.direction_;
      speed_ = other.speed_;
      life_ = other.life_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcInfo Clone() {
      return new NpcInfo(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "NpcID" field.</summary>
    public const int NpcIDFieldNumber = 3;
    private ulong npcID_;
    /// <summary>
    ///NPCID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NpcID {
      get { return npcID_; }
      set {
        npcID_ = value;
      }
    }

    /// <summary>Field number for the "DefID" field.</summary>
    public const int DefIDFieldNumber = 4;
    private int defID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefID {
      get { return defID_; }
      set {
        defID_ = value;
      }
    }

    /// <summary>Field number for the "PosX" field.</summary>
    public const int PosXFieldNumber = 5;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "PosY" field.</summary>
    public const int PosYFieldNumber = 6;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "PosZ" field.</summary>
    public const int PosZFieldNumber = 7;
    private float posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "Direction" field.</summary>
    public const int DirectionFieldNumber = 8;
    private float direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 9;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "Life" field.</summary>
    public const int LifeFieldNumber = 10;
    private long life_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Life {
      get { return life_; }
      set {
        life_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NpcInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NpcInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (NpcID != other.NpcID) return false;
      if (DefID != other.DefID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosZ, other.PosZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Direction, other.Direction)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (Life != other.Life) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (NpcID != 0UL) hash ^= NpcID.GetHashCode();
      if (DefID != 0) hash ^= DefID.GetHashCode();
      if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
      if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
      if (PosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosZ);
      if (Direction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Direction);
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (Life != 0L) hash ^= Life.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (NpcID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(NpcID);
      }
      if (DefID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DefID);
      }
      if (PosX != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(PosZ);
      }
      if (Direction != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Direction);
      }
      if (Speed != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Speed);
      }
      if (Life != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(Life);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (NpcID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NpcID);
      }
      if (DefID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefID);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      if (Direction != 0F) {
        size += 1 + 4;
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (Life != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Life);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NpcInfo other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.NpcID != 0UL) {
        NpcID = other.NpcID;
      }
      if (other.DefID != 0) {
        DefID = other.DefID;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
      if (other.Direction != 0F) {
        Direction = other.Direction;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.Life != 0L) {
        Life = other.Life;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 24: {
            NpcID = input.ReadUInt64();
            break;
          }
          case 32: {
            DefID = input.ReadInt32();
            break;
          }
          case 45: {
            PosX = input.ReadFloat();
            break;
          }
          case 53: {
            PosY = input.ReadFloat();
            break;
          }
          case 61: {
            PosZ = input.ReadFloat();
            break;
          }
          case 69: {
            Direction = input.ReadFloat();
            break;
          }
          case 77: {
            Speed = input.ReadFloat();
            break;
          }
          case 80: {
            Life = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeMap : pb::IMessage<ChangeMap> {
    private static readonly pb::MessageParser<ChangeMap> _parser = new pb::MessageParser<ChangeMap>(() => new ChangeMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.GameMapReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeMap(ChangeMap other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      roleID_ = other.roleID_;
      mapID_ = other.mapID_;
      posX_ = other.posX_;
      posZ_ = other.posZ_;
      verifyCode_ = other.verifyCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeMap Clone() {
      return new ChangeMap(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 3;
    private ulong roleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "MapID" field.</summary>
    public const int MapIDFieldNumber = 4;
    private int mapID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapID {
      get { return mapID_; }
      set {
        mapID_ = value;
      }
    }

    /// <summary>Field number for the "PosX" field.</summary>
    public const int PosXFieldNumber = 5;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "PosZ" field.</summary>
    public const int PosZFieldNumber = 6;
    private float posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "VerifyCode" field.</summary>
    public const int VerifyCodeFieldNumber = 7;
    private string verifyCode_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (RoleID != other.RoleID) return false;
      if (MapID != other.MapID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosZ, other.PosZ)) return false;
      if (VerifyCode != other.VerifyCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (RoleID != 0UL) hash ^= RoleID.GetHashCode();
      if (MapID != 0) hash ^= MapID.GetHashCode();
      if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
      if (PosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosZ);
      if (VerifyCode.Length != 0) hash ^= VerifyCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (RoleID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoleID);
      }
      if (MapID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MapID);
      }
      if (PosX != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PosX);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(PosZ);
      }
      if (VerifyCode.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(VerifyCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      if (MapID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapID);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      if (VerifyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerifyCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeMap other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.RoleID != 0UL) {
        RoleID = other.RoleID;
      }
      if (other.MapID != 0) {
        MapID = other.MapID;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
      if (other.VerifyCode.Length != 0) {
        VerifyCode = other.VerifyCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 24: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 32: {
            MapID = input.ReadInt32();
            break;
          }
          case 45: {
            PosX = input.ReadFloat();
            break;
          }
          case 53: {
            PosZ = input.ReadFloat();
            break;
          }
          case 58: {
            VerifyCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemOnMap : pb::IMessage<ItemOnMap> {
    private static readonly pb::MessageParser<ItemOnMap> _parser = new pb::MessageParser<ItemOnMap>(() => new ItemOnMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemOnMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.GameMapReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemOnMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemOnMap(ItemOnMap other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      roleID_ = other.roleID_;
      mapID_ = other.mapID_;
      itemID_ = other.itemID_;
      typeID_ = other.typeID_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      direction_ = other.direction_;
      roteSpeed_ = other.roteSpeed_;
      count_ = other.count_;
      lifeTime_ = other.lifeTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemOnMap Clone() {
      return new ItemOnMap(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 3;
    private ulong roleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "MapID" field.</summary>
    public const int MapIDFieldNumber = 4;
    private int mapID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapID {
      get { return mapID_; }
      set {
        mapID_ = value;
      }
    }

    /// <summary>Field number for the "ItemID" field.</summary>
    public const int ItemIDFieldNumber = 5;
    private ulong itemID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "TypeID" field.</summary>
    public const int TypeIDFieldNumber = 6;
    private int typeID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    /// <summary>Field number for the "PosX" field.</summary>
    public const int PosXFieldNumber = 7;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "PosY" field.</summary>
    public const int PosYFieldNumber = 8;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "PosZ" field.</summary>
    public const int PosZFieldNumber = 9;
    private float posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "Direction" field.</summary>
    public const int DirectionFieldNumber = 10;
    private float direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "RoteSpeed" field.</summary>
    public const int RoteSpeedFieldNumber = 11;
    private float roteSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RoteSpeed {
      get { return roteSpeed_; }
      set {
        roteSpeed_ = value;
      }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 12;
    private int count_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "LifeTime" field.</summary>
    public const int LifeTimeFieldNumber = 13;
    private long lifeTime_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LifeTime {
      get { return lifeTime_; }
      set {
        lifeTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemOnMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemOnMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (RoleID != other.RoleID) return false;
      if (MapID != other.MapID) return false;
      if (ItemID != other.ItemID) return false;
      if (TypeID != other.TypeID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosZ, other.PosZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Direction, other.Direction)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RoteSpeed, other.RoteSpeed)) return false;
      if (Count != other.Count) return false;
      if (LifeTime != other.LifeTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (RoleID != 0UL) hash ^= RoleID.GetHashCode();
      if (MapID != 0) hash ^= MapID.GetHashCode();
      if (ItemID != 0UL) hash ^= ItemID.GetHashCode();
      if (TypeID != 0) hash ^= TypeID.GetHashCode();
      if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
      if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
      if (PosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosZ);
      if (Direction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Direction);
      if (RoteSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RoteSpeed);
      if (Count != 0) hash ^= Count.GetHashCode();
      if (LifeTime != 0L) hash ^= LifeTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (RoleID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoleID);
      }
      if (MapID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MapID);
      }
      if (ItemID != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(ItemID);
      }
      if (TypeID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TypeID);
      }
      if (PosX != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(PosZ);
      }
      if (Direction != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Direction);
      }
      if (RoteSpeed != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(RoteSpeed);
      }
      if (Count != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Count);
      }
      if (LifeTime != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(LifeTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      if (MapID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapID);
      }
      if (ItemID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemID);
      }
      if (TypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeID);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      if (Direction != 0F) {
        size += 1 + 4;
      }
      if (RoteSpeed != 0F) {
        size += 1 + 4;
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (LifeTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LifeTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemOnMap other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.RoleID != 0UL) {
        RoleID = other.RoleID;
      }
      if (other.MapID != 0) {
        MapID = other.MapID;
      }
      if (other.ItemID != 0UL) {
        ItemID = other.ItemID;
      }
      if (other.TypeID != 0) {
        TypeID = other.TypeID;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
      if (other.Direction != 0F) {
        Direction = other.Direction;
      }
      if (other.RoteSpeed != 0F) {
        RoteSpeed = other.RoteSpeed;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.LifeTime != 0L) {
        LifeTime = other.LifeTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 24: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 32: {
            MapID = input.ReadInt32();
            break;
          }
          case 40: {
            ItemID = input.ReadUInt64();
            break;
          }
          case 48: {
            TypeID = input.ReadInt32();
            break;
          }
          case 61: {
            PosX = input.ReadFloat();
            break;
          }
          case 69: {
            PosY = input.ReadFloat();
            break;
          }
          case 77: {
            PosZ = input.ReadFloat();
            break;
          }
          case 85: {
            Direction = input.ReadFloat();
            break;
          }
          case 93: {
            RoteSpeed = input.ReadFloat();
            break;
          }
          case 96: {
            Count = input.ReadInt32();
            break;
          }
          case 104: {
            LifeTime = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemDesOnMap : pb::IMessage<ItemDesOnMap> {
    private static readonly pb::MessageParser<ItemDesOnMap> _parser = new pb::MessageParser<ItemDesOnMap>(() => new ItemDesOnMap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemDesOnMap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.GameMapReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemDesOnMap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemDesOnMap(ItemDesOnMap other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      roleID_ = other.roleID_;
      mapID_ = other.mapID_;
      itemID_ = other.itemID_;
      typeID_ = other.typeID_;
      verifyCode_ = other.verifyCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemDesOnMap Clone() {
      return new ItemDesOnMap(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 3;
    private ulong roleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "MapID" field.</summary>
    public const int MapIDFieldNumber = 4;
    private int mapID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapID {
      get { return mapID_; }
      set {
        mapID_ = value;
      }
    }

    /// <summary>Field number for the "ItemID" field.</summary>
    public const int ItemIDFieldNumber = 5;
    private ulong itemID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "TypeID" field.</summary>
    public const int TypeIDFieldNumber = 6;
    private int typeID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    /// <summary>Field number for the "VerifyCode" field.</summary>
    public const int VerifyCodeFieldNumber = 7;
    private string verifyCode_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemDesOnMap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemDesOnMap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (RoleID != other.RoleID) return false;
      if (MapID != other.MapID) return false;
      if (ItemID != other.ItemID) return false;
      if (TypeID != other.TypeID) return false;
      if (VerifyCode != other.VerifyCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (RoleID != 0UL) hash ^= RoleID.GetHashCode();
      if (MapID != 0) hash ^= MapID.GetHashCode();
      if (ItemID != 0UL) hash ^= ItemID.GetHashCode();
      if (TypeID != 0) hash ^= TypeID.GetHashCode();
      if (VerifyCode.Length != 0) hash ^= VerifyCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (RoleID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoleID);
      }
      if (MapID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MapID);
      }
      if (ItemID != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(ItemID);
      }
      if (TypeID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TypeID);
      }
      if (VerifyCode.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(VerifyCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      if (MapID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapID);
      }
      if (ItemID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemID);
      }
      if (TypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeID);
      }
      if (VerifyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerifyCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemDesOnMap other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.RoleID != 0UL) {
        RoleID = other.RoleID;
      }
      if (other.MapID != 0) {
        MapID = other.MapID;
      }
      if (other.ItemID != 0UL) {
        ItemID = other.ItemID;
      }
      if (other.TypeID != 0) {
        TypeID = other.TypeID;
      }
      if (other.VerifyCode.Length != 0) {
        VerifyCode = other.VerifyCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 24: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 32: {
            MapID = input.ReadInt32();
            break;
          }
          case 40: {
            ItemID = input.ReadUInt64();
            break;
          }
          case 48: {
            TypeID = input.ReadInt32();
            break;
          }
          case 58: {
            VerifyCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NpcDead : pb::IMessage<NpcDead> {
    private static readonly pb::MessageParser<NpcDead> _parser = new pb::MessageParser<NpcDead>(() => new NpcDead());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NpcDead> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.GameMapReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcDead() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcDead(NpcDead other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      roleID_ = other.roleID_;
      mapID_ = other.mapID_;
      npcID_ = other.npcID_;
      typeID_ = other.typeID_;
      verifyCode_ = other.verifyCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NpcDead Clone() {
      return new NpcDead(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 3;
    private ulong roleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "MapID" field.</summary>
    public const int MapIDFieldNumber = 4;
    private int mapID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapID {
      get { return mapID_; }
      set {
        mapID_ = value;
      }
    }

    /// <summary>Field number for the "NpcID" field.</summary>
    public const int NpcIDFieldNumber = 5;
    private ulong npcID_;
    /// <summary>
    ///NPCID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NpcID {
      get { return npcID_; }
      set {
        npcID_ = value;
      }
    }

    /// <summary>Field number for the "TypeID" field.</summary>
    public const int TypeIDFieldNumber = 6;
    private int typeID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    /// <summary>Field number for the "VerifyCode" field.</summary>
    public const int VerifyCodeFieldNumber = 7;
    private string verifyCode_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NpcDead);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NpcDead other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (RoleID != other.RoleID) return false;
      if (MapID != other.MapID) return false;
      if (NpcID != other.NpcID) return false;
      if (TypeID != other.TypeID) return false;
      if (VerifyCode != other.VerifyCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (RoleID != 0UL) hash ^= RoleID.GetHashCode();
      if (MapID != 0) hash ^= MapID.GetHashCode();
      if (NpcID != 0UL) hash ^= NpcID.GetHashCode();
      if (TypeID != 0) hash ^= TypeID.GetHashCode();
      if (VerifyCode.Length != 0) hash ^= VerifyCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (RoleID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoleID);
      }
      if (MapID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MapID);
      }
      if (NpcID != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(NpcID);
      }
      if (TypeID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TypeID);
      }
      if (VerifyCode.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(VerifyCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      if (MapID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapID);
      }
      if (NpcID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NpcID);
      }
      if (TypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeID);
      }
      if (VerifyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerifyCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NpcDead other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.RoleID != 0UL) {
        RoleID = other.RoleID;
      }
      if (other.MapID != 0) {
        MapID = other.MapID;
      }
      if (other.NpcID != 0UL) {
        NpcID = other.NpcID;
      }
      if (other.TypeID != 0) {
        TypeID = other.TypeID;
      }
      if (other.VerifyCode.Length != 0) {
        VerifyCode = other.VerifyCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 24: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 32: {
            MapID = input.ReadInt32();
            break;
          }
          case 40: {
            NpcID = input.ReadUInt64();
            break;
          }
          case 48: {
            TypeID = input.ReadInt32();
            break;
          }
          case 58: {
            VerifyCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PickUpItem : pb::IMessage<PickUpItem> {
    private static readonly pb::MessageParser<PickUpItem> _parser = new pb::MessageParser<PickUpItem>(() => new PickUpItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PickUpItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.GameMapReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickUpItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickUpItem(PickUpItem other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      roleID_ = other.roleID_;
      mapID_ = other.mapID_;
      itemID_ = other.itemID_;
      typeID_ = other.typeID_;
      verifyCode_ = other.verifyCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PickUpItem Clone() {
      return new PickUpItem(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 3;
    private ulong roleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "MapID" field.</summary>
    public const int MapIDFieldNumber = 4;
    private int mapID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapID {
      get { return mapID_; }
      set {
        mapID_ = value;
      }
    }

    /// <summary>Field number for the "ItemID" field.</summary>
    public const int ItemIDFieldNumber = 5;
    private ulong itemID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "TypeID" field.</summary>
    public const int TypeIDFieldNumber = 6;
    private int typeID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    /// <summary>Field number for the "VerifyCode" field.</summary>
    public const int VerifyCodeFieldNumber = 7;
    private string verifyCode_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PickUpItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PickUpItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (RoleID != other.RoleID) return false;
      if (MapID != other.MapID) return false;
      if (ItemID != other.ItemID) return false;
      if (TypeID != other.TypeID) return false;
      if (VerifyCode != other.VerifyCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (RoleID != 0UL) hash ^= RoleID.GetHashCode();
      if (MapID != 0) hash ^= MapID.GetHashCode();
      if (ItemID != 0UL) hash ^= ItemID.GetHashCode();
      if (TypeID != 0) hash ^= TypeID.GetHashCode();
      if (VerifyCode.Length != 0) hash ^= VerifyCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (RoleID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoleID);
      }
      if (MapID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MapID);
      }
      if (ItemID != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(ItemID);
      }
      if (TypeID != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(TypeID);
      }
      if (VerifyCode.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(VerifyCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      if (MapID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapID);
      }
      if (ItemID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemID);
      }
      if (TypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TypeID);
      }
      if (VerifyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerifyCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PickUpItem other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.RoleID != 0UL) {
        RoleID = other.RoleID;
      }
      if (other.MapID != 0) {
        MapID = other.MapID;
      }
      if (other.ItemID != 0UL) {
        ItemID = other.ItemID;
      }
      if (other.TypeID != 0) {
        TypeID = other.TypeID;
      }
      if (other.VerifyCode.Length != 0) {
        VerifyCode = other.VerifyCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 24: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 32: {
            MapID = input.ReadInt32();
            break;
          }
          case 40: {
            ItemID = input.ReadUInt64();
            break;
          }
          case 48: {
            TypeID = input.ReadInt32();
            break;
          }
          case 58: {
            VerifyCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttackInfo : pb::IMessage<AttackInfo> {
    private static readonly pb::MessageParser<AttackInfo> _parser = new pb::MessageParser<AttackInfo>(() => new AttackInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttackInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.GameMapReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackInfo(AttackInfo other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      roleID_ = other.roleID_;
      attackerID_ = other.attackerID_;
      attackerType_ = other.attackerType_;
      beHiterID_ = other.beHiterID_;
      beHiterType_ = other.beHiterType_;
      attackTypeID_ = other.attackTypeID_;
      verifyCode_ = other.verifyCode_;
      attackPosX_ = other.attackPosX_;
      attackPosY_ = other.attackPosY_;
      attackPosZ_ = other.attackPosZ_;
      bHiterPosX_ = other.bHiterPosX_;
      bHiterPosY_ = other.bHiterPosY_;
      bHiterPosZ_ = other.bHiterPosZ_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackInfo Clone() {
      return new AttackInfo(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 3;
    private ulong roleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "AttackerID" field.</summary>
    public const int AttackerIDFieldNumber = 4;
    private ulong attackerID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AttackerID {
      get { return attackerID_; }
      set {
        attackerID_ = value;
      }
    }

    /// <summary>Field number for the "AttackerType" field.</summary>
    public const int AttackerTypeFieldNumber = 5;
    private int attackerType_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackerType {
      get { return attackerType_; }
      set {
        attackerType_ = value;
      }
    }

    /// <summary>Field number for the "BeHiterID" field.</summary>
    public const int BeHiterIDFieldNumber = 6;
    private ulong beHiterID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BeHiterID {
      get { return beHiterID_; }
      set {
        beHiterID_ = value;
      }
    }

    /// <summary>Field number for the "BeHiterType" field.</summary>
    public const int BeHiterTypeFieldNumber = 7;
    private int beHiterType_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BeHiterType {
      get { return beHiterType_; }
      set {
        beHiterType_ = value;
      }
    }

    /// <summary>Field number for the "AttackTypeID" field.</summary>
    public const int AttackTypeIDFieldNumber = 8;
    private int attackTypeID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackTypeID {
      get { return attackTypeID_; }
      set {
        attackTypeID_ = value;
      }
    }

    /// <summary>Field number for the "VerifyCode" field.</summary>
    public const int VerifyCodeFieldNumber = 9;
    private string verifyCode_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AttackPosX" field.</summary>
    public const int AttackPosXFieldNumber = 10;
    private float attackPosX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackPosX {
      get { return attackPosX_; }
      set {
        attackPosX_ = value;
      }
    }

    /// <summary>Field number for the "AttackPosY" field.</summary>
    public const int AttackPosYFieldNumber = 11;
    private float attackPosY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackPosY {
      get { return attackPosY_; }
      set {
        attackPosY_ = value;
      }
    }

    /// <summary>Field number for the "AttackPosZ" field.</summary>
    public const int AttackPosZFieldNumber = 12;
    private float attackPosZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackPosZ {
      get { return attackPosZ_; }
      set {
        attackPosZ_ = value;
      }
    }

    /// <summary>Field number for the "BHiterPosX" field.</summary>
    public const int BHiterPosXFieldNumber = 13;
    private float bHiterPosX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BHiterPosX {
      get { return bHiterPosX_; }
      set {
        bHiterPosX_ = value;
      }
    }

    /// <summary>Field number for the "BHiterPosY" field.</summary>
    public const int BHiterPosYFieldNumber = 14;
    private float bHiterPosY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BHiterPosY {
      get { return bHiterPosY_; }
      set {
        bHiterPosY_ = value;
      }
    }

    /// <summary>Field number for the "BHiterPosZ" field.</summary>
    public const int BHiterPosZFieldNumber = 15;
    private float bHiterPosZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BHiterPosZ {
      get { return bHiterPosZ_; }
      set {
        bHiterPosZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttackInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttackInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (RoleID != other.RoleID) return false;
      if (AttackerID != other.AttackerID) return false;
      if (AttackerType != other.AttackerType) return false;
      if (BeHiterID != other.BeHiterID) return false;
      if (BeHiterType != other.BeHiterType) return false;
      if (AttackTypeID != other.AttackTypeID) return false;
      if (VerifyCode != other.VerifyCode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackPosX, other.AttackPosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackPosY, other.AttackPosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackPosZ, other.AttackPosZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BHiterPosX, other.BHiterPosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BHiterPosY, other.BHiterPosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BHiterPosZ, other.BHiterPosZ)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (RoleID != 0UL) hash ^= RoleID.GetHashCode();
      if (AttackerID != 0UL) hash ^= AttackerID.GetHashCode();
      if (AttackerType != 0) hash ^= AttackerType.GetHashCode();
      if (BeHiterID != 0UL) hash ^= BeHiterID.GetHashCode();
      if (BeHiterType != 0) hash ^= BeHiterType.GetHashCode();
      if (AttackTypeID != 0) hash ^= AttackTypeID.GetHashCode();
      if (VerifyCode.Length != 0) hash ^= VerifyCode.GetHashCode();
      if (AttackPosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackPosX);
      if (AttackPosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackPosY);
      if (AttackPosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackPosZ);
      if (BHiterPosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BHiterPosX);
      if (BHiterPosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BHiterPosY);
      if (BHiterPosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BHiterPosZ);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (RoleID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoleID);
      }
      if (AttackerID != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(AttackerID);
      }
      if (AttackerType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(AttackerType);
      }
      if (BeHiterID != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(BeHiterID);
      }
      if (BeHiterType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(BeHiterType);
      }
      if (AttackTypeID != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AttackTypeID);
      }
      if (VerifyCode.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(VerifyCode);
      }
      if (AttackPosX != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(AttackPosX);
      }
      if (AttackPosY != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(AttackPosY);
      }
      if (AttackPosZ != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(AttackPosZ);
      }
      if (BHiterPosX != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(BHiterPosX);
      }
      if (BHiterPosY != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(BHiterPosY);
      }
      if (BHiterPosZ != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(BHiterPosZ);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      if (AttackerID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AttackerID);
      }
      if (AttackerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackerType);
      }
      if (BeHiterID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeHiterID);
      }
      if (BeHiterType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeHiterType);
      }
      if (AttackTypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackTypeID);
      }
      if (VerifyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerifyCode);
      }
      if (AttackPosX != 0F) {
        size += 1 + 4;
      }
      if (AttackPosY != 0F) {
        size += 1 + 4;
      }
      if (AttackPosZ != 0F) {
        size += 1 + 4;
      }
      if (BHiterPosX != 0F) {
        size += 1 + 4;
      }
      if (BHiterPosY != 0F) {
        size += 1 + 4;
      }
      if (BHiterPosZ != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttackInfo other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.RoleID != 0UL) {
        RoleID = other.RoleID;
      }
      if (other.AttackerID != 0UL) {
        AttackerID = other.AttackerID;
      }
      if (other.AttackerType != 0) {
        AttackerType = other.AttackerType;
      }
      if (other.BeHiterID != 0UL) {
        BeHiterID = other.BeHiterID;
      }
      if (other.BeHiterType != 0) {
        BeHiterType = other.BeHiterType;
      }
      if (other.AttackTypeID != 0) {
        AttackTypeID = other.AttackTypeID;
      }
      if (other.VerifyCode.Length != 0) {
        VerifyCode = other.VerifyCode;
      }
      if (other.AttackPosX != 0F) {
        AttackPosX = other.AttackPosX;
      }
      if (other.AttackPosY != 0F) {
        AttackPosY = other.AttackPosY;
      }
      if (other.AttackPosZ != 0F) {
        AttackPosZ = other.AttackPosZ;
      }
      if (other.BHiterPosX != 0F) {
        BHiterPosX = other.BHiterPosX;
      }
      if (other.BHiterPosY != 0F) {
        BHiterPosY = other.BHiterPosY;
      }
      if (other.BHiterPosZ != 0F) {
        BHiterPosZ = other.BHiterPosZ;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 24: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 32: {
            AttackerID = input.ReadUInt64();
            break;
          }
          case 40: {
            AttackerType = input.ReadInt32();
            break;
          }
          case 48: {
            BeHiterID = input.ReadUInt64();
            break;
          }
          case 56: {
            BeHiterType = input.ReadInt32();
            break;
          }
          case 64: {
            AttackTypeID = input.ReadInt32();
            break;
          }
          case 74: {
            VerifyCode = input.ReadString();
            break;
          }
          case 85: {
            AttackPosX = input.ReadFloat();
            break;
          }
          case 93: {
            AttackPosY = input.ReadFloat();
            break;
          }
          case 101: {
            AttackPosZ = input.ReadFloat();
            break;
          }
          case 109: {
            BHiterPosX = input.ReadFloat();
            break;
          }
          case 117: {
            BHiterPosY = input.ReadFloat();
            break;
          }
          case 125: {
            BHiterPosZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttackResult : pb::IMessage<AttackResult> {
    private static readonly pb::MessageParser<AttackResult> _parser = new pb::MessageParser<AttackResult>(() => new AttackResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttackResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.GameMapReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackResult(AttackResult other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      attackerID_ = other.attackerID_;
      attackerType_ = other.attackerType_;
      beHiterID_ = other.beHiterID_;
      beHiterType_ = other.beHiterType_;
      attackTypeID_ = other.attackTypeID_;
      resultType_ = other.resultType_;
      attackValue_ = other.attackValue_;
      attackReturn_ = other.attackReturn_;
      attackPosX_ = other.attackPosX_;
      attackPosY_ = other.attackPosY_;
      attackPosZ_ = other.attackPosZ_;
      bHiterPosX_ = other.bHiterPosX_;
      bHiterPosY_ = other.bHiterPosY_;
      bHiterPosZ_ = other.bHiterPosZ_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackResult Clone() {
      return new AttackResult(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "AttackerID" field.</summary>
    public const int AttackerIDFieldNumber = 3;
    private ulong attackerID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AttackerID {
      get { return attackerID_; }
      set {
        attackerID_ = value;
      }
    }

    /// <summary>Field number for the "AttackerType" field.</summary>
    public const int AttackerTypeFieldNumber = 4;
    private int attackerType_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackerType {
      get { return attackerType_; }
      set {
        attackerType_ = value;
      }
    }

    /// <summary>Field number for the "BeHiterID" field.</summary>
    public const int BeHiterIDFieldNumber = 5;
    private ulong beHiterID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BeHiterID {
      get { return beHiterID_; }
      set {
        beHiterID_ = value;
      }
    }

    /// <summary>Field number for the "BeHiterType" field.</summary>
    public const int BeHiterTypeFieldNumber = 6;
    private int beHiterType_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BeHiterType {
      get { return beHiterType_; }
      set {
        beHiterType_ = value;
      }
    }

    /// <summary>Field number for the "AttackTypeID" field.</summary>
    public const int AttackTypeIDFieldNumber = 7;
    private int attackTypeID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackTypeID {
      get { return attackTypeID_; }
      set {
        attackTypeID_ = value;
      }
    }

    /// <summary>Field number for the "ResultType" field.</summary>
    public const int ResultTypeFieldNumber = 8;
    private int resultType_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResultType {
      get { return resultType_; }
      set {
        resultType_ = value;
      }
    }

    /// <summary>Field number for the "AttackValue" field.</summary>
    public const int AttackValueFieldNumber = 9;
    private int attackValue_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackValue {
      get { return attackValue_; }
      set {
        attackValue_ = value;
      }
    }

    /// <summary>Field number for the "AttackReturn" field.</summary>
    public const int AttackReturnFieldNumber = 10;
    private int attackReturn_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackReturn {
      get { return attackReturn_; }
      set {
        attackReturn_ = value;
      }
    }

    /// <summary>Field number for the "AttackPosX" field.</summary>
    public const int AttackPosXFieldNumber = 11;
    private float attackPosX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackPosX {
      get { return attackPosX_; }
      set {
        attackPosX_ = value;
      }
    }

    /// <summary>Field number for the "AttackPosY" field.</summary>
    public const int AttackPosYFieldNumber = 12;
    private float attackPosY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackPosY {
      get { return attackPosY_; }
      set {
        attackPosY_ = value;
      }
    }

    /// <summary>Field number for the "AttackPosZ" field.</summary>
    public const int AttackPosZFieldNumber = 13;
    private float attackPosZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackPosZ {
      get { return attackPosZ_; }
      set {
        attackPosZ_ = value;
      }
    }

    /// <summary>Field number for the "BHiterPosX" field.</summary>
    public const int BHiterPosXFieldNumber = 14;
    private float bHiterPosX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BHiterPosX {
      get { return bHiterPosX_; }
      set {
        bHiterPosX_ = value;
      }
    }

    /// <summary>Field number for the "BHiterPosY" field.</summary>
    public const int BHiterPosYFieldNumber = 15;
    private float bHiterPosY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BHiterPosY {
      get { return bHiterPosY_; }
      set {
        bHiterPosY_ = value;
      }
    }

    /// <summary>Field number for the "BHiterPosZ" field.</summary>
    public const int BHiterPosZFieldNumber = 16;
    private float bHiterPosZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BHiterPosZ {
      get { return bHiterPosZ_; }
      set {
        bHiterPosZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttackResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttackResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (AttackerID != other.AttackerID) return false;
      if (AttackerType != other.AttackerType) return false;
      if (BeHiterID != other.BeHiterID) return false;
      if (BeHiterType != other.BeHiterType) return false;
      if (AttackTypeID != other.AttackTypeID) return false;
      if (ResultType != other.ResultType) return false;
      if (AttackValue != other.AttackValue) return false;
      if (AttackReturn != other.AttackReturn) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackPosX, other.AttackPosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackPosY, other.AttackPosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackPosZ, other.AttackPosZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BHiterPosX, other.BHiterPosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BHiterPosY, other.BHiterPosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BHiterPosZ, other.BHiterPosZ)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (AttackerID != 0UL) hash ^= AttackerID.GetHashCode();
      if (AttackerType != 0) hash ^= AttackerType.GetHashCode();
      if (BeHiterID != 0UL) hash ^= BeHiterID.GetHashCode();
      if (BeHiterType != 0) hash ^= BeHiterType.GetHashCode();
      if (AttackTypeID != 0) hash ^= AttackTypeID.GetHashCode();
      if (ResultType != 0) hash ^= ResultType.GetHashCode();
      if (AttackValue != 0) hash ^= AttackValue.GetHashCode();
      if (AttackReturn != 0) hash ^= AttackReturn.GetHashCode();
      if (AttackPosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackPosX);
      if (AttackPosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackPosY);
      if (AttackPosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackPosZ);
      if (BHiterPosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BHiterPosX);
      if (BHiterPosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BHiterPosY);
      if (BHiterPosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BHiterPosZ);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (AttackerID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(AttackerID);
      }
      if (AttackerType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AttackerType);
      }
      if (BeHiterID != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(BeHiterID);
      }
      if (BeHiterType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BeHiterType);
      }
      if (AttackTypeID != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AttackTypeID);
      }
      if (ResultType != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ResultType);
      }
      if (AttackValue != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AttackValue);
      }
      if (AttackReturn != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(AttackReturn);
      }
      if (AttackPosX != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(AttackPosX);
      }
      if (AttackPosY != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(AttackPosY);
      }
      if (AttackPosZ != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(AttackPosZ);
      }
      if (BHiterPosX != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(BHiterPosX);
      }
      if (BHiterPosY != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(BHiterPosY);
      }
      if (BHiterPosZ != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(BHiterPosZ);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (AttackerID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AttackerID);
      }
      if (AttackerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackerType);
      }
      if (BeHiterID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeHiterID);
      }
      if (BeHiterType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeHiterType);
      }
      if (AttackTypeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackTypeID);
      }
      if (ResultType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResultType);
      }
      if (AttackValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackValue);
      }
      if (AttackReturn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackReturn);
      }
      if (AttackPosX != 0F) {
        size += 1 + 4;
      }
      if (AttackPosY != 0F) {
        size += 1 + 4;
      }
      if (AttackPosZ != 0F) {
        size += 1 + 4;
      }
      if (BHiterPosX != 0F) {
        size += 1 + 4;
      }
      if (BHiterPosY != 0F) {
        size += 1 + 4;
      }
      if (BHiterPosZ != 0F) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttackResult other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.AttackerID != 0UL) {
        AttackerID = other.AttackerID;
      }
      if (other.AttackerType != 0) {
        AttackerType = other.AttackerType;
      }
      if (other.BeHiterID != 0UL) {
        BeHiterID = other.BeHiterID;
      }
      if (other.BeHiterType != 0) {
        BeHiterType = other.BeHiterType;
      }
      if (other.AttackTypeID != 0) {
        AttackTypeID = other.AttackTypeID;
      }
      if (other.ResultType != 0) {
        ResultType = other.ResultType;
      }
      if (other.AttackValue != 0) {
        AttackValue = other.AttackValue;
      }
      if (other.AttackReturn != 0) {
        AttackReturn = other.AttackReturn;
      }
      if (other.AttackPosX != 0F) {
        AttackPosX = other.AttackPosX;
      }
      if (other.AttackPosY != 0F) {
        AttackPosY = other.AttackPosY;
      }
      if (other.AttackPosZ != 0F) {
        AttackPosZ = other.AttackPosZ;
      }
      if (other.BHiterPosX != 0F) {
        BHiterPosX = other.BHiterPosX;
      }
      if (other.BHiterPosY != 0F) {
        BHiterPosY = other.BHiterPosY;
      }
      if (other.BHiterPosZ != 0F) {
        BHiterPosZ = other.BHiterPosZ;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 24: {
            AttackerID = input.ReadUInt64();
            break;
          }
          case 32: {
            AttackerType = input.ReadInt32();
            break;
          }
          case 40: {
            BeHiterID = input.ReadUInt64();
            break;
          }
          case 48: {
            BeHiterType = input.ReadInt32();
            break;
          }
          case 56: {
            AttackTypeID = input.ReadInt32();
            break;
          }
          case 64: {
            ResultType = input.ReadInt32();
            break;
          }
          case 72: {
            AttackValue = input.ReadInt32();
            break;
          }
          case 80: {
            AttackReturn = input.ReadInt32();
            break;
          }
          case 93: {
            AttackPosX = input.ReadFloat();
            break;
          }
          case 101: {
            AttackPosY = input.ReadFloat();
            break;
          }
          case 109: {
            AttackPosZ = input.ReadFloat();
            break;
          }
          case 117: {
            BHiterPosX = input.ReadFloat();
            break;
          }
          case 125: {
            BHiterPosY = input.ReadFloat();
            break;
          }
          case 133: {
            BHiterPosZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DebugNpcTarget : pb::IMessage<DebugNpcTarget> {
    private static readonly pb::MessageParser<DebugNpcTarget> _parser = new pb::MessageParser<DebugNpcTarget>(() => new DebugNpcTarget());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DebugNpcTarget> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.GameMapReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugNpcTarget() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugNpcTarget(DebugNpcTarget other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      npcID_ = other.npcID_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DebugNpcTarget Clone() {
      return new DebugNpcTarget(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "NpcID" field.</summary>
    public const int NpcIDFieldNumber = 3;
    private ulong npcID_;
    /// <summary>
    ///NPCID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NpcID {
      get { return npcID_; }
      set {
        npcID_ = value;
      }
    }

    /// <summary>Field number for the "PosX" field.</summary>
    public const int PosXFieldNumber = 7;
    private float posX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "PosY" field.</summary>
    public const int PosYFieldNumber = 8;
    private float posY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "PosZ" field.</summary>
    public const int PosZFieldNumber = 9;
    private float posZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DebugNpcTarget);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DebugNpcTarget other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (NpcID != other.NpcID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosZ, other.PosZ)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (NpcID != 0UL) hash ^= NpcID.GetHashCode();
      if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
      if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
      if (PosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosZ);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (NpcID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(NpcID);
      }
      if (PosX != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(PosZ);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (NpcID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NpcID);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DebugNpcTarget other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.NpcID != 0UL) {
        NpcID = other.NpcID;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 24: {
            NpcID = input.ReadUInt64();
            break;
          }
          case 61: {
            PosX = input.ReadFloat();
            break;
          }
          case 69: {
            PosY = input.ReadFloat();
            break;
          }
          case 77: {
            PosZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
