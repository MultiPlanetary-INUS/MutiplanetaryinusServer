/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var MessageID_pb = require('./MessageID_pb.js');
var RolePKG_pb = require('./RolePKG_pb.js');
goog.exportSymbol('proto.GamePKG.AttackInfo', null, global);
goog.exportSymbol('proto.GamePKG.AttackResult', null, global);
goog.exportSymbol('proto.GamePKG.ChangeMap', null, global);
goog.exportSymbol('proto.GamePKG.DebugNpcTarget', null, global);
goog.exportSymbol('proto.GamePKG.EnterGame', null, global);
goog.exportSymbol('proto.GamePKG.EnterGameResponse', null, global);
goog.exportSymbol('proto.GamePKG.ItemDesOnMap', null, global);
goog.exportSymbol('proto.GamePKG.ItemOnMap', null, global);
goog.exportSymbol('proto.GamePKG.NpcDead', null, global);
goog.exportSymbol('proto.GamePKG.NpcInfo', null, global);
goog.exportSymbol('proto.GamePKG.NpcMove', null, global);
goog.exportSymbol('proto.GamePKG.OtherPlayerEnter', null, global);
goog.exportSymbol('proto.GamePKG.PickUpItem', null, global);
goog.exportSymbol('proto.GamePKG.PlayerControl', null, global);
goog.exportSymbol('proto.GamePKG.PlayerLeaveGame', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GamePKG.EnterGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GamePKG.EnterGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GamePKG.EnterGame.displayName = 'proto.GamePKG.EnterGame';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GamePKG.EnterGame.prototype.toObject = function(opt_includeInstance) {
  return proto.GamePKG.EnterGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GamePKG.EnterGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.EnterGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkgid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    roleid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    verifycode: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GamePKG.EnterGame}
 */
proto.GamePKG.EnterGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GamePKG.EnterGame;
  return proto.GamePKG.EnterGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GamePKG.EnterGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GamePKG.EnterGame}
 */
proto.GamePKG.EnterGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.PKGTypeID} */ (reader.readEnum());
      msg.setPkgid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRoleid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerifycode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GamePKG.EnterGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GamePKG.EnterGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GamePKG.EnterGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.EnterGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPkgid();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRoleid();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getVerifycode();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional PKGTypeID PkgID = 1;
 * @return {!proto.PKGTypeID}
 */
proto.GamePKG.EnterGame.prototype.getPkgid = function() {
  return /** @type {!proto.PKGTypeID} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.PKGTypeID} value */
proto.GamePKG.EnterGame.prototype.setPkgid = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 UserID = 2;
 * @return {number}
 */
proto.GamePKG.EnterGame.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GamePKG.EnterGame.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 RoleID = 4;
 * @return {number}
 */
proto.GamePKG.EnterGame.prototype.getRoleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.GamePKG.EnterGame.prototype.setRoleid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string VerifyCode = 5;
 * @return {string}
 */
proto.GamePKG.EnterGame.prototype.getVerifycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.GamePKG.EnterGame.prototype.setVerifycode = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GamePKG.EnterGameResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GamePKG.EnterGameResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GamePKG.EnterGameResponse.displayName = 'proto.GamePKG.EnterGameResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GamePKG.EnterGameResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GamePKG.EnterGameResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GamePKG.EnterGameResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.EnterGameResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkgid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    roleid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    mapid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    creatorid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    posx: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    posy: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    posz: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    direction: +jspb.Message.getFieldWithDefault(msg, 10, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GamePKG.EnterGameResponse}
 */
proto.GamePKG.EnterGameResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GamePKG.EnterGameResponse;
  return proto.GamePKG.EnterGameResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GamePKG.EnterGameResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GamePKG.EnterGameResponse}
 */
proto.GamePKG.EnterGameResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.PKGTypeID} */ (reader.readEnum());
      msg.setPkgid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRoleid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMapid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCreatorid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosx(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosy(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosz(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDirection(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GamePKG.EnterGameResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GamePKG.EnterGameResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GamePKG.EnterGameResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.EnterGameResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPkgid();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRoleid();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getMapid();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getCreatorid();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getPosx();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getPosy();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getPosz();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
};


/**
 * optional PKGTypeID PkgID = 1;
 * @return {!proto.PKGTypeID}
 */
proto.GamePKG.EnterGameResponse.prototype.getPkgid = function() {
  return /** @type {!proto.PKGTypeID} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.PKGTypeID} value */
proto.GamePKG.EnterGameResponse.prototype.setPkgid = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 UserID = 2;
 * @return {number}
 */
proto.GamePKG.EnterGameResponse.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GamePKG.EnterGameResponse.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 RoleID = 4;
 * @return {number}
 */
proto.GamePKG.EnterGameResponse.prototype.getRoleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.GamePKG.EnterGameResponse.prototype.setRoleid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 MapID = 5;
 * @return {number}
 */
proto.GamePKG.EnterGameResponse.prototype.getMapid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.GamePKG.EnterGameResponse.prototype.setMapid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 CreatorID = 6;
 * @return {number}
 */
proto.GamePKG.EnterGameResponse.prototype.getCreatorid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.GamePKG.EnterGameResponse.prototype.setCreatorid = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional float PosX = 7;
 * @return {number}
 */
proto.GamePKG.EnterGameResponse.prototype.getPosx = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.GamePKG.EnterGameResponse.prototype.setPosx = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float PosY = 8;
 * @return {number}
 */
proto.GamePKG.EnterGameResponse.prototype.getPosy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.GamePKG.EnterGameResponse.prototype.setPosy = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional float PosZ = 9;
 * @return {number}
 */
proto.GamePKG.EnterGameResponse.prototype.getPosz = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.GamePKG.EnterGameResponse.prototype.setPosz = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional float Direction = 10;
 * @return {number}
 */
proto.GamePKG.EnterGameResponse.prototype.getDirection = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.GamePKG.EnterGameResponse.prototype.setDirection = function(value) {
  jspb.Message.setProto3FloatField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GamePKG.OtherPlayerEnter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GamePKG.OtherPlayerEnter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GamePKG.OtherPlayerEnter.displayName = 'proto.GamePKG.OtherPlayerEnter';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GamePKG.OtherPlayerEnter.prototype.toObject = function(opt_includeInstance) {
  return proto.GamePKG.OtherPlayerEnter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GamePKG.OtherPlayerEnter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.OtherPlayerEnter.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkgid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    otheruserid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    otherroleid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    posx: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    posy: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    posz: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    direction: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    otherroleinfo: (f = msg.getOtherroleinfo()) && RolePKG_pb.RoleInfo.toObject(includeInstance, f),
    otherroleattr: (f = msg.getOtherroleattr()) && RolePKG_pb.RoleAttr.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GamePKG.OtherPlayerEnter}
 */
proto.GamePKG.OtherPlayerEnter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GamePKG.OtherPlayerEnter;
  return proto.GamePKG.OtherPlayerEnter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GamePKG.OtherPlayerEnter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GamePKG.OtherPlayerEnter}
 */
proto.GamePKG.OtherPlayerEnter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.PKGTypeID} */ (reader.readEnum());
      msg.setPkgid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOtheruserid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setOtherroleid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosx(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosy(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosz(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDirection(value);
      break;
    case 11:
      var value = new RolePKG_pb.RoleInfo;
      reader.readMessage(value,RolePKG_pb.RoleInfo.deserializeBinaryFromReader);
      msg.setOtherroleinfo(value);
      break;
    case 12:
      var value = new RolePKG_pb.RoleAttr;
      reader.readMessage(value,RolePKG_pb.RoleAttr.deserializeBinaryFromReader);
      msg.setOtherroleattr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GamePKG.OtherPlayerEnter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GamePKG.OtherPlayerEnter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GamePKG.OtherPlayerEnter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.OtherPlayerEnter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPkgid();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getOtheruserid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getOtherroleid();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getPosx();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getPosy();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getPosz();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getOtherroleinfo();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      RolePKG_pb.RoleInfo.serializeBinaryToWriter
    );
  }
  f = message.getOtherroleattr();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      RolePKG_pb.RoleAttr.serializeBinaryToWriter
    );
  }
};


/**
 * optional PKGTypeID PkgID = 1;
 * @return {!proto.PKGTypeID}
 */
proto.GamePKG.OtherPlayerEnter.prototype.getPkgid = function() {
  return /** @type {!proto.PKGTypeID} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.PKGTypeID} value */
proto.GamePKG.OtherPlayerEnter.prototype.setPkgid = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 UserID = 2;
 * @return {number}
 */
proto.GamePKG.OtherPlayerEnter.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GamePKG.OtherPlayerEnter.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 OtherUserID = 3;
 * @return {number}
 */
proto.GamePKG.OtherPlayerEnter.prototype.getOtheruserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GamePKG.OtherPlayerEnter.prototype.setOtheruserid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 OtherRoleID = 4;
 * @return {number}
 */
proto.GamePKG.OtherPlayerEnter.prototype.getOtherroleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.GamePKG.OtherPlayerEnter.prototype.setOtherroleid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional float PosX = 7;
 * @return {number}
 */
proto.GamePKG.OtherPlayerEnter.prototype.getPosx = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.GamePKG.OtherPlayerEnter.prototype.setPosx = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float PosY = 8;
 * @return {number}
 */
proto.GamePKG.OtherPlayerEnter.prototype.getPosy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.GamePKG.OtherPlayerEnter.prototype.setPosy = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional float PosZ = 9;
 * @return {number}
 */
proto.GamePKG.OtherPlayerEnter.prototype.getPosz = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.GamePKG.OtherPlayerEnter.prototype.setPosz = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional float Direction = 10;
 * @return {number}
 */
proto.GamePKG.OtherPlayerEnter.prototype.getDirection = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.GamePKG.OtherPlayerEnter.prototype.setDirection = function(value) {
  jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional RoleInfo OtherRoleInfo = 11;
 * @return {?proto.GamePKG.RoleInfo}
 */
proto.GamePKG.OtherPlayerEnter.prototype.getOtherroleinfo = function() {
  return /** @type{?proto.GamePKG.RoleInfo} */ (
    jspb.Message.getWrapperField(this, RolePKG_pb.RoleInfo, 11));
};


/** @param {?proto.GamePKG.RoleInfo|undefined} value */
proto.GamePKG.OtherPlayerEnter.prototype.setOtherroleinfo = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.GamePKG.OtherPlayerEnter.prototype.clearOtherroleinfo = function() {
  this.setOtherroleinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GamePKG.OtherPlayerEnter.prototype.hasOtherroleinfo = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional RoleAttr OtherRoleAttr = 12;
 * @return {?proto.GamePKG.RoleAttr}
 */
proto.GamePKG.OtherPlayerEnter.prototype.getOtherroleattr = function() {
  return /** @type{?proto.GamePKG.RoleAttr} */ (
    jspb.Message.getWrapperField(this, RolePKG_pb.RoleAttr, 12));
};


/** @param {?proto.GamePKG.RoleAttr|undefined} value */
proto.GamePKG.OtherPlayerEnter.prototype.setOtherroleattr = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.GamePKG.OtherPlayerEnter.prototype.clearOtherroleattr = function() {
  this.setOtherroleattr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GamePKG.OtherPlayerEnter.prototype.hasOtherroleattr = function() {
  return jspb.Message.getField(this, 12) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GamePKG.PlayerControl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GamePKG.PlayerControl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GamePKG.PlayerControl.displayName = 'proto.GamePKG.PlayerControl';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GamePKG.PlayerControl.prototype.toObject = function(opt_includeInstance) {
  return proto.GamePKG.PlayerControl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GamePKG.PlayerControl} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.PlayerControl.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkgid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    roleid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    horizontal: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    vertical: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    direction: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    state: jspb.Message.getFieldWithDefault(msg, 7, 0),
    jump: jspb.Message.getFieldWithDefault(msg, 8, false),
    lbutton: jspb.Message.getFieldWithDefault(msg, 9, false),
    rbutton: jspb.Message.getFieldWithDefault(msg, 10, false),
    dodge: jspb.Message.getFieldWithDefault(msg, 11, false),
    posx: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    posy: +jspb.Message.getFieldWithDefault(msg, 13, 0.0),
    posz: +jspb.Message.getFieldWithDefault(msg, 14, 0.0),
    verifycode: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GamePKG.PlayerControl}
 */
proto.GamePKG.PlayerControl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GamePKG.PlayerControl;
  return proto.GamePKG.PlayerControl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GamePKG.PlayerControl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GamePKG.PlayerControl}
 */
proto.GamePKG.PlayerControl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.PKGTypeID} */ (reader.readEnum());
      msg.setPkgid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRoleid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHorizontal(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVertical(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDirection(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setJump(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLbutton(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRbutton(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDodge(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosx(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosy(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosz(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerifycode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GamePKG.PlayerControl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GamePKG.PlayerControl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GamePKG.PlayerControl} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.PlayerControl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPkgid();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRoleid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getHorizontal();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getVertical();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getJump();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getLbutton();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getRbutton();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getDodge();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getPosx();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getPosy();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = message.getPosz();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = message.getVerifycode();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional PKGTypeID PkgID = 1;
 * @return {!proto.PKGTypeID}
 */
proto.GamePKG.PlayerControl.prototype.getPkgid = function() {
  return /** @type {!proto.PKGTypeID} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.PKGTypeID} value */
proto.GamePKG.PlayerControl.prototype.setPkgid = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 UserID = 2;
 * @return {number}
 */
proto.GamePKG.PlayerControl.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GamePKG.PlayerControl.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 RoleID = 3;
 * @return {number}
 */
proto.GamePKG.PlayerControl.prototype.getRoleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GamePKG.PlayerControl.prototype.setRoleid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional float Horizontal = 4;
 * @return {number}
 */
proto.GamePKG.PlayerControl.prototype.getHorizontal = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.GamePKG.PlayerControl.prototype.setHorizontal = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float Vertical = 5;
 * @return {number}
 */
proto.GamePKG.PlayerControl.prototype.getVertical = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.GamePKG.PlayerControl.prototype.setVertical = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float Direction = 6;
 * @return {number}
 */
proto.GamePKG.PlayerControl.prototype.getDirection = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.GamePKG.PlayerControl.prototype.setDirection = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional int32 State = 7;
 * @return {number}
 */
proto.GamePKG.PlayerControl.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.GamePKG.PlayerControl.prototype.setState = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool Jump = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.GamePKG.PlayerControl.prototype.getJump = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.GamePKG.PlayerControl.prototype.setJump = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool LButton = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.GamePKG.PlayerControl.prototype.getLbutton = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.GamePKG.PlayerControl.prototype.setLbutton = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool RButton = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.GamePKG.PlayerControl.prototype.getRbutton = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.GamePKG.PlayerControl.prototype.setRbutton = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool Dodge = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.GamePKG.PlayerControl.prototype.getDodge = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 11, false));
};


/** @param {boolean} value */
proto.GamePKG.PlayerControl.prototype.setDodge = function(value) {
  jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional float PosX = 12;
 * @return {number}
 */
proto.GamePKG.PlayerControl.prototype.getPosx = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.GamePKG.PlayerControl.prototype.setPosx = function(value) {
  jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional float PosY = 13;
 * @return {number}
 */
proto.GamePKG.PlayerControl.prototype.getPosy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.GamePKG.PlayerControl.prototype.setPosy = function(value) {
  jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional float PosZ = 14;
 * @return {number}
 */
proto.GamePKG.PlayerControl.prototype.getPosz = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 14, 0.0));
};


/** @param {number} value */
proto.GamePKG.PlayerControl.prototype.setPosz = function(value) {
  jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional string VerifyCode = 15;
 * @return {string}
 */
proto.GamePKG.PlayerControl.prototype.getVerifycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.GamePKG.PlayerControl.prototype.setVerifycode = function(value) {
  jspb.Message.setProto3StringField(this, 15, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GamePKG.NpcMove = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GamePKG.NpcMove, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GamePKG.NpcMove.displayName = 'proto.GamePKG.NpcMove';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GamePKG.NpcMove.prototype.toObject = function(opt_includeInstance) {
  return proto.GamePKG.NpcMove.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GamePKG.NpcMove} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.NpcMove.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkgid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    npcid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    direction: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    state: jspb.Message.getFieldWithDefault(msg, 5, 0),
    speed: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    jump: jspb.Message.getFieldWithDefault(msg, 7, false),
    lbutton: jspb.Message.getFieldWithDefault(msg, 8, false),
    rbutton: jspb.Message.getFieldWithDefault(msg, 9, false),
    posx: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    posy: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    posz: +jspb.Message.getFieldWithDefault(msg, 13, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GamePKG.NpcMove}
 */
proto.GamePKG.NpcMove.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GamePKG.NpcMove;
  return proto.GamePKG.NpcMove.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GamePKG.NpcMove} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GamePKG.NpcMove}
 */
proto.GamePKG.NpcMove.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.PKGTypeID} */ (reader.readEnum());
      msg.setPkgid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNpcid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDirection(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setState(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeed(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setJump(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLbutton(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRbutton(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosx(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosy(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GamePKG.NpcMove.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GamePKG.NpcMove.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GamePKG.NpcMove} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.NpcMove.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPkgid();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getNpcid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getSpeed();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getJump();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getLbutton();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getRbutton();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getPosx();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getPosy();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getPosz();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
};


/**
 * optional PKGTypeID PkgID = 1;
 * @return {!proto.PKGTypeID}
 */
proto.GamePKG.NpcMove.prototype.getPkgid = function() {
  return /** @type {!proto.PKGTypeID} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.PKGTypeID} value */
proto.GamePKG.NpcMove.prototype.setPkgid = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 UserID = 2;
 * @return {number}
 */
proto.GamePKG.NpcMove.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GamePKG.NpcMove.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 NpcID = 3;
 * @return {number}
 */
proto.GamePKG.NpcMove.prototype.getNpcid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GamePKG.NpcMove.prototype.setNpcid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional float Direction = 4;
 * @return {number}
 */
proto.GamePKG.NpcMove.prototype.getDirection = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.GamePKG.NpcMove.prototype.setDirection = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional int32 State = 5;
 * @return {number}
 */
proto.GamePKG.NpcMove.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.GamePKG.NpcMove.prototype.setState = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional float Speed = 6;
 * @return {number}
 */
proto.GamePKG.NpcMove.prototype.getSpeed = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.GamePKG.NpcMove.prototype.setSpeed = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional bool Jump = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.GamePKG.NpcMove.prototype.getJump = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.GamePKG.NpcMove.prototype.setJump = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool LButton = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.GamePKG.NpcMove.prototype.getLbutton = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.GamePKG.NpcMove.prototype.setLbutton = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool RButton = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.GamePKG.NpcMove.prototype.getRbutton = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.GamePKG.NpcMove.prototype.setRbutton = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional float PosX = 11;
 * @return {number}
 */
proto.GamePKG.NpcMove.prototype.getPosx = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.GamePKG.NpcMove.prototype.setPosx = function(value) {
  jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional float PosY = 12;
 * @return {number}
 */
proto.GamePKG.NpcMove.prototype.getPosy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.GamePKG.NpcMove.prototype.setPosy = function(value) {
  jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional float PosZ = 13;
 * @return {number}
 */
proto.GamePKG.NpcMove.prototype.getPosz = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.GamePKG.NpcMove.prototype.setPosz = function(value) {
  jspb.Message.setProto3FloatField(this, 13, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GamePKG.PlayerLeaveGame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GamePKG.PlayerLeaveGame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GamePKG.PlayerLeaveGame.displayName = 'proto.GamePKG.PlayerLeaveGame';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GamePKG.PlayerLeaveGame.prototype.toObject = function(opt_includeInstance) {
  return proto.GamePKG.PlayerLeaveGame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GamePKG.PlayerLeaveGame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.PlayerLeaveGame.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkgid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    roleid: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GamePKG.PlayerLeaveGame}
 */
proto.GamePKG.PlayerLeaveGame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GamePKG.PlayerLeaveGame;
  return proto.GamePKG.PlayerLeaveGame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GamePKG.PlayerLeaveGame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GamePKG.PlayerLeaveGame}
 */
proto.GamePKG.PlayerLeaveGame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.PKGTypeID} */ (reader.readEnum());
      msg.setPkgid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRoleid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GamePKG.PlayerLeaveGame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GamePKG.PlayerLeaveGame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GamePKG.PlayerLeaveGame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.PlayerLeaveGame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPkgid();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRoleid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional PKGTypeID PkgID = 1;
 * @return {!proto.PKGTypeID}
 */
proto.GamePKG.PlayerLeaveGame.prototype.getPkgid = function() {
  return /** @type {!proto.PKGTypeID} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.PKGTypeID} value */
proto.GamePKG.PlayerLeaveGame.prototype.setPkgid = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 UserID = 2;
 * @return {number}
 */
proto.GamePKG.PlayerLeaveGame.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GamePKG.PlayerLeaveGame.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 RoleID = 3;
 * @return {number}
 */
proto.GamePKG.PlayerLeaveGame.prototype.getRoleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GamePKG.PlayerLeaveGame.prototype.setRoleid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GamePKG.NpcInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GamePKG.NpcInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GamePKG.NpcInfo.displayName = 'proto.GamePKG.NpcInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GamePKG.NpcInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.GamePKG.NpcInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GamePKG.NpcInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.NpcInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkgid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    npcid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    defid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    posx: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    posy: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    posz: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    direction: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    speed: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    life: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GamePKG.NpcInfo}
 */
proto.GamePKG.NpcInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GamePKG.NpcInfo;
  return proto.GamePKG.NpcInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GamePKG.NpcInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GamePKG.NpcInfo}
 */
proto.GamePKG.NpcInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.PKGTypeID} */ (reader.readEnum());
      msg.setPkgid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNpcid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDefid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosx(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosy(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosz(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDirection(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSpeed(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLife(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GamePKG.NpcInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GamePKG.NpcInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GamePKG.NpcInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.NpcInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPkgid();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getNpcid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getDefid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getPosx();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getPosy();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getPosz();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getSpeed();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getLife();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
};


/**
 * optional PKGTypeID PkgID = 1;
 * @return {!proto.PKGTypeID}
 */
proto.GamePKG.NpcInfo.prototype.getPkgid = function() {
  return /** @type {!proto.PKGTypeID} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.PKGTypeID} value */
proto.GamePKG.NpcInfo.prototype.setPkgid = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 UserID = 2;
 * @return {number}
 */
proto.GamePKG.NpcInfo.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GamePKG.NpcInfo.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 NpcID = 3;
 * @return {number}
 */
proto.GamePKG.NpcInfo.prototype.getNpcid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GamePKG.NpcInfo.prototype.setNpcid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 DefID = 4;
 * @return {number}
 */
proto.GamePKG.NpcInfo.prototype.getDefid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.GamePKG.NpcInfo.prototype.setDefid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional float PosX = 5;
 * @return {number}
 */
proto.GamePKG.NpcInfo.prototype.getPosx = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.GamePKG.NpcInfo.prototype.setPosx = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float PosY = 6;
 * @return {number}
 */
proto.GamePKG.NpcInfo.prototype.getPosy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.GamePKG.NpcInfo.prototype.setPosy = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float PosZ = 7;
 * @return {number}
 */
proto.GamePKG.NpcInfo.prototype.getPosz = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.GamePKG.NpcInfo.prototype.setPosz = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float Direction = 8;
 * @return {number}
 */
proto.GamePKG.NpcInfo.prototype.getDirection = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.GamePKG.NpcInfo.prototype.setDirection = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional float Speed = 9;
 * @return {number}
 */
proto.GamePKG.NpcInfo.prototype.getSpeed = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.GamePKG.NpcInfo.prototype.setSpeed = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional int64 Life = 10;
 * @return {number}
 */
proto.GamePKG.NpcInfo.prototype.getLife = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.GamePKG.NpcInfo.prototype.setLife = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GamePKG.ChangeMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GamePKG.ChangeMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GamePKG.ChangeMap.displayName = 'proto.GamePKG.ChangeMap';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GamePKG.ChangeMap.prototype.toObject = function(opt_includeInstance) {
  return proto.GamePKG.ChangeMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GamePKG.ChangeMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.ChangeMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkgid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    roleid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    mapid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    posx: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    posz: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    verifycode: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GamePKG.ChangeMap}
 */
proto.GamePKG.ChangeMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GamePKG.ChangeMap;
  return proto.GamePKG.ChangeMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GamePKG.ChangeMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GamePKG.ChangeMap}
 */
proto.GamePKG.ChangeMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.PKGTypeID} */ (reader.readEnum());
      msg.setPkgid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRoleid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMapid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosx(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosz(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerifycode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GamePKG.ChangeMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GamePKG.ChangeMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GamePKG.ChangeMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.ChangeMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPkgid();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRoleid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getMapid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getPosx();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getPosz();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getVerifycode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional PKGTypeID PkgID = 1;
 * @return {!proto.PKGTypeID}
 */
proto.GamePKG.ChangeMap.prototype.getPkgid = function() {
  return /** @type {!proto.PKGTypeID} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.PKGTypeID} value */
proto.GamePKG.ChangeMap.prototype.setPkgid = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 UserID = 2;
 * @return {number}
 */
proto.GamePKG.ChangeMap.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GamePKG.ChangeMap.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 RoleID = 3;
 * @return {number}
 */
proto.GamePKG.ChangeMap.prototype.getRoleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GamePKG.ChangeMap.prototype.setRoleid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 MapID = 4;
 * @return {number}
 */
proto.GamePKG.ChangeMap.prototype.getMapid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.GamePKG.ChangeMap.prototype.setMapid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional float PosX = 5;
 * @return {number}
 */
proto.GamePKG.ChangeMap.prototype.getPosx = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.GamePKG.ChangeMap.prototype.setPosx = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float PosZ = 6;
 * @return {number}
 */
proto.GamePKG.ChangeMap.prototype.getPosz = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.GamePKG.ChangeMap.prototype.setPosz = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional string VerifyCode = 7;
 * @return {string}
 */
proto.GamePKG.ChangeMap.prototype.getVerifycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.GamePKG.ChangeMap.prototype.setVerifycode = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GamePKG.ItemOnMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GamePKG.ItemOnMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GamePKG.ItemOnMap.displayName = 'proto.GamePKG.ItemOnMap';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GamePKG.ItemOnMap.prototype.toObject = function(opt_includeInstance) {
  return proto.GamePKG.ItemOnMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GamePKG.ItemOnMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.ItemOnMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkgid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    roleid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    mapid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    itemid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    typeid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    posx: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    posy: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    posz: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    direction: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    rotespeed: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    count: jspb.Message.getFieldWithDefault(msg, 12, 0),
    lifetime: jspb.Message.getFieldWithDefault(msg, 13, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GamePKG.ItemOnMap}
 */
proto.GamePKG.ItemOnMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GamePKG.ItemOnMap;
  return proto.GamePKG.ItemOnMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GamePKG.ItemOnMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GamePKG.ItemOnMap}
 */
proto.GamePKG.ItemOnMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.PKGTypeID} */ (reader.readEnum());
      msg.setPkgid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRoleid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMapid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setItemid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTypeid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosx(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosy(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosz(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDirection(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRotespeed(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLifetime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GamePKG.ItemOnMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GamePKG.ItemOnMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GamePKG.ItemOnMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.ItemOnMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPkgid();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRoleid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getMapid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getItemid();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getTypeid();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getPosx();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getPosy();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getPosz();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getDirection();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getRotespeed();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = message.getLifetime();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
};


/**
 * optional PKGTypeID PkgID = 1;
 * @return {!proto.PKGTypeID}
 */
proto.GamePKG.ItemOnMap.prototype.getPkgid = function() {
  return /** @type {!proto.PKGTypeID} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.PKGTypeID} value */
proto.GamePKG.ItemOnMap.prototype.setPkgid = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 UserID = 2;
 * @return {number}
 */
proto.GamePKG.ItemOnMap.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GamePKG.ItemOnMap.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 RoleID = 3;
 * @return {number}
 */
proto.GamePKG.ItemOnMap.prototype.getRoleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GamePKG.ItemOnMap.prototype.setRoleid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 MapID = 4;
 * @return {number}
 */
proto.GamePKG.ItemOnMap.prototype.getMapid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.GamePKG.ItemOnMap.prototype.setMapid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 ItemID = 5;
 * @return {number}
 */
proto.GamePKG.ItemOnMap.prototype.getItemid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.GamePKG.ItemOnMap.prototype.setItemid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 TypeID = 6;
 * @return {number}
 */
proto.GamePKG.ItemOnMap.prototype.getTypeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.GamePKG.ItemOnMap.prototype.setTypeid = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional float PosX = 7;
 * @return {number}
 */
proto.GamePKG.ItemOnMap.prototype.getPosx = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.GamePKG.ItemOnMap.prototype.setPosx = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float PosY = 8;
 * @return {number}
 */
proto.GamePKG.ItemOnMap.prototype.getPosy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.GamePKG.ItemOnMap.prototype.setPosy = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional float PosZ = 9;
 * @return {number}
 */
proto.GamePKG.ItemOnMap.prototype.getPosz = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.GamePKG.ItemOnMap.prototype.setPosz = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional float Direction = 10;
 * @return {number}
 */
proto.GamePKG.ItemOnMap.prototype.getDirection = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.GamePKG.ItemOnMap.prototype.setDirection = function(value) {
  jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional float RoteSpeed = 11;
 * @return {number}
 */
proto.GamePKG.ItemOnMap.prototype.getRotespeed = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.GamePKG.ItemOnMap.prototype.setRotespeed = function(value) {
  jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional int32 Count = 12;
 * @return {number}
 */
proto.GamePKG.ItemOnMap.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.GamePKG.ItemOnMap.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};


/**
 * optional int64 LifeTime = 13;
 * @return {number}
 */
proto.GamePKG.ItemOnMap.prototype.getLifetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.GamePKG.ItemOnMap.prototype.setLifetime = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GamePKG.ItemDesOnMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GamePKG.ItemDesOnMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GamePKG.ItemDesOnMap.displayName = 'proto.GamePKG.ItemDesOnMap';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GamePKG.ItemDesOnMap.prototype.toObject = function(opt_includeInstance) {
  return proto.GamePKG.ItemDesOnMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GamePKG.ItemDesOnMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.ItemDesOnMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkgid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    roleid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    mapid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    itemid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    typeid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    verifycode: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GamePKG.ItemDesOnMap}
 */
proto.GamePKG.ItemDesOnMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GamePKG.ItemDesOnMap;
  return proto.GamePKG.ItemDesOnMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GamePKG.ItemDesOnMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GamePKG.ItemDesOnMap}
 */
proto.GamePKG.ItemDesOnMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.PKGTypeID} */ (reader.readEnum());
      msg.setPkgid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRoleid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMapid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setItemid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTypeid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerifycode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GamePKG.ItemDesOnMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GamePKG.ItemDesOnMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GamePKG.ItemDesOnMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.ItemDesOnMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPkgid();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRoleid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getMapid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getItemid();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getTypeid();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getVerifycode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional PKGTypeID PkgID = 1;
 * @return {!proto.PKGTypeID}
 */
proto.GamePKG.ItemDesOnMap.prototype.getPkgid = function() {
  return /** @type {!proto.PKGTypeID} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.PKGTypeID} value */
proto.GamePKG.ItemDesOnMap.prototype.setPkgid = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 UserID = 2;
 * @return {number}
 */
proto.GamePKG.ItemDesOnMap.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GamePKG.ItemDesOnMap.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 RoleID = 3;
 * @return {number}
 */
proto.GamePKG.ItemDesOnMap.prototype.getRoleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GamePKG.ItemDesOnMap.prototype.setRoleid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 MapID = 4;
 * @return {number}
 */
proto.GamePKG.ItemDesOnMap.prototype.getMapid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.GamePKG.ItemDesOnMap.prototype.setMapid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 ItemID = 5;
 * @return {number}
 */
proto.GamePKG.ItemDesOnMap.prototype.getItemid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.GamePKG.ItemDesOnMap.prototype.setItemid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 TypeID = 6;
 * @return {number}
 */
proto.GamePKG.ItemDesOnMap.prototype.getTypeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.GamePKG.ItemDesOnMap.prototype.setTypeid = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string VerifyCode = 7;
 * @return {string}
 */
proto.GamePKG.ItemDesOnMap.prototype.getVerifycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.GamePKG.ItemDesOnMap.prototype.setVerifycode = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GamePKG.NpcDead = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GamePKG.NpcDead, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GamePKG.NpcDead.displayName = 'proto.GamePKG.NpcDead';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GamePKG.NpcDead.prototype.toObject = function(opt_includeInstance) {
  return proto.GamePKG.NpcDead.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GamePKG.NpcDead} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.NpcDead.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkgid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    roleid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    mapid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    npcid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    typeid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    verifycode: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GamePKG.NpcDead}
 */
proto.GamePKG.NpcDead.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GamePKG.NpcDead;
  return proto.GamePKG.NpcDead.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GamePKG.NpcDead} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GamePKG.NpcDead}
 */
proto.GamePKG.NpcDead.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.PKGTypeID} */ (reader.readEnum());
      msg.setPkgid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRoleid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMapid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNpcid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTypeid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerifycode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GamePKG.NpcDead.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GamePKG.NpcDead.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GamePKG.NpcDead} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.NpcDead.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPkgid();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRoleid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getMapid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getNpcid();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getTypeid();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getVerifycode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional PKGTypeID PkgID = 1;
 * @return {!proto.PKGTypeID}
 */
proto.GamePKG.NpcDead.prototype.getPkgid = function() {
  return /** @type {!proto.PKGTypeID} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.PKGTypeID} value */
proto.GamePKG.NpcDead.prototype.setPkgid = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 UserID = 2;
 * @return {number}
 */
proto.GamePKG.NpcDead.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GamePKG.NpcDead.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 RoleID = 3;
 * @return {number}
 */
proto.GamePKG.NpcDead.prototype.getRoleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GamePKG.NpcDead.prototype.setRoleid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 MapID = 4;
 * @return {number}
 */
proto.GamePKG.NpcDead.prototype.getMapid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.GamePKG.NpcDead.prototype.setMapid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 NpcID = 5;
 * @return {number}
 */
proto.GamePKG.NpcDead.prototype.getNpcid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.GamePKG.NpcDead.prototype.setNpcid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 TypeID = 6;
 * @return {number}
 */
proto.GamePKG.NpcDead.prototype.getTypeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.GamePKG.NpcDead.prototype.setTypeid = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string VerifyCode = 7;
 * @return {string}
 */
proto.GamePKG.NpcDead.prototype.getVerifycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.GamePKG.NpcDead.prototype.setVerifycode = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GamePKG.PickUpItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GamePKG.PickUpItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GamePKG.PickUpItem.displayName = 'proto.GamePKG.PickUpItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GamePKG.PickUpItem.prototype.toObject = function(opt_includeInstance) {
  return proto.GamePKG.PickUpItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GamePKG.PickUpItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.PickUpItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkgid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    roleid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    mapid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    itemid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    typeid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    verifycode: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GamePKG.PickUpItem}
 */
proto.GamePKG.PickUpItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GamePKG.PickUpItem;
  return proto.GamePKG.PickUpItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GamePKG.PickUpItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GamePKG.PickUpItem}
 */
proto.GamePKG.PickUpItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.PKGTypeID} */ (reader.readEnum());
      msg.setPkgid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRoleid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMapid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setItemid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTypeid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerifycode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GamePKG.PickUpItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GamePKG.PickUpItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GamePKG.PickUpItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.PickUpItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPkgid();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRoleid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getMapid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getItemid();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getTypeid();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getVerifycode();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional PKGTypeID PkgID = 1;
 * @return {!proto.PKGTypeID}
 */
proto.GamePKG.PickUpItem.prototype.getPkgid = function() {
  return /** @type {!proto.PKGTypeID} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.PKGTypeID} value */
proto.GamePKG.PickUpItem.prototype.setPkgid = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 UserID = 2;
 * @return {number}
 */
proto.GamePKG.PickUpItem.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GamePKG.PickUpItem.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 RoleID = 3;
 * @return {number}
 */
proto.GamePKG.PickUpItem.prototype.getRoleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GamePKG.PickUpItem.prototype.setRoleid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 MapID = 4;
 * @return {number}
 */
proto.GamePKG.PickUpItem.prototype.getMapid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.GamePKG.PickUpItem.prototype.setMapid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 ItemID = 5;
 * @return {number}
 */
proto.GamePKG.PickUpItem.prototype.getItemid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.GamePKG.PickUpItem.prototype.setItemid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 TypeID = 6;
 * @return {number}
 */
proto.GamePKG.PickUpItem.prototype.getTypeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.GamePKG.PickUpItem.prototype.setTypeid = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string VerifyCode = 7;
 * @return {string}
 */
proto.GamePKG.PickUpItem.prototype.getVerifycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.GamePKG.PickUpItem.prototype.setVerifycode = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GamePKG.AttackInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GamePKG.AttackInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GamePKG.AttackInfo.displayName = 'proto.GamePKG.AttackInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GamePKG.AttackInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.GamePKG.AttackInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GamePKG.AttackInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.AttackInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkgid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    roleid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    attackerid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    attackertype: jspb.Message.getFieldWithDefault(msg, 5, 0),
    behiterid: jspb.Message.getFieldWithDefault(msg, 6, 0),
    behitertype: jspb.Message.getFieldWithDefault(msg, 7, 0),
    attacktypeid: jspb.Message.getFieldWithDefault(msg, 8, 0),
    verifycode: jspb.Message.getFieldWithDefault(msg, 9, ""),
    attackposx: +jspb.Message.getFieldWithDefault(msg, 10, 0.0),
    attackposy: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    attackposz: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    bhiterposx: +jspb.Message.getFieldWithDefault(msg, 13, 0.0),
    bhiterposy: +jspb.Message.getFieldWithDefault(msg, 14, 0.0),
    bhiterposz: +jspb.Message.getFieldWithDefault(msg, 15, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GamePKG.AttackInfo}
 */
proto.GamePKG.AttackInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GamePKG.AttackInfo;
  return proto.GamePKG.AttackInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GamePKG.AttackInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GamePKG.AttackInfo}
 */
proto.GamePKG.AttackInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.PKGTypeID} */ (reader.readEnum());
      msg.setPkgid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setRoleid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAttackerid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttackertype(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBehiterid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBehitertype(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttacktypeid(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setVerifycode(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAttackposx(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAttackposy(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAttackposz(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBhiterposx(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBhiterposy(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBhiterposz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GamePKG.AttackInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GamePKG.AttackInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GamePKG.AttackInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.AttackInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPkgid();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getRoleid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getAttackerid();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getAttackertype();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getBehiterid();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getBehitertype();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getAttacktypeid();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getVerifycode();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getAttackposx();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getAttackposy();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getAttackposz();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getBhiterposx();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = message.getBhiterposy();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = message.getBhiterposz();
  if (f !== 0.0) {
    writer.writeFloat(
      15,
      f
    );
  }
};


/**
 * optional PKGTypeID PkgID = 1;
 * @return {!proto.PKGTypeID}
 */
proto.GamePKG.AttackInfo.prototype.getPkgid = function() {
  return /** @type {!proto.PKGTypeID} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.PKGTypeID} value */
proto.GamePKG.AttackInfo.prototype.setPkgid = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 UserID = 2;
 * @return {number}
 */
proto.GamePKG.AttackInfo.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GamePKG.AttackInfo.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 RoleID = 3;
 * @return {number}
 */
proto.GamePKG.AttackInfo.prototype.getRoleid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GamePKG.AttackInfo.prototype.setRoleid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 AttackerID = 4;
 * @return {number}
 */
proto.GamePKG.AttackInfo.prototype.getAttackerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.GamePKG.AttackInfo.prototype.setAttackerid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 AttackerType = 5;
 * @return {number}
 */
proto.GamePKG.AttackInfo.prototype.getAttackertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.GamePKG.AttackInfo.prototype.setAttackertype = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint64 BeHiterID = 6;
 * @return {number}
 */
proto.GamePKG.AttackInfo.prototype.getBehiterid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.GamePKG.AttackInfo.prototype.setBehiterid = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 BeHiterType = 7;
 * @return {number}
 */
proto.GamePKG.AttackInfo.prototype.getBehitertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.GamePKG.AttackInfo.prototype.setBehitertype = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 AttackTypeID = 8;
 * @return {number}
 */
proto.GamePKG.AttackInfo.prototype.getAttacktypeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.GamePKG.AttackInfo.prototype.setAttacktypeid = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string VerifyCode = 9;
 * @return {string}
 */
proto.GamePKG.AttackInfo.prototype.getVerifycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.GamePKG.AttackInfo.prototype.setVerifycode = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional float AttackPosX = 10;
 * @return {number}
 */
proto.GamePKG.AttackInfo.prototype.getAttackposx = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 10, 0.0));
};


/** @param {number} value */
proto.GamePKG.AttackInfo.prototype.setAttackposx = function(value) {
  jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional float AttackPosY = 11;
 * @return {number}
 */
proto.GamePKG.AttackInfo.prototype.getAttackposy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.GamePKG.AttackInfo.prototype.setAttackposy = function(value) {
  jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional float AttackPosZ = 12;
 * @return {number}
 */
proto.GamePKG.AttackInfo.prototype.getAttackposz = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.GamePKG.AttackInfo.prototype.setAttackposz = function(value) {
  jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional float BHiterPosX = 13;
 * @return {number}
 */
proto.GamePKG.AttackInfo.prototype.getBhiterposx = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.GamePKG.AttackInfo.prototype.setBhiterposx = function(value) {
  jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional float BHiterPosY = 14;
 * @return {number}
 */
proto.GamePKG.AttackInfo.prototype.getBhiterposy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 14, 0.0));
};


/** @param {number} value */
proto.GamePKG.AttackInfo.prototype.setBhiterposy = function(value) {
  jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional float BHiterPosZ = 15;
 * @return {number}
 */
proto.GamePKG.AttackInfo.prototype.getBhiterposz = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 15, 0.0));
};


/** @param {number} value */
proto.GamePKG.AttackInfo.prototype.setBhiterposz = function(value) {
  jspb.Message.setProto3FloatField(this, 15, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GamePKG.AttackResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GamePKG.AttackResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GamePKG.AttackResult.displayName = 'proto.GamePKG.AttackResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GamePKG.AttackResult.prototype.toObject = function(opt_includeInstance) {
  return proto.GamePKG.AttackResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GamePKG.AttackResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.AttackResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkgid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    attackerid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    attackertype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    behiterid: jspb.Message.getFieldWithDefault(msg, 5, 0),
    behitertype: jspb.Message.getFieldWithDefault(msg, 6, 0),
    attacktypeid: jspb.Message.getFieldWithDefault(msg, 7, 0),
    resulttype: jspb.Message.getFieldWithDefault(msg, 8, 0),
    attackvalue: jspb.Message.getFieldWithDefault(msg, 9, 0),
    attackreturn: jspb.Message.getFieldWithDefault(msg, 10, 0),
    attackposx: +jspb.Message.getFieldWithDefault(msg, 11, 0.0),
    attackposy: +jspb.Message.getFieldWithDefault(msg, 12, 0.0),
    attackposz: +jspb.Message.getFieldWithDefault(msg, 13, 0.0),
    bhiterposx: +jspb.Message.getFieldWithDefault(msg, 14, 0.0),
    bhiterposy: +jspb.Message.getFieldWithDefault(msg, 15, 0.0),
    bhiterposz: +jspb.Message.getFieldWithDefault(msg, 16, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GamePKG.AttackResult}
 */
proto.GamePKG.AttackResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GamePKG.AttackResult;
  return proto.GamePKG.AttackResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GamePKG.AttackResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GamePKG.AttackResult}
 */
proto.GamePKG.AttackResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.PKGTypeID} */ (reader.readEnum());
      msg.setPkgid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAttackerid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttackertype(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBehiterid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBehitertype(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttacktypeid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setResulttype(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttackvalue(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAttackreturn(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAttackposx(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAttackposy(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAttackposz(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBhiterposx(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBhiterposy(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBhiterposz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GamePKG.AttackResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GamePKG.AttackResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GamePKG.AttackResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.AttackResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPkgid();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getAttackerid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getAttackertype();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getBehiterid();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getBehitertype();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getAttacktypeid();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getResulttype();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getAttackvalue();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getAttackreturn();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getAttackposx();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getAttackposy();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getAttackposz();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = message.getBhiterposx();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = message.getBhiterposy();
  if (f !== 0.0) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = message.getBhiterposz();
  if (f !== 0.0) {
    writer.writeFloat(
      16,
      f
    );
  }
};


/**
 * optional PKGTypeID PkgID = 1;
 * @return {!proto.PKGTypeID}
 */
proto.GamePKG.AttackResult.prototype.getPkgid = function() {
  return /** @type {!proto.PKGTypeID} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.PKGTypeID} value */
proto.GamePKG.AttackResult.prototype.setPkgid = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 UserID = 2;
 * @return {number}
 */
proto.GamePKG.AttackResult.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GamePKG.AttackResult.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 AttackerID = 3;
 * @return {number}
 */
proto.GamePKG.AttackResult.prototype.getAttackerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GamePKG.AttackResult.prototype.setAttackerid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 AttackerType = 4;
 * @return {number}
 */
proto.GamePKG.AttackResult.prototype.getAttackertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.GamePKG.AttackResult.prototype.setAttackertype = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 BeHiterID = 5;
 * @return {number}
 */
proto.GamePKG.AttackResult.prototype.getBehiterid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.GamePKG.AttackResult.prototype.setBehiterid = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 BeHiterType = 6;
 * @return {number}
 */
proto.GamePKG.AttackResult.prototype.getBehitertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.GamePKG.AttackResult.prototype.setBehitertype = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 AttackTypeID = 7;
 * @return {number}
 */
proto.GamePKG.AttackResult.prototype.getAttacktypeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.GamePKG.AttackResult.prototype.setAttacktypeid = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 ResultType = 8;
 * @return {number}
 */
proto.GamePKG.AttackResult.prototype.getResulttype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.GamePKG.AttackResult.prototype.setResulttype = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 AttackValue = 9;
 * @return {number}
 */
proto.GamePKG.AttackResult.prototype.getAttackvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.GamePKG.AttackResult.prototype.setAttackvalue = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 AttackReturn = 10;
 * @return {number}
 */
proto.GamePKG.AttackResult.prototype.getAttackreturn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.GamePKG.AttackResult.prototype.setAttackreturn = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional float AttackPosX = 11;
 * @return {number}
 */
proto.GamePKG.AttackResult.prototype.getAttackposx = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 11, 0.0));
};


/** @param {number} value */
proto.GamePKG.AttackResult.prototype.setAttackposx = function(value) {
  jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional float AttackPosY = 12;
 * @return {number}
 */
proto.GamePKG.AttackResult.prototype.getAttackposy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.GamePKG.AttackResult.prototype.setAttackposy = function(value) {
  jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional float AttackPosZ = 13;
 * @return {number}
 */
proto.GamePKG.AttackResult.prototype.getAttackposz = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.GamePKG.AttackResult.prototype.setAttackposz = function(value) {
  jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional float BHiterPosX = 14;
 * @return {number}
 */
proto.GamePKG.AttackResult.prototype.getBhiterposx = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 14, 0.0));
};


/** @param {number} value */
proto.GamePKG.AttackResult.prototype.setBhiterposx = function(value) {
  jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional float BHiterPosY = 15;
 * @return {number}
 */
proto.GamePKG.AttackResult.prototype.getBhiterposy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 15, 0.0));
};


/** @param {number} value */
proto.GamePKG.AttackResult.prototype.setBhiterposy = function(value) {
  jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional float BHiterPosZ = 16;
 * @return {number}
 */
proto.GamePKG.AttackResult.prototype.getBhiterposz = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 16, 0.0));
};


/** @param {number} value */
proto.GamePKG.AttackResult.prototype.setBhiterposz = function(value) {
  jspb.Message.setProto3FloatField(this, 16, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GamePKG.DebugNpcTarget = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GamePKG.DebugNpcTarget, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GamePKG.DebugNpcTarget.displayName = 'proto.GamePKG.DebugNpcTarget';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GamePKG.DebugNpcTarget.prototype.toObject = function(opt_includeInstance) {
  return proto.GamePKG.DebugNpcTarget.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GamePKG.DebugNpcTarget} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.DebugNpcTarget.toObject = function(includeInstance, msg) {
  var f, obj = {
    pkgid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    npcid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    posx: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    posy: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    posz: +jspb.Message.getFieldWithDefault(msg, 9, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GamePKG.DebugNpcTarget}
 */
proto.GamePKG.DebugNpcTarget.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GamePKG.DebugNpcTarget;
  return proto.GamePKG.DebugNpcTarget.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GamePKG.DebugNpcTarget} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GamePKG.DebugNpcTarget}
 */
proto.GamePKG.DebugNpcTarget.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.PKGTypeID} */ (reader.readEnum());
      msg.setPkgid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNpcid(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosx(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosy(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPosz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GamePKG.DebugNpcTarget.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GamePKG.DebugNpcTarget.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GamePKG.DebugNpcTarget} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GamePKG.DebugNpcTarget.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPkgid();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getNpcid();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getPosx();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getPosy();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getPosz();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
};


/**
 * optional PKGTypeID PkgID = 1;
 * @return {!proto.PKGTypeID}
 */
proto.GamePKG.DebugNpcTarget.prototype.getPkgid = function() {
  return /** @type {!proto.PKGTypeID} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.PKGTypeID} value */
proto.GamePKG.DebugNpcTarget.prototype.setPkgid = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional uint64 UserID = 2;
 * @return {number}
 */
proto.GamePKG.DebugNpcTarget.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.GamePKG.DebugNpcTarget.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 NpcID = 3;
 * @return {number}
 */
proto.GamePKG.DebugNpcTarget.prototype.getNpcid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.GamePKG.DebugNpcTarget.prototype.setNpcid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional float PosX = 7;
 * @return {number}
 */
proto.GamePKG.DebugNpcTarget.prototype.getPosx = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.GamePKG.DebugNpcTarget.prototype.setPosx = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float PosY = 8;
 * @return {number}
 */
proto.GamePKG.DebugNpcTarget.prototype.getPosy = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.GamePKG.DebugNpcTarget.prototype.setPosy = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional float PosZ = 9;
 * @return {number}
 */
proto.GamePKG.DebugNpcTarget.prototype.getPosz = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.GamePKG.DebugNpcTarget.prototype.setPosz = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};


goog.object.extend(exports, proto.GamePKG);
