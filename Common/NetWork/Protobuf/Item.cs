// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Item.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GamePKG {

  /// <summary>Holder for reflection information generated from Item.proto</summary>
  public static partial class ItemReflection {

    #region Descriptor
    /// <summary>File descriptor for Item.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ItemReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpJdGVtLnByb3RvEgdHYW1lUEtHGg9NZXNzYWdlSUQucHJvdG8ivQIKBkl0",
            "ZW1DRhIZCgVQa2dJRBgBIAEoDjIKLlBLR1R5cGVJRBIOCgZVc2VySUQYAiAB",
            "KAQSDgoGUm9sZUlEGAQgASgEEg4KBkl0ZW1JRBgFIAEoBBIOCgZUeXBlSUQY",
            "BiABKAQSDQoFQ291bnQYByABKAUSJQoJQ29udGFpbmVyGAggASgOMhIuSXRl",
            "bUNvbnRhaW5lclR5cGUSDQoFSW5kZXgYCSABKAUSDgoGQmluZGVkGAogASgI",
            "Eg4KBkxvY2tlZBgLIAEoCBISCgpEdXJhYmlsaXR5GAwgASgFEhUKDUR1cmFi",
            "aWxpdHlNYXgYDSABKAUSEAoIRHVyYXRpb24YDiABKAMSDwoHR2V0VGltZRgP",
            "IAEoBBIQCghMb2NrVGltZRgQIAEoBBITCgtUaW1lc1JlbWFpbhgRIAEoBSJk",
            "CghJdGVtTGlzdBIZCgVQa2dJRBgBIAEoDjIKLlBLR1R5cGVJRBIOCgZVc2Vy",
            "SUQYAiABKAQSDgoGUm9sZUlEGAQgASgEEh0KBExpc3QYBSADKAsyDy5HYW1l",
            "UEtHLkl0ZW1DRiJrCgpSZW1vdmVJdGVtEhkKBVBrZ0lEGAEgASgOMgouUEtH",
            "VHlwZUlEEg4KBlVzZXJJRBgCIAEoBBIOCgZSb2xlSUQYBCABKAQSDgoGSXRl",
            "bUlEGAUgASgEEhIKClZlcmlmeUNvZGUYBiABKAkiKwoHSXRlbVBvcxIRCglD",
            "b250YWluZXIYASABKAUSDQoFSW5kZXgYAiABKAUisgEKDUNoYW5nZUl0ZW1Q",
            "b3MSGQoFUGtnSUQYASABKA4yCi5QS0dUeXBlSUQSDgoGVXNlcklEGAIgASgE",
            "Eg4KBlJvbGVJRBgEIAEoBBIOCgZJdGVtSUQYBSABKAQSIAoGT2xkUG9zGAYg",
            "ASgLMhAuR2FtZVBLRy5JdGVtUG9zEiAKBk5ld1BvcxgHIAEoCzIQLkdhbWVQ",
            "S0cuSXRlbVBvcxISCgpWZXJpZnlDb2RlGAggASgJInwKB1VzZUl0ZW0SGQoF",
            "UGtnSUQYASABKA4yCi5QS0dUeXBlSUQSDgoGVXNlcklEGAIgASgEEg4KBlJv",
            "bGVJRBgEIAEoBBISCgpUYXJnZXRSb2xlGAUgASgEEg4KBkl0ZW1JRBgGIAEo",
            "BBISCgpWZXJpZnlDb2RlGAcgASgJIn4KCEFkZFNraWxsEhkKBVBrZ0lEGAEg",
            "ASgOMgouUEtHVHlwZUlEEg4KBlVzZXJJRBgCIAEoBBIOCgZSb2xlSUQYBCAB",
            "KAQSDwoHU2tpbGxJRBgFIAEoBRISCgpTa2lsbExldmVsGAYgASgFEhIKClZl",
            "cmlmeUNvZGUYByABKAkiagoIVXNlU2tpbGwSGQoFUGtnSUQYASABKA4yCi5Q",
            "S0dUeXBlSUQSDgoGVXNlcklEGAIgASgEEg4KBlJvbGVJRBgEIAEoBBIPCgdT",
            "a2lsbElEGAUgASgFEhIKClZlcmlmeUNvZGUYBiABKAkiagoIRGVsU2tpbGwS",
            "GQoFUGtnSUQYASABKA4yCi5QS0dUeXBlSUQSDgoGVXNlcklEGAIgASgEEg4K",
            "BlJvbGVJRBgEIAEoBBIPCgdTa2lsbElEGAUgASgFEhIKClZlcmlmeUNvZGUY",
            "BiABKAliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::MessageIDReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.ItemCF), global::GamePKG.ItemCF.Parser, new[]{ "PkgID", "UserID", "RoleID", "ItemID", "TypeID", "Count", "Container", "Index", "Binded", "Locked", "Durability", "DurabilityMax", "Duration", "GetTime", "LockTime", "TimesRemain" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.ItemList), global::GamePKG.ItemList.Parser, new[]{ "PkgID", "UserID", "RoleID", "List" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.RemoveItem), global::GamePKG.RemoveItem.Parser, new[]{ "PkgID", "UserID", "RoleID", "ItemID", "VerifyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.ItemPos), global::GamePKG.ItemPos.Parser, new[]{ "Container", "Index" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.ChangeItemPos), global::GamePKG.ChangeItemPos.Parser, new[]{ "PkgID", "UserID", "RoleID", "ItemID", "OldPos", "NewPos", "VerifyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.UseItem), global::GamePKG.UseItem.Parser, new[]{ "PkgID", "UserID", "RoleID", "TargetRole", "ItemID", "VerifyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.AddSkill), global::GamePKG.AddSkill.Parser, new[]{ "PkgID", "UserID", "RoleID", "SkillID", "SkillLevel", "VerifyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.UseSkill), global::GamePKG.UseSkill.Parser, new[]{ "PkgID", "UserID", "RoleID", "SkillID", "VerifyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.DelSkill), global::GamePKG.DelSkill.Parser, new[]{ "PkgID", "UserID", "RoleID", "SkillID", "VerifyCode" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ItemCF : pb::IMessage<ItemCF> {
    private static readonly pb::MessageParser<ItemCF> _parser = new pb::MessageParser<ItemCF>(() => new ItemCF());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemCF> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.ItemReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemCF() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemCF(ItemCF other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      roleID_ = other.roleID_;
      itemID_ = other.itemID_;
      typeID_ = other.typeID_;
      count_ = other.count_;
      container_ = other.container_;
      index_ = other.index_;
      binded_ = other.binded_;
      locked_ = other.locked_;
      durability_ = other.durability_;
      durabilityMax_ = other.durabilityMax_;
      duration_ = other.duration_;
      getTime_ = other.getTime_;
      lockTime_ = other.lockTime_;
      timesRemain_ = other.timesRemain_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemCF Clone() {
      return new ItemCF(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///Packet type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///User ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 4;
    private ulong roleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "ItemID" field.</summary>
    public const int ItemIDFieldNumber = 5;
    private ulong itemID_;
    /// <summary>
    //
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "TypeID" field.</summary>
    public const int TypeIDFieldNumber = 6;
    private ulong typeID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TypeID {
      get { return typeID_; }
      set {
        typeID_ = value;
      }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 7;
    private int count_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "Container" field.</summary>
    public const int ContainerFieldNumber = 8;
    private global::ItemContainerType container_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::ItemContainerType Container {
      get { return container_; }
      set {
        container_ = value;
      }
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 9;
    private int index_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "Binded" field.</summary>
    public const int BindedFieldNumber = 10;
    private bool binded_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Binded {
      get { return binded_; }
      set {
        binded_ = value;
      }
    }

    /// <summary>Field number for the "Locked" field.</summary>
    public const int LockedFieldNumber = 11;
    private bool locked_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Locked {
      get { return locked_; }
      set {
        locked_ = value;
      }
    }

    /// <summary>Field number for the "Durability" field.</summary>
    public const int DurabilityFieldNumber = 12;
    private int durability_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Durability {
      get { return durability_; }
      set {
        durability_ = value;
      }
    }

    /// <summary>Field number for the "DurabilityMax" field.</summary>
    public const int DurabilityMaxFieldNumber = 13;
    private int durabilityMax_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DurabilityMax {
      get { return durabilityMax_; }
      set {
        durabilityMax_ = value;
      }
    }

    /// <summary>Field number for the "Duration" field.</summary>
    public const int DurationFieldNumber = 14;
    private long duration_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "GetTime" field.</summary>
    public const int GetTimeFieldNumber = 15;
    private ulong getTime_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GetTime {
      get { return getTime_; }
      set {
        getTime_ = value;
      }
    }

    /// <summary>Field number for the "LockTime" field.</summary>
    public const int LockTimeFieldNumber = 16;
    private ulong lockTime_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LockTime {
      get { return lockTime_; }
      set {
        lockTime_ = value;
      }
    }

    /// <summary>Field number for the "TimesRemain" field.</summary>
    public const int TimesRemainFieldNumber = 17;
    private int timesRemain_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimesRemain {
      get { return timesRemain_; }
      set {
        timesRemain_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemCF);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemCF other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (RoleID != other.RoleID) return false;
      if (ItemID != other.ItemID) return false;
      if (TypeID != other.TypeID) return false;
      if (Count != other.Count) return false;
      if (Container != other.Container) return false;
      if (Index != other.Index) return false;
      if (Binded != other.Binded) return false;
      if (Locked != other.Locked) return false;
      if (Durability != other.Durability) return false;
      if (DurabilityMax != other.DurabilityMax) return false;
      if (Duration != other.Duration) return false;
      if (GetTime != other.GetTime) return false;
      if (LockTime != other.LockTime) return false;
      if (TimesRemain != other.TimesRemain) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (RoleID != 0UL) hash ^= RoleID.GetHashCode();
      if (ItemID != 0UL) hash ^= ItemID.GetHashCode();
      if (TypeID != 0UL) hash ^= TypeID.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (Container != 0) hash ^= Container.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Binded != false) hash ^= Binded.GetHashCode();
      if (Locked != false) hash ^= Locked.GetHashCode();
      if (Durability != 0) hash ^= Durability.GetHashCode();
      if (DurabilityMax != 0) hash ^= DurabilityMax.GetHashCode();
      if (Duration != 0L) hash ^= Duration.GetHashCode();
      if (GetTime != 0UL) hash ^= GetTime.GetHashCode();
      if (LockTime != 0UL) hash ^= LockTime.GetHashCode();
      if (TimesRemain != 0) hash ^= TimesRemain.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (RoleID != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RoleID);
      }
      if (ItemID != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(ItemID);
      }
      if (TypeID != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(TypeID);
      }
      if (Count != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Count);
      }
      if (Container != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Container);
      }
      if (Index != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Index);
      }
      if (Binded != false) {
        output.WriteRawTag(80);
        output.WriteBool(Binded);
      }
      if (Locked != false) {
        output.WriteRawTag(88);
        output.WriteBool(Locked);
      }
      if (Durability != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Durability);
      }
      if (DurabilityMax != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(DurabilityMax);
      }
      if (Duration != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(Duration);
      }
      if (GetTime != 0UL) {
        output.WriteRawTag(120);
        output.WriteUInt64(GetTime);
      }
      if (LockTime != 0UL) {
        output.WriteRawTag(128, 1);
        output.WriteUInt64(LockTime);
      }
      if (TimesRemain != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(TimesRemain);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      if (ItemID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemID);
      }
      if (TypeID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TypeID);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (Container != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Container);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Binded != false) {
        size += 1 + 1;
      }
      if (Locked != false) {
        size += 1 + 1;
      }
      if (Durability != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Durability);
      }
      if (DurabilityMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DurabilityMax);
      }
      if (Duration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Duration);
      }
      if (GetTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GetTime);
      }
      if (LockTime != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(LockTime);
      }
      if (TimesRemain != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TimesRemain);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemCF other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.RoleID != 0UL) {
        RoleID = other.RoleID;
      }
      if (other.ItemID != 0UL) {
        ItemID = other.ItemID;
      }
      if (other.TypeID != 0UL) {
        TypeID = other.TypeID;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.Container != 0) {
        Container = other.Container;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Binded != false) {
        Binded = other.Binded;
      }
      if (other.Locked != false) {
        Locked = other.Locked;
      }
      if (other.Durability != 0) {
        Durability = other.Durability;
      }
      if (other.DurabilityMax != 0) {
        DurabilityMax = other.DurabilityMax;
      }
      if (other.Duration != 0L) {
        Duration = other.Duration;
      }
      if (other.GetTime != 0UL) {
        GetTime = other.GetTime;
      }
      if (other.LockTime != 0UL) {
        LockTime = other.LockTime;
      }
      if (other.TimesRemain != 0) {
        TimesRemain = other.TimesRemain;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 32: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 40: {
            ItemID = input.ReadUInt64();
            break;
          }
          case 48: {
            TypeID = input.ReadUInt64();
            break;
          }
          case 56: {
            Count = input.ReadInt32();
            break;
          }
          case 64: {
            container_ = (global::ItemContainerType) input.ReadEnum();
            break;
          }
          case 72: {
            Index = input.ReadInt32();
            break;
          }
          case 80: {
            Binded = input.ReadBool();
            break;
          }
          case 88: {
            Locked = input.ReadBool();
            break;
          }
          case 96: {
            Durability = input.ReadInt32();
            break;
          }
          case 104: {
            DurabilityMax = input.ReadInt32();
            break;
          }
          case 112: {
            Duration = input.ReadInt64();
            break;
          }
          case 120: {
            GetTime = input.ReadUInt64();
            break;
          }
          case 128: {
            LockTime = input.ReadUInt64();
            break;
          }
          case 136: {
            TimesRemain = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemList : pb::IMessage<ItemList> {
    private static readonly pb::MessageParser<ItemList> _parser = new pb::MessageParser<ItemList>(() => new ItemList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.ItemReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemList(ItemList other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      roleID_ = other.roleID_;
      list_ = other.list_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemList Clone() {
      return new ItemList(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 4;
    private ulong roleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "List" field.</summary>
    public const int ListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::GamePKG.ItemCF> _repeated_list_codec
        = pb::FieldCodec.ForMessage(42, global::GamePKG.ItemCF.Parser);
    private readonly pbc::RepeatedField<global::GamePKG.ItemCF> list_ = new pbc::RepeatedField<global::GamePKG.ItemCF>();
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GamePKG.ItemCF> List {
      get { return list_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (RoleID != other.RoleID) return false;
      if(!list_.Equals(other.list_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (RoleID != 0UL) hash ^= RoleID.GetHashCode();
      hash ^= list_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (RoleID != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RoleID);
      }
      list_.WriteTo(output, _repeated_list_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      size += list_.CalculateSize(_repeated_list_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemList other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.RoleID != 0UL) {
        RoleID = other.RoleID;
      }
      list_.Add(other.list_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 32: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 42: {
            list_.AddEntriesFrom(input, _repeated_list_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveItem : pb::IMessage<RemoveItem> {
    private static readonly pb::MessageParser<RemoveItem> _parser = new pb::MessageParser<RemoveItem>(() => new RemoveItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.ItemReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveItem(RemoveItem other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      roleID_ = other.roleID_;
      itemID_ = other.itemID_;
      verifyCode_ = other.verifyCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveItem Clone() {
      return new RemoveItem(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 4;
    private ulong roleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "ItemID" field.</summary>
    public const int ItemIDFieldNumber = 5;
    private ulong itemID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "VerifyCode" field.</summary>
    public const int VerifyCodeFieldNumber = 6;
    private string verifyCode_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (RoleID != other.RoleID) return false;
      if (ItemID != other.ItemID) return false;
      if (VerifyCode != other.VerifyCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (RoleID != 0UL) hash ^= RoleID.GetHashCode();
      if (ItemID != 0UL) hash ^= ItemID.GetHashCode();
      if (VerifyCode.Length != 0) hash ^= VerifyCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (RoleID != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RoleID);
      }
      if (ItemID != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(ItemID);
      }
      if (VerifyCode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(VerifyCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      if (ItemID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemID);
      }
      if (VerifyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerifyCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveItem other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.RoleID != 0UL) {
        RoleID = other.RoleID;
      }
      if (other.ItemID != 0UL) {
        ItemID = other.ItemID;
      }
      if (other.VerifyCode.Length != 0) {
        VerifyCode = other.VerifyCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 32: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 40: {
            ItemID = input.ReadUInt64();
            break;
          }
          case 50: {
            VerifyCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemPos : pb::IMessage<ItemPos> {
    private static readonly pb::MessageParser<ItemPos> _parser = new pb::MessageParser<ItemPos>(() => new ItemPos());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemPos> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.ItemReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemPos() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemPos(ItemPos other) : this() {
      container_ = other.container_;
      index_ = other.index_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemPos Clone() {
      return new ItemPos(this);
    }

    /// <summary>Field number for the "Container" field.</summary>
    public const int ContainerFieldNumber = 1;
    private int container_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Container {
      get { return container_; }
      set {
        container_ = value;
      }
    }

    /// <summary>Field number for the "Index" field.</summary>
    public const int IndexFieldNumber = 2;
    private int index_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemPos);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemPos other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Container != other.Container) return false;
      if (Index != other.Index) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Container != 0) hash ^= Container.GetHashCode();
      if (Index != 0) hash ^= Index.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Container != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Container);
      }
      if (Index != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Container != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Container);
      }
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemPos other) {
      if (other == null) {
        return;
      }
      if (other.Container != 0) {
        Container = other.Container;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Container = input.ReadInt32();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeItemPos : pb::IMessage<ChangeItemPos> {
    private static readonly pb::MessageParser<ChangeItemPos> _parser = new pb::MessageParser<ChangeItemPos>(() => new ChangeItemPos());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeItemPos> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.ItemReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeItemPos() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeItemPos(ChangeItemPos other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      roleID_ = other.roleID_;
      itemID_ = other.itemID_;
      oldPos_ = other.oldPos_ != null ? other.oldPos_.Clone() : null;
      newPos_ = other.newPos_ != null ? other.newPos_.Clone() : null;
      verifyCode_ = other.verifyCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeItemPos Clone() {
      return new ChangeItemPos(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 4;
    private ulong roleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "ItemID" field.</summary>
    public const int ItemIDFieldNumber = 5;
    private ulong itemID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "OldPos" field.</summary>
    public const int OldPosFieldNumber = 6;
    private global::GamePKG.ItemPos oldPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GamePKG.ItemPos OldPos {
      get { return oldPos_; }
      set {
        oldPos_ = value;
      }
    }

    /// <summary>Field number for the "NewPos" field.</summary>
    public const int NewPosFieldNumber = 7;
    private global::GamePKG.ItemPos newPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GamePKG.ItemPos NewPos {
      get { return newPos_; }
      set {
        newPos_ = value;
      }
    }

    /// <summary>Field number for the "VerifyCode" field.</summary>
    public const int VerifyCodeFieldNumber = 8;
    private string verifyCode_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeItemPos);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeItemPos other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (RoleID != other.RoleID) return false;
      if (ItemID != other.ItemID) return false;
      if (!object.Equals(OldPos, other.OldPos)) return false;
      if (!object.Equals(NewPos, other.NewPos)) return false;
      if (VerifyCode != other.VerifyCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (RoleID != 0UL) hash ^= RoleID.GetHashCode();
      if (ItemID != 0UL) hash ^= ItemID.GetHashCode();
      if (oldPos_ != null) hash ^= OldPos.GetHashCode();
      if (newPos_ != null) hash ^= NewPos.GetHashCode();
      if (VerifyCode.Length != 0) hash ^= VerifyCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (RoleID != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RoleID);
      }
      if (ItemID != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(ItemID);
      }
      if (oldPos_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(OldPos);
      }
      if (newPos_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(NewPos);
      }
      if (VerifyCode.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(VerifyCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      if (ItemID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemID);
      }
      if (oldPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OldPos);
      }
      if (newPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewPos);
      }
      if (VerifyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerifyCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeItemPos other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.RoleID != 0UL) {
        RoleID = other.RoleID;
      }
      if (other.ItemID != 0UL) {
        ItemID = other.ItemID;
      }
      if (other.oldPos_ != null) {
        if (oldPos_ == null) {
          oldPos_ = new global::GamePKG.ItemPos();
        }
        OldPos.MergeFrom(other.OldPos);
      }
      if (other.newPos_ != null) {
        if (newPos_ == null) {
          newPos_ = new global::GamePKG.ItemPos();
        }
        NewPos.MergeFrom(other.NewPos);
      }
      if (other.VerifyCode.Length != 0) {
        VerifyCode = other.VerifyCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 32: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 40: {
            ItemID = input.ReadUInt64();
            break;
          }
          case 50: {
            if (oldPos_ == null) {
              oldPos_ = new global::GamePKG.ItemPos();
            }
            input.ReadMessage(oldPos_);
            break;
          }
          case 58: {
            if (newPos_ == null) {
              newPos_ = new global::GamePKG.ItemPos();
            }
            input.ReadMessage(newPos_);
            break;
          }
          case 66: {
            VerifyCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UseItem : pb::IMessage<UseItem> {
    private static readonly pb::MessageParser<UseItem> _parser = new pb::MessageParser<UseItem>(() => new UseItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UseItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.ItemReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseItem(UseItem other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      roleID_ = other.roleID_;
      targetRole_ = other.targetRole_;
      itemID_ = other.itemID_;
      verifyCode_ = other.verifyCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseItem Clone() {
      return new UseItem(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 4;
    private ulong roleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "TargetRole" field.</summary>
    public const int TargetRoleFieldNumber = 5;
    private ulong targetRole_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TargetRole {
      get { return targetRole_; }
      set {
        targetRole_ = value;
      }
    }

    /// <summary>Field number for the "ItemID" field.</summary>
    public const int ItemIDFieldNumber = 6;
    private ulong itemID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ItemID {
      get { return itemID_; }
      set {
        itemID_ = value;
      }
    }

    /// <summary>Field number for the "VerifyCode" field.</summary>
    public const int VerifyCodeFieldNumber = 7;
    private string verifyCode_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UseItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UseItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (RoleID != other.RoleID) return false;
      if (TargetRole != other.TargetRole) return false;
      if (ItemID != other.ItemID) return false;
      if (VerifyCode != other.VerifyCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (RoleID != 0UL) hash ^= RoleID.GetHashCode();
      if (TargetRole != 0UL) hash ^= TargetRole.GetHashCode();
      if (ItemID != 0UL) hash ^= ItemID.GetHashCode();
      if (VerifyCode.Length != 0) hash ^= VerifyCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (RoleID != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RoleID);
      }
      if (TargetRole != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(TargetRole);
      }
      if (ItemID != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(ItemID);
      }
      if (VerifyCode.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(VerifyCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      if (TargetRole != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TargetRole);
      }
      if (ItemID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ItemID);
      }
      if (VerifyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerifyCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UseItem other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.RoleID != 0UL) {
        RoleID = other.RoleID;
      }
      if (other.TargetRole != 0UL) {
        TargetRole = other.TargetRole;
      }
      if (other.ItemID != 0UL) {
        ItemID = other.ItemID;
      }
      if (other.VerifyCode.Length != 0) {
        VerifyCode = other.VerifyCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 32: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 40: {
            TargetRole = input.ReadUInt64();
            break;
          }
          case 48: {
            ItemID = input.ReadUInt64();
            break;
          }
          case 58: {
            VerifyCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddSkill : pb::IMessage<AddSkill> {
    private static readonly pb::MessageParser<AddSkill> _parser = new pb::MessageParser<AddSkill>(() => new AddSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.ItemReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSkill(AddSkill other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      roleID_ = other.roleID_;
      skillID_ = other.skillID_;
      skillLevel_ = other.skillLevel_;
      verifyCode_ = other.verifyCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddSkill Clone() {
      return new AddSkill(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 4;
    private ulong roleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "SkillID" field.</summary>
    public const int SkillIDFieldNumber = 5;
    private int skillID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillID {
      get { return skillID_; }
      set {
        skillID_ = value;
      }
    }

    /// <summary>Field number for the "SkillLevel" field.</summary>
    public const int SkillLevelFieldNumber = 6;
    private int skillLevel_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillLevel {
      get { return skillLevel_; }
      set {
        skillLevel_ = value;
      }
    }

    /// <summary>Field number for the "VerifyCode" field.</summary>
    public const int VerifyCodeFieldNumber = 7;
    private string verifyCode_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (RoleID != other.RoleID) return false;
      if (SkillID != other.SkillID) return false;
      if (SkillLevel != other.SkillLevel) return false;
      if (VerifyCode != other.VerifyCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (RoleID != 0UL) hash ^= RoleID.GetHashCode();
      if (SkillID != 0) hash ^= SkillID.GetHashCode();
      if (SkillLevel != 0) hash ^= SkillLevel.GetHashCode();
      if (VerifyCode.Length != 0) hash ^= VerifyCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (RoleID != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RoleID);
      }
      if (SkillID != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SkillID);
      }
      if (SkillLevel != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SkillLevel);
      }
      if (VerifyCode.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(VerifyCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      if (SkillID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillID);
      }
      if (SkillLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillLevel);
      }
      if (VerifyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerifyCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddSkill other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.RoleID != 0UL) {
        RoleID = other.RoleID;
      }
      if (other.SkillID != 0) {
        SkillID = other.SkillID;
      }
      if (other.SkillLevel != 0) {
        SkillLevel = other.SkillLevel;
      }
      if (other.VerifyCode.Length != 0) {
        VerifyCode = other.VerifyCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 32: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 40: {
            SkillID = input.ReadInt32();
            break;
          }
          case 48: {
            SkillLevel = input.ReadInt32();
            break;
          }
          case 58: {
            VerifyCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UseSkill : pb::IMessage<UseSkill> {
    private static readonly pb::MessageParser<UseSkill> _parser = new pb::MessageParser<UseSkill>(() => new UseSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UseSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.ItemReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseSkill(UseSkill other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      roleID_ = other.roleID_;
      skillID_ = other.skillID_;
      verifyCode_ = other.verifyCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UseSkill Clone() {
      return new UseSkill(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 4;
    private ulong roleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "SkillID" field.</summary>
    public const int SkillIDFieldNumber = 5;
    private int skillID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillID {
      get { return skillID_; }
      set {
        skillID_ = value;
      }
    }

    /// <summary>Field number for the "VerifyCode" field.</summary>
    public const int VerifyCodeFieldNumber = 6;
    private string verifyCode_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UseSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UseSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (RoleID != other.RoleID) return false;
      if (SkillID != other.SkillID) return false;
      if (VerifyCode != other.VerifyCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (RoleID != 0UL) hash ^= RoleID.GetHashCode();
      if (SkillID != 0) hash ^= SkillID.GetHashCode();
      if (VerifyCode.Length != 0) hash ^= VerifyCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (RoleID != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RoleID);
      }
      if (SkillID != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SkillID);
      }
      if (VerifyCode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(VerifyCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      if (SkillID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillID);
      }
      if (VerifyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerifyCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UseSkill other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.RoleID != 0UL) {
        RoleID = other.RoleID;
      }
      if (other.SkillID != 0) {
        SkillID = other.SkillID;
      }
      if (other.VerifyCode.Length != 0) {
        VerifyCode = other.VerifyCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 32: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 40: {
            SkillID = input.ReadInt32();
            break;
          }
          case 50: {
            VerifyCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DelSkill : pb::IMessage<DelSkill> {
    private static readonly pb::MessageParser<DelSkill> _parser = new pb::MessageParser<DelSkill>(() => new DelSkill());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DelSkill> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.ItemReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelSkill() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelSkill(DelSkill other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      roleID_ = other.roleID_;
      skillID_ = other.skillID_;
      verifyCode_ = other.verifyCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DelSkill Clone() {
      return new DelSkill(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 4;
    private ulong roleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "SkillID" field.</summary>
    public const int SkillIDFieldNumber = 5;
    private int skillID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SkillID {
      get { return skillID_; }
      set {
        skillID_ = value;
      }
    }

    /// <summary>Field number for the "VerifyCode" field.</summary>
    public const int VerifyCodeFieldNumber = 6;
    private string verifyCode_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DelSkill);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DelSkill other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (RoleID != other.RoleID) return false;
      if (SkillID != other.SkillID) return false;
      if (VerifyCode != other.VerifyCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (RoleID != 0UL) hash ^= RoleID.GetHashCode();
      if (SkillID != 0) hash ^= SkillID.GetHashCode();
      if (VerifyCode.Length != 0) hash ^= VerifyCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (RoleID != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(RoleID);
      }
      if (SkillID != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(SkillID);
      }
      if (VerifyCode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(VerifyCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      if (SkillID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillID);
      }
      if (VerifyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerifyCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DelSkill other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.RoleID != 0UL) {
        RoleID = other.RoleID;
      }
      if (other.SkillID != 0) {
        SkillID = other.SkillID;
      }
      if (other.VerifyCode.Length != 0) {
        VerifyCode = other.VerifyCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 32: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 40: {
            SkillID = input.ReadInt32();
            break;
          }
          case 50: {
            VerifyCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
