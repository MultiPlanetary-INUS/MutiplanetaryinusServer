// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: LoginPKG.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GamePKG {

  /// <summary>Holder for reflection information generated from LoginPKG.proto</summary>
  public static partial class LoginPKGReflection {

    #region Descriptor
    /// <summary>File descriptor for LoginPKG.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LoginPKGReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5Mb2dpblBLRy5wcm90bxIHR2FtZVBLRxoPTWVzc2FnZUlELnByb3RvIlIK",
            "DENvbXBHYW1lSW5mbxIZCgVQa2dJRBgBIAEoDjIKLlBLR1R5cGVJRBITCgtH",
            "YW1lVmVyc2lvbhgCIAEoBRISCgpWZXJpZnlDb2RlGAMgASgEIk0KC0NsaWVu",
            "dEhlYXJ0EhkKBVBrZ0lEGAEgASgOMgouUEtHVHlwZUlEEhAKCFNlbmRUaW1l",
            "GAIgASgDEhEKCURlbGF5VGltZRgDIAEoBSJPCg9Bc2tJZGVudGlmeUNvZGUS",
            "GQoFUGtnSUQYASABKA4yCi5QS0dUeXBlSUQSEgoKSWRlbnRpZnlJRBgCIAEo",
            "BBINCgVFbWFpbBgDIAEoCSJeChFBc2tJZGVudGlmeVJlc3VsdBIZCgVQa2dJ",
            "RBgBIAEoDjIKLlBLR1R5cGVJRBIMCgRDb2RlGAIgASgFEhIKCklkZW50aWZ5",
            "SUQYAyABKAQSDAoESW5mbxgEIAEoCSJnCgxOb3RpZnlDbGllbnQSGQoFUGtn",
            "SUQYASABKA4yCi5QS0dUeXBlSUQSDAoEQ29kZRgCIAEoBRIMCgRJbmZvGAMg",
            "ASgJEhAKCFVzZXJOYW1lGAQgASgJEg4KBlVzZXJJRBgFIAEoBCJWCglHYW1l",
            "TG9naW4SGQoFUGtnSUQYASABKA4yCi5QS0dUeXBlSUQSEAoIVXNlck5hbWUY",
            "AiABKAkSEAoIUGFzc1dvcmQYAyABKAkSCgoCSVAYBCABKAkixAEKC0xvZ2lu",
            "UmVzdWx0EhkKBVBrZ0lEGAEgASgOMgouUEtHVHlwZUlEEhAKCFVzZXJOYW1l",
            "GAIgASgJEg4KBlVzZXJJRBgDIAEoBBINCgVTdGF0ZRgEIAEoBRIRCglCbG9j",
            "a1R5cGUYBSABKAUSEQoJQmxvY2tUaW1lGAYgASgEEhEKCUF1dGhvcml0eRgH",
            "IAEoBRIOCgZMYXN0SVAYCCABKAkSEgoKVmVyaWZ5Q29kZRgJIAEoCRIMCgRH",
            "b2xkGAogASgEIqIBCg1SZWdpc3RBY2NvdW50EhkKBVBrZ0lEGAEgASgOMgou",
            "UEtHVHlwZUlEEhAKCFVzZXJOYW1lGAIgASgJEhAKCFBhc3NXb3JkGAMgASgJ",
            "EhAKCEJpcnRoZGF5GAQgASgJEg4KBkdlbmRlchgFIAEoBRISCgpWZXJpZnlD",
            "b2RlGAYgASgJEhAKCFZlcmlmeUlEGAcgASgEEgoKAklQGAggASgJInMKEFNl",
            "dEFTYWZlUXVlc3Rpb24SGQoFUGtnSUQYASABKA4yCi5QS0dUeXBlSUQSDgoG",
            "VXNlcklEGAIgASgEEhAKCFF1ZXN0aW9uGAMgASgJEg4KBkFuc3dlchgEIAEo",
            "CRISCgpWZXJpZnlDb2RlGAUgASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::MessageIDReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.CompGameInfo), global::GamePKG.CompGameInfo.Parser, new[]{ "PkgID", "GameVersion", "VerifyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.ClientHeart), global::GamePKG.ClientHeart.Parser, new[]{ "PkgID", "SendTime", "DelayTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.AskIdentifyCode), global::GamePKG.AskIdentifyCode.Parser, new[]{ "PkgID", "IdentifyID", "Email" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.AskIdentifyResult), global::GamePKG.AskIdentifyResult.Parser, new[]{ "PkgID", "Code", "IdentifyID", "Info" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.NotifyClient), global::GamePKG.NotifyClient.Parser, new[]{ "PkgID", "Code", "Info", "UserName", "UserID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.GameLogin), global::GamePKG.GameLogin.Parser, new[]{ "PkgID", "UserName", "PassWord", "IP" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.LoginResult), global::GamePKG.LoginResult.Parser, new[]{ "PkgID", "UserName", "UserID", "State", "BlockType", "BlockTime", "Authority", "LastIP", "VerifyCode", "Gold" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.RegistAccount), global::GamePKG.RegistAccount.Parser, new[]{ "PkgID", "UserName", "PassWord", "Birthday", "Gender", "VerifyCode", "VerifyID", "IP" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.SetASafeQuestion), global::GamePKG.SetASafeQuestion.Parser, new[]{ "PkgID", "UserID", "Question", "Answer", "VerifyCode" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CompGameInfo : pb::IMessage<CompGameInfo> {
    private static readonly pb::MessageParser<CompGameInfo> _parser = new pb::MessageParser<CompGameInfo>(() => new CompGameInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompGameInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.LoginPKGReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompGameInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompGameInfo(CompGameInfo other) : this() {
      pkgID_ = other.pkgID_;
      gameVersion_ = other.gameVersion_;
      verifyCode_ = other.verifyCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompGameInfo Clone() {
      return new CompGameInfo(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "GameVersion" field.</summary>
    public const int GameVersionFieldNumber = 2;
    private int gameVersion_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameVersion {
      get { return gameVersion_; }
      set {
        gameVersion_ = value;
      }
    }

    /// <summary>Field number for the "VerifyCode" field.</summary>
    public const int VerifyCodeFieldNumber = 3;
    private ulong verifyCode_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompGameInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompGameInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (GameVersion != other.GameVersion) return false;
      if (VerifyCode != other.VerifyCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (GameVersion != 0) hash ^= GameVersion.GetHashCode();
      if (VerifyCode != 0UL) hash ^= VerifyCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (GameVersion != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GameVersion);
      }
      if (VerifyCode != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(VerifyCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (GameVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameVersion);
      }
      if (VerifyCode != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VerifyCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompGameInfo other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.GameVersion != 0) {
        GameVersion = other.GameVersion;
      }
      if (other.VerifyCode != 0UL) {
        VerifyCode = other.VerifyCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            GameVersion = input.ReadInt32();
            break;
          }
          case 24: {
            VerifyCode = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClientHeart : pb::IMessage<ClientHeart> {
    private static readonly pb::MessageParser<ClientHeart> _parser = new pb::MessageParser<ClientHeart>(() => new ClientHeart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientHeart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.LoginPKGReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientHeart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientHeart(ClientHeart other) : this() {
      pkgID_ = other.pkgID_;
      sendTime_ = other.sendTime_;
      delayTime_ = other.delayTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientHeart Clone() {
      return new ClientHeart(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "SendTime" field.</summary>
    public const int SendTimeFieldNumber = 2;
    private long sendTime_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SendTime {
      get { return sendTime_; }
      set {
        sendTime_ = value;
      }
    }

    /// <summary>Field number for the "DelayTime" field.</summary>
    public const int DelayTimeFieldNumber = 3;
    private int delayTime_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DelayTime {
      get { return delayTime_; }
      set {
        delayTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientHeart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientHeart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (SendTime != other.SendTime) return false;
      if (DelayTime != other.DelayTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (SendTime != 0L) hash ^= SendTime.GetHashCode();
      if (DelayTime != 0) hash ^= DelayTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (SendTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SendTime);
      }
      if (DelayTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DelayTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (SendTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendTime);
      }
      if (DelayTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DelayTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientHeart other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.SendTime != 0L) {
        SendTime = other.SendTime;
      }
      if (other.DelayTime != 0) {
        DelayTime = other.DelayTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            SendTime = input.ReadInt64();
            break;
          }
          case 24: {
            DelayTime = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskIdentifyCode : pb::IMessage<AskIdentifyCode> {
    private static readonly pb::MessageParser<AskIdentifyCode> _parser = new pb::MessageParser<AskIdentifyCode>(() => new AskIdentifyCode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskIdentifyCode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.LoginPKGReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskIdentifyCode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskIdentifyCode(AskIdentifyCode other) : this() {
      pkgID_ = other.pkgID_;
      identifyID_ = other.identifyID_;
      email_ = other.email_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskIdentifyCode Clone() {
      return new AskIdentifyCode(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "IdentifyID" field.</summary>
    public const int IdentifyIDFieldNumber = 2;
    private ulong identifyID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong IdentifyID {
      get { return identifyID_; }
      set {
        identifyID_ = value;
      }
    }

    /// <summary>Field number for the "Email" field.</summary>
    public const int EmailFieldNumber = 3;
    private string email_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskIdentifyCode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskIdentifyCode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (IdentifyID != other.IdentifyID) return false;
      if (Email != other.Email) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (IdentifyID != 0UL) hash ^= IdentifyID.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (IdentifyID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(IdentifyID);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Email);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (IdentifyID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(IdentifyID);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskIdentifyCode other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.IdentifyID != 0UL) {
        IdentifyID = other.IdentifyID;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            IdentifyID = input.ReadUInt64();
            break;
          }
          case 26: {
            Email = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AskIdentifyResult : pb::IMessage<AskIdentifyResult> {
    private static readonly pb::MessageParser<AskIdentifyResult> _parser = new pb::MessageParser<AskIdentifyResult>(() => new AskIdentifyResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AskIdentifyResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.LoginPKGReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskIdentifyResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskIdentifyResult(AskIdentifyResult other) : this() {
      pkgID_ = other.pkgID_;
      code_ = other.code_;
      identifyID_ = other.identifyID_;
      info_ = other.info_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AskIdentifyResult Clone() {
      return new AskIdentifyResult(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 2;
    private int code_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "IdentifyID" field.</summary>
    public const int IdentifyIDFieldNumber = 3;
    private ulong identifyID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong IdentifyID {
      get { return identifyID_; }
      set {
        identifyID_ = value;
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 4;
    private string info_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AskIdentifyResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AskIdentifyResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (Code != other.Code) return false;
      if (IdentifyID != other.IdentifyID) return false;
      if (Info != other.Info) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (IdentifyID != 0UL) hash ^= IdentifyID.GetHashCode();
      if (Info.Length != 0) hash ^= Info.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (Code != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Code);
      }
      if (IdentifyID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(IdentifyID);
      }
      if (Info.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Info);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (IdentifyID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(IdentifyID);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AskIdentifyResult other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.IdentifyID != 0UL) {
        IdentifyID = other.IdentifyID;
      }
      if (other.Info.Length != 0) {
        Info = other.Info;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            Code = input.ReadInt32();
            break;
          }
          case 24: {
            IdentifyID = input.ReadUInt64();
            break;
          }
          case 34: {
            Info = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotifyClient : pb::IMessage<NotifyClient> {
    private static readonly pb::MessageParser<NotifyClient> _parser = new pb::MessageParser<NotifyClient>(() => new NotifyClient());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotifyClient> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.LoginPKGReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyClient() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyClient(NotifyClient other) : this() {
      pkgID_ = other.pkgID_;
      code_ = other.code_;
      info_ = other.info_;
      userName_ = other.userName_;
      userID_ = other.userID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotifyClient Clone() {
      return new NotifyClient(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 2;
    private int code_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "Info" field.</summary>
    public const int InfoFieldNumber = 3;
    private string info_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 4;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 5;
    private ulong userID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotifyClient);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotifyClient other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (Code != other.Code) return false;
      if (Info != other.Info) return false;
      if (UserName != other.UserName) return false;
      if (UserID != other.UserID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Info.Length != 0) hash ^= Info.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (Code != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Code);
      }
      if (Info.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Info);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UserName);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(UserID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotifyClient other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Info.Length != 0) {
        Info = other.Info;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            Code = input.ReadInt32();
            break;
          }
          case 26: {
            Info = input.ReadString();
            break;
          }
          case 34: {
            UserName = input.ReadString();
            break;
          }
          case 40: {
            UserID = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameLogin : pb::IMessage<GameLogin> {
    private static readonly pb::MessageParser<GameLogin> _parser = new pb::MessageParser<GameLogin>(() => new GameLogin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameLogin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.LoginPKGReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameLogin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameLogin(GameLogin other) : this() {
      pkgID_ = other.pkgID_;
      userName_ = other.userName_;
      passWord_ = other.passWord_;
      iP_ = other.iP_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameLogin Clone() {
      return new GameLogin(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PassWord" field.</summary>
    public const int PassWordFieldNumber = 3;
    private string passWord_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PassWord {
      get { return passWord_; }
      set {
        passWord_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "IP" field.</summary>
    public const int IPFieldNumber = 4;
    private string iP_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IP {
      get { return iP_; }
      set {
        iP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameLogin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameLogin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserName != other.UserName) return false;
      if (PassWord != other.PassWord) return false;
      if (IP != other.IP) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (PassWord.Length != 0) hash ^= PassWord.GetHashCode();
      if (IP.Length != 0) hash ^= IP.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (PassWord.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PassWord);
      }
      if (IP.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(IP);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (PassWord.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PassWord);
      }
      if (IP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IP);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameLogin other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.PassWord.Length != 0) {
        PassWord = other.PassWord;
      }
      if (other.IP.Length != 0) {
        IP = other.IP;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 26: {
            PassWord = input.ReadString();
            break;
          }
          case 34: {
            IP = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginResult : pb::IMessage<LoginResult> {
    private static readonly pb::MessageParser<LoginResult> _parser = new pb::MessageParser<LoginResult>(() => new LoginResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.LoginPKGReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResult(LoginResult other) : this() {
      pkgID_ = other.pkgID_;
      userName_ = other.userName_;
      userID_ = other.userID_;
      state_ = other.state_;
      blockType_ = other.blockType_;
      blockTime_ = other.blockTime_;
      authority_ = other.authority_;
      lastIP_ = other.lastIP_;
      verifyCode_ = other.verifyCode_;
      gold_ = other.gold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResult Clone() {
      return new LoginResult(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 3;
    private ulong userID_;
    /// <summary>
    ///ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 4;
    private int state_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "BlockType" field.</summary>
    public const int BlockTypeFieldNumber = 5;
    private int blockType_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockType {
      get { return blockType_; }
      set {
        blockType_ = value;
      }
    }

    /// <summary>Field number for the "BlockTime" field.</summary>
    public const int BlockTimeFieldNumber = 6;
    private ulong blockTime_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong BlockTime {
      get { return blockTime_; }
      set {
        blockTime_ = value;
      }
    }

    /// <summary>Field number for the "Authority" field.</summary>
    public const int AuthorityFieldNumber = 7;
    private int authority_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Authority {
      get { return authority_; }
      set {
        authority_ = value;
      }
    }

    /// <summary>Field number for the "LastIP" field.</summary>
    public const int LastIPFieldNumber = 8;
    private string lastIP_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastIP {
      get { return lastIP_; }
      set {
        lastIP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VerifyCode" field.</summary>
    public const int VerifyCodeFieldNumber = 9;
    private string verifyCode_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Gold" field.</summary>
    public const int GoldFieldNumber = 10;
    private ulong gold_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Gold {
      get { return gold_; }
      set {
        gold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserName != other.UserName) return false;
      if (UserID != other.UserID) return false;
      if (State != other.State) return false;
      if (BlockType != other.BlockType) return false;
      if (BlockTime != other.BlockTime) return false;
      if (Authority != other.Authority) return false;
      if (LastIP != other.LastIP) return false;
      if (VerifyCode != other.VerifyCode) return false;
      if (Gold != other.Gold) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (BlockType != 0) hash ^= BlockType.GetHashCode();
      if (BlockTime != 0UL) hash ^= BlockTime.GetHashCode();
      if (Authority != 0) hash ^= Authority.GetHashCode();
      if (LastIP.Length != 0) hash ^= LastIP.GetHashCode();
      if (VerifyCode.Length != 0) hash ^= VerifyCode.GetHashCode();
      if (Gold != 0UL) hash ^= Gold.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(UserID);
      }
      if (State != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(State);
      }
      if (BlockType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BlockType);
      }
      if (BlockTime != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(BlockTime);
      }
      if (Authority != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Authority);
      }
      if (LastIP.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(LastIP);
      }
      if (VerifyCode.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(VerifyCode);
      }
      if (Gold != 0UL) {
        output.WriteRawTag(80);
        output.WriteUInt64(Gold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (BlockType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockType);
      }
      if (BlockTime != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BlockTime);
      }
      if (Authority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Authority);
      }
      if (LastIP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastIP);
      }
      if (VerifyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerifyCode);
      }
      if (Gold != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Gold);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginResult other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.BlockType != 0) {
        BlockType = other.BlockType;
      }
      if (other.BlockTime != 0UL) {
        BlockTime = other.BlockTime;
      }
      if (other.Authority != 0) {
        Authority = other.Authority;
      }
      if (other.LastIP.Length != 0) {
        LastIP = other.LastIP;
      }
      if (other.VerifyCode.Length != 0) {
        VerifyCode = other.VerifyCode;
      }
      if (other.Gold != 0UL) {
        Gold = other.Gold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 24: {
            UserID = input.ReadUInt64();
            break;
          }
          case 32: {
            State = input.ReadInt32();
            break;
          }
          case 40: {
            BlockType = input.ReadInt32();
            break;
          }
          case 48: {
            BlockTime = input.ReadUInt64();
            break;
          }
          case 56: {
            Authority = input.ReadInt32();
            break;
          }
          case 66: {
            LastIP = input.ReadString();
            break;
          }
          case 74: {
            VerifyCode = input.ReadString();
            break;
          }
          case 80: {
            Gold = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegistAccount : pb::IMessage<RegistAccount> {
    private static readonly pb::MessageParser<RegistAccount> _parser = new pb::MessageParser<RegistAccount>(() => new RegistAccount());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegistAccount> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.LoginPKGReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistAccount() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistAccount(RegistAccount other) : this() {
      pkgID_ = other.pkgID_;
      userName_ = other.userName_;
      passWord_ = other.passWord_;
      birthday_ = other.birthday_;
      gender_ = other.gender_;
      verifyCode_ = other.verifyCode_;
      verifyID_ = other.verifyID_;
      iP_ = other.iP_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegistAccount Clone() {
      return new RegistAccount(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PassWord" field.</summary>
    public const int PassWordFieldNumber = 3;
    private string passWord_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PassWord {
      get { return passWord_; }
      set {
        passWord_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Birthday" field.</summary>
    public const int BirthdayFieldNumber = 4;
    private string birthday_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Birthday {
      get { return birthday_; }
      set {
        birthday_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Gender" field.</summary>
    public const int GenderFieldNumber = 5;
    private int gender_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "VerifyCode" field.</summary>
    public const int VerifyCodeFieldNumber = 6;
    private string verifyCode_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VerifyID" field.</summary>
    public const int VerifyIDFieldNumber = 7;
    private ulong verifyID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong VerifyID {
      get { return verifyID_; }
      set {
        verifyID_ = value;
      }
    }

    /// <summary>Field number for the "IP" field.</summary>
    public const int IPFieldNumber = 8;
    private string iP_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IP {
      get { return iP_; }
      set {
        iP_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegistAccount);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegistAccount other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserName != other.UserName) return false;
      if (PassWord != other.PassWord) return false;
      if (Birthday != other.Birthday) return false;
      if (Gender != other.Gender) return false;
      if (VerifyCode != other.VerifyCode) return false;
      if (VerifyID != other.VerifyID) return false;
      if (IP != other.IP) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserName.Length != 0) hash ^= UserName.GetHashCode();
      if (PassWord.Length != 0) hash ^= PassWord.GetHashCode();
      if (Birthday.Length != 0) hash ^= Birthday.GetHashCode();
      if (Gender != 0) hash ^= Gender.GetHashCode();
      if (VerifyCode.Length != 0) hash ^= VerifyCode.GetHashCode();
      if (VerifyID != 0UL) hash ^= VerifyID.GetHashCode();
      if (IP.Length != 0) hash ^= IP.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
      if (PassWord.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PassWord);
      }
      if (Birthday.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Birthday);
      }
      if (Gender != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Gender);
      }
      if (VerifyCode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(VerifyCode);
      }
      if (VerifyID != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(VerifyID);
      }
      if (IP.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(IP);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (PassWord.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PassWord);
      }
      if (Birthday.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Birthday);
      }
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gender);
      }
      if (VerifyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerifyCode);
      }
      if (VerifyID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(VerifyID);
      }
      if (IP.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IP);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegistAccount other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserName.Length != 0) {
        UserName = other.UserName;
      }
      if (other.PassWord.Length != 0) {
        PassWord = other.PassWord;
      }
      if (other.Birthday.Length != 0) {
        Birthday = other.Birthday;
      }
      if (other.Gender != 0) {
        Gender = other.Gender;
      }
      if (other.VerifyCode.Length != 0) {
        VerifyCode = other.VerifyCode;
      }
      if (other.VerifyID != 0UL) {
        VerifyID = other.VerifyID;
      }
      if (other.IP.Length != 0) {
        IP = other.IP;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
          case 26: {
            PassWord = input.ReadString();
            break;
          }
          case 34: {
            Birthday = input.ReadString();
            break;
          }
          case 40: {
            Gender = input.ReadInt32();
            break;
          }
          case 50: {
            VerifyCode = input.ReadString();
            break;
          }
          case 56: {
            VerifyID = input.ReadUInt64();
            break;
          }
          case 66: {
            IP = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetASafeQuestion : pb::IMessage<SetASafeQuestion> {
    private static readonly pb::MessageParser<SetASafeQuestion> _parser = new pb::MessageParser<SetASafeQuestion>(() => new SetASafeQuestion());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetASafeQuestion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.LoginPKGReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetASafeQuestion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetASafeQuestion(SetASafeQuestion other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      question_ = other.question_;
      answer_ = other.answer_;
      verifyCode_ = other.verifyCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetASafeQuestion Clone() {
      return new SetASafeQuestion(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "Question" field.</summary>
    public const int QuestionFieldNumber = 3;
    private string question_ = "";
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Question {
      get { return question_; }
      set {
        question_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Answer" field.</summary>
    public const int AnswerFieldNumber = 4;
    private string answer_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Answer {
      get { return answer_; }
      set {
        answer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VerifyCode" field.</summary>
    public const int VerifyCodeFieldNumber = 5;
    private string verifyCode_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetASafeQuestion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetASafeQuestion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (Question != other.Question) return false;
      if (Answer != other.Answer) return false;
      if (VerifyCode != other.VerifyCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (Question.Length != 0) hash ^= Question.GetHashCode();
      if (Answer.Length != 0) hash ^= Answer.GetHashCode();
      if (VerifyCode.Length != 0) hash ^= VerifyCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (Question.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Question);
      }
      if (Answer.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Answer);
      }
      if (VerifyCode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(VerifyCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (Question.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Question);
      }
      if (Answer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Answer);
      }
      if (VerifyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerifyCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetASafeQuestion other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.Question.Length != 0) {
        Question = other.Question;
      }
      if (other.Answer.Length != 0) {
        Answer = other.Answer;
      }
      if (other.VerifyCode.Length != 0) {
        VerifyCode = other.VerifyCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 26: {
            Question = input.ReadString();
            break;
          }
          case 34: {
            Answer = input.ReadString();
            break;
          }
          case 42: {
            VerifyCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
