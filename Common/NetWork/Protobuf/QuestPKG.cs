// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: QuestPKG.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GamePKG {

  /// <summary>Holder for reflection information generated from QuestPKG.proto</summary>
  public static partial class QuestPKGReflection {

    #region Descriptor
    /// <summary>File descriptor for QuestPKG.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static QuestPKGReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5RdWVzdFBLRy5wcm90bxIHR2FtZVBLRxoPTWVzc2FnZUlELnByb3RvIkwK",
            "DFF1ZXN0Q29udGVudBIMCgRUeXBlGAEgASgFEg4KBlBhcmFtMRgCIAEoAxIO",
            "CgZQYXJhbTIYAyABKAMSDgoGUGFyYW0zGAQgASgDIn8KDFF1ZXN0T3BlcmF0",
            "ZRIZCgVQa2dJRBgBIAEoDjIKLlBLR1R5cGVJRBIOCgZVc2VySUQYAiABKAQS",
            "DgoGUm9sZUlEGAMgASgEEg8KB1F1ZXN0SUQYBCABKAUSDwoHT3BlcmF0ZRgF",
            "IAEoBRISCgpWZXJpZnlDb2RlGAYgASgJIp4BCgVRdWVzdBIZCgVQa2dJRBgB",
            "IAEoDjIKLlBLR1R5cGVJRBIOCgZVc2VySUQYAiABKAQSDgoGUm9sZUlEGAMg",
            "ASgEEg8KB1F1ZXN0SUQYBCABKAUSEgoKQWNjZXB0VGltZRgFIAEoAxINCgVT",
            "dGF0ZRgGIAEoBRImCgdDb250ZW50GAcgAygLMhUuR2FtZVBLRy5RdWVzdENv",
            "bnRlbnQiagoJUXVlc3RMaXN0EhkKBVBrZ0lEGAEgASgOMgouUEtHVHlwZUlE",
            "Eg4KBlVzZXJJRBgCIAEoBBIOCgZSb2xlSUQYAyABKAQSIgoKUXVlc3RBcnJh",
            "eRgEIAMoCzIOLkdhbWVQS0cuUXVlc3QixgEKB0hpc3RvcnkSGQoFUGtnSUQY",
            "ASABKA4yCi5QS0dUeXBlSUQSDgoGVXNlcklEGAIgASgEEg4KBlJvbGVJRBgD",
            "IAEoBBIKCgJJRBgEIAEoBRIUCgxDb21wbGV0ZVRpbWUYBSABKAMSEAoIRGF5",
            "VGltZXMYBiABKAUSEQoJV2Vla1RpbWVzGAcgASgFEhIKCk1vbnRoVGltZXMY",
            "CCABKAUSEQoJWWVhclRpbWVzGAkgASgFEhIKCkNvdW50VGltZXMYCiABKAVi",
            "BnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::MessageIDReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.QuestContent), global::GamePKG.QuestContent.Parser, new[]{ "Type", "Param1", "Param2", "Param3" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.QuestOperate), global::GamePKG.QuestOperate.Parser, new[]{ "PkgID", "UserID", "RoleID", "QuestID", "Operate", "VerifyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.Quest), global::GamePKG.Quest.Parser, new[]{ "PkgID", "UserID", "RoleID", "QuestID", "AcceptTime", "State", "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.QuestList), global::GamePKG.QuestList.Parser, new[]{ "PkgID", "UserID", "RoleID", "QuestArray" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.History), global::GamePKG.History.Parser, new[]{ "PkgID", "UserID", "RoleID", "ID", "CompleteTime", "DayTimes", "WeekTimes", "MonthTimes", "YearTimes", "CountTimes" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class QuestContent : pb::IMessage<QuestContent> {
    private static readonly pb::MessageParser<QuestContent> _parser = new pb::MessageParser<QuestContent>(() => new QuestContent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuestContent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.QuestPKGReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestContent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestContent(QuestContent other) : this() {
      type_ = other.type_;
      param1_ = other.param1_;
      param2_ = other.param2_;
      param3_ = other.param3_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestContent Clone() {
      return new QuestContent(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Param1" field.</summary>
    public const int Param1FieldNumber = 2;
    private long param1_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Param1 {
      get { return param1_; }
      set {
        param1_ = value;
      }
    }

    /// <summary>Field number for the "Param2" field.</summary>
    public const int Param2FieldNumber = 3;
    private long param2_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Param2 {
      get { return param2_; }
      set {
        param2_ = value;
      }
    }

    /// <summary>Field number for the "Param3" field.</summary>
    public const int Param3FieldNumber = 4;
    private long param3_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Param3 {
      get { return param3_; }
      set {
        param3_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuestContent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuestContent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Param1 != other.Param1) return false;
      if (Param2 != other.Param2) return false;
      if (Param3 != other.Param3) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Param1 != 0L) hash ^= Param1.GetHashCode();
      if (Param2 != 0L) hash ^= Param2.GetHashCode();
      if (Param3 != 0L) hash ^= Param3.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (Param1 != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Param1);
      }
      if (Param2 != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Param2);
      }
      if (Param3 != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Param3);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (Param1 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Param1);
      }
      if (Param2 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Param2);
      }
      if (Param3 != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Param3);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuestContent other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Param1 != 0L) {
        Param1 = other.Param1;
      }
      if (other.Param2 != 0L) {
        Param2 = other.Param2;
      }
      if (other.Param3 != 0L) {
        Param3 = other.Param3;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
          case 16: {
            Param1 = input.ReadInt64();
            break;
          }
          case 24: {
            Param2 = input.ReadInt64();
            break;
          }
          case 32: {
            Param3 = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QuestOperate : pb::IMessage<QuestOperate> {
    private static readonly pb::MessageParser<QuestOperate> _parser = new pb::MessageParser<QuestOperate>(() => new QuestOperate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuestOperate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.QuestPKGReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestOperate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestOperate(QuestOperate other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      roleID_ = other.roleID_;
      questID_ = other.questID_;
      operate_ = other.operate_;
      verifyCode_ = other.verifyCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestOperate Clone() {
      return new QuestOperate(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 3;
    private ulong roleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "QuestID" field.</summary>
    public const int QuestIDFieldNumber = 4;
    private int questID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QuestID {
      get { return questID_; }
      set {
        questID_ = value;
      }
    }

    /// <summary>Field number for the "Operate" field.</summary>
    public const int OperateFieldNumber = 5;
    private int operate_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Operate {
      get { return operate_; }
      set {
        operate_ = value;
      }
    }

    /// <summary>Field number for the "VerifyCode" field.</summary>
    public const int VerifyCodeFieldNumber = 6;
    private string verifyCode_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuestOperate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuestOperate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (RoleID != other.RoleID) return false;
      if (QuestID != other.QuestID) return false;
      if (Operate != other.Operate) return false;
      if (VerifyCode != other.VerifyCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (RoleID != 0UL) hash ^= RoleID.GetHashCode();
      if (QuestID != 0) hash ^= QuestID.GetHashCode();
      if (Operate != 0) hash ^= Operate.GetHashCode();
      if (VerifyCode.Length != 0) hash ^= VerifyCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (RoleID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoleID);
      }
      if (QuestID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(QuestID);
      }
      if (Operate != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Operate);
      }
      if (VerifyCode.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(VerifyCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      if (QuestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuestID);
      }
      if (Operate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Operate);
      }
      if (VerifyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerifyCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuestOperate other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.RoleID != 0UL) {
        RoleID = other.RoleID;
      }
      if (other.QuestID != 0) {
        QuestID = other.QuestID;
      }
      if (other.Operate != 0) {
        Operate = other.Operate;
      }
      if (other.VerifyCode.Length != 0) {
        VerifyCode = other.VerifyCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 24: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 32: {
            QuestID = input.ReadInt32();
            break;
          }
          case 40: {
            Operate = input.ReadInt32();
            break;
          }
          case 50: {
            VerifyCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Quest : pb::IMessage<Quest> {
    private static readonly pb::MessageParser<Quest> _parser = new pb::MessageParser<Quest>(() => new Quest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Quest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.QuestPKGReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quest(Quest other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      roleID_ = other.roleID_;
      questID_ = other.questID_;
      acceptTime_ = other.acceptTime_;
      state_ = other.state_;
      content_ = other.content_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Quest Clone() {
      return new Quest(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 3;
    private ulong roleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "QuestID" field.</summary>
    public const int QuestIDFieldNumber = 4;
    private int questID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int QuestID {
      get { return questID_; }
      set {
        questID_ = value;
      }
    }

    /// <summary>Field number for the "AcceptTime" field.</summary>
    public const int AcceptTimeFieldNumber = 5;
    private long acceptTime_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AcceptTime {
      get { return acceptTime_; }
      set {
        acceptTime_ = value;
      }
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 6;
    private int state_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "Content" field.</summary>
    public const int ContentFieldNumber = 7;
    private static readonly pb::FieldCodec<global::GamePKG.QuestContent> _repeated_content_codec
        = pb::FieldCodec.ForMessage(58, global::GamePKG.QuestContent.Parser);
    private readonly pbc::RepeatedField<global::GamePKG.QuestContent> content_ = new pbc::RepeatedField<global::GamePKG.QuestContent>();
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GamePKG.QuestContent> Content {
      get { return content_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Quest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Quest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (RoleID != other.RoleID) return false;
      if (QuestID != other.QuestID) return false;
      if (AcceptTime != other.AcceptTime) return false;
      if (State != other.State) return false;
      if(!content_.Equals(other.content_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (RoleID != 0UL) hash ^= RoleID.GetHashCode();
      if (QuestID != 0) hash ^= QuestID.GetHashCode();
      if (AcceptTime != 0L) hash ^= AcceptTime.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      hash ^= content_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (RoleID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoleID);
      }
      if (QuestID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(QuestID);
      }
      if (AcceptTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(AcceptTime);
      }
      if (State != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(State);
      }
      content_.WriteTo(output, _repeated_content_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      if (QuestID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(QuestID);
      }
      if (AcceptTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AcceptTime);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      size += content_.CalculateSize(_repeated_content_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Quest other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.RoleID != 0UL) {
        RoleID = other.RoleID;
      }
      if (other.QuestID != 0) {
        QuestID = other.QuestID;
      }
      if (other.AcceptTime != 0L) {
        AcceptTime = other.AcceptTime;
      }
      if (other.State != 0) {
        State = other.State;
      }
      content_.Add(other.content_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 24: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 32: {
            QuestID = input.ReadInt32();
            break;
          }
          case 40: {
            AcceptTime = input.ReadInt64();
            break;
          }
          case 48: {
            State = input.ReadInt32();
            break;
          }
          case 58: {
            content_.AddEntriesFrom(input, _repeated_content_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class QuestList : pb::IMessage<QuestList> {
    private static readonly pb::MessageParser<QuestList> _parser = new pb::MessageParser<QuestList>(() => new QuestList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuestList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.QuestPKGReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestList(QuestList other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      roleID_ = other.roleID_;
      questArray_ = other.questArray_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QuestList Clone() {
      return new QuestList(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 3;
    private ulong roleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "QuestArray" field.</summary>
    public const int QuestArrayFieldNumber = 4;
    private static readonly pb::FieldCodec<global::GamePKG.Quest> _repeated_questArray_codec
        = pb::FieldCodec.ForMessage(34, global::GamePKG.Quest.Parser);
    private readonly pbc::RepeatedField<global::GamePKG.Quest> questArray_ = new pbc::RepeatedField<global::GamePKG.Quest>();
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GamePKG.Quest> QuestArray {
      get { return questArray_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QuestList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QuestList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (RoleID != other.RoleID) return false;
      if(!questArray_.Equals(other.questArray_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (RoleID != 0UL) hash ^= RoleID.GetHashCode();
      hash ^= questArray_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (RoleID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoleID);
      }
      questArray_.WriteTo(output, _repeated_questArray_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      size += questArray_.CalculateSize(_repeated_questArray_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QuestList other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.RoleID != 0UL) {
        RoleID = other.RoleID;
      }
      questArray_.Add(other.questArray_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 24: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 34: {
            questArray_.AddEntriesFrom(input, _repeated_questArray_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class History : pb::IMessage<History> {
    private static readonly pb::MessageParser<History> _parser = new pb::MessageParser<History>(() => new History());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<History> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.QuestPKGReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public History() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public History(History other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      roleID_ = other.roleID_;
      iD_ = other.iD_;
      completeTime_ = other.completeTime_;
      dayTimes_ = other.dayTimes_;
      weekTimes_ = other.weekTimes_;
      monthTimes_ = other.monthTimes_;
      yearTimes_ = other.yearTimes_;
      countTimes_ = other.countTimes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public History Clone() {
      return new History(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 3;
    private ulong roleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "ID" field.</summary>
    public const int IDFieldNumber = 4;
    private int iD_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ID {
      get { return iD_; }
      set {
        iD_ = value;
      }
    }

    /// <summary>Field number for the "CompleteTime" field.</summary>
    public const int CompleteTimeFieldNumber = 5;
    private long completeTime_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CompleteTime {
      get { return completeTime_; }
      set {
        completeTime_ = value;
      }
    }

    /// <summary>Field number for the "DayTimes" field.</summary>
    public const int DayTimesFieldNumber = 6;
    private int dayTimes_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DayTimes {
      get { return dayTimes_; }
      set {
        dayTimes_ = value;
      }
    }

    /// <summary>Field number for the "WeekTimes" field.</summary>
    public const int WeekTimesFieldNumber = 7;
    private int weekTimes_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WeekTimes {
      get { return weekTimes_; }
      set {
        weekTimes_ = value;
      }
    }

    /// <summary>Field number for the "MonthTimes" field.</summary>
    public const int MonthTimesFieldNumber = 8;
    private int monthTimes_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MonthTimes {
      get { return monthTimes_; }
      set {
        monthTimes_ = value;
      }
    }

    /// <summary>Field number for the "YearTimes" field.</summary>
    public const int YearTimesFieldNumber = 9;
    private int yearTimes_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int YearTimes {
      get { return yearTimes_; }
      set {
        yearTimes_ = value;
      }
    }

    /// <summary>Field number for the "CountTimes" field.</summary>
    public const int CountTimesFieldNumber = 10;
    private int countTimes_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CountTimes {
      get { return countTimes_; }
      set {
        countTimes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as History);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(History other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (RoleID != other.RoleID) return false;
      if (ID != other.ID) return false;
      if (CompleteTime != other.CompleteTime) return false;
      if (DayTimes != other.DayTimes) return false;
      if (WeekTimes != other.WeekTimes) return false;
      if (MonthTimes != other.MonthTimes) return false;
      if (YearTimes != other.YearTimes) return false;
      if (CountTimes != other.CountTimes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (RoleID != 0UL) hash ^= RoleID.GetHashCode();
      if (ID != 0) hash ^= ID.GetHashCode();
      if (CompleteTime != 0L) hash ^= CompleteTime.GetHashCode();
      if (DayTimes != 0) hash ^= DayTimes.GetHashCode();
      if (WeekTimes != 0) hash ^= WeekTimes.GetHashCode();
      if (MonthTimes != 0) hash ^= MonthTimes.GetHashCode();
      if (YearTimes != 0) hash ^= YearTimes.GetHashCode();
      if (CountTimes != 0) hash ^= CountTimes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (RoleID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoleID);
      }
      if (ID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ID);
      }
      if (CompleteTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CompleteTime);
      }
      if (DayTimes != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DayTimes);
      }
      if (WeekTimes != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(WeekTimes);
      }
      if (MonthTimes != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MonthTimes);
      }
      if (YearTimes != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(YearTimes);
      }
      if (CountTimes != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(CountTimes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      if (ID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ID);
      }
      if (CompleteTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CompleteTime);
      }
      if (DayTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DayTimes);
      }
      if (WeekTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WeekTimes);
      }
      if (MonthTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonthTimes);
      }
      if (YearTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(YearTimes);
      }
      if (CountTimes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CountTimes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(History other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.RoleID != 0UL) {
        RoleID = other.RoleID;
      }
      if (other.ID != 0) {
        ID = other.ID;
      }
      if (other.CompleteTime != 0L) {
        CompleteTime = other.CompleteTime;
      }
      if (other.DayTimes != 0) {
        DayTimes = other.DayTimes;
      }
      if (other.WeekTimes != 0) {
        WeekTimes = other.WeekTimes;
      }
      if (other.MonthTimes != 0) {
        MonthTimes = other.MonthTimes;
      }
      if (other.YearTimes != 0) {
        YearTimes = other.YearTimes;
      }
      if (other.CountTimes != 0) {
        CountTimes = other.CountTimes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 24: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 32: {
            ID = input.ReadInt32();
            break;
          }
          case 40: {
            CompleteTime = input.ReadInt64();
            break;
          }
          case 48: {
            DayTimes = input.ReadInt32();
            break;
          }
          case 56: {
            WeekTimes = input.ReadInt32();
            break;
          }
          case 64: {
            MonthTimes = input.ReadInt32();
            break;
          }
          case 72: {
            YearTimes = input.ReadInt32();
            break;
          }
          case 80: {
            CountTimes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
