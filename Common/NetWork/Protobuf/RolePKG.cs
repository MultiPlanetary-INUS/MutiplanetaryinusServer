// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: RolePKG.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GamePKG {

  /// <summary>Holder for reflection information generated from RolePKG.proto</summary>
  public static partial class RolePKGReflection {

    #region Descriptor
    /// <summary>File descriptor for RolePKG.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RolePKGReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1Sb2xlUEtHLnByb3RvEgdHYW1lUEtHGg9NZXNzYWdlSUQucHJvdG8iTgoN",
            "UXVlcnlSb2xlTGlzdBIZCgVQa2dJRBgBIAEoDjIKLlBLR1R5cGVJRBIOCgZV",
            "c2VySUQYAiABKAQSEgoKVmVyaWZ5Q29kZRgDIAEoCSLLAQoIUm9sZUluZm8S",
            "GQoFUGtnSUQYASABKA4yCi5QS0dUeXBlSUQSDgoGVXNlcklEGAIgASgEEg4K",
            "BlJvbGVJRBgDIAEoBBIQCghSb2xlTmFtZRgEIAEoCRIQCghWb2NhdGlvbhgF",
            "IAEoBRIOCgZHZW5kZXIYBiABKAUSDAoESGFpchgHIAEoBRIRCglIYWlyQ29s",
            "b3IYCCABKAUSDAoERmFjZRgJIAEoBRINCgVTdGF0ZRgKIAEoBRISCgpWZXJp",
            "ZnlDb2RlGAsgASgJIoEDCghSb2xlQXR0chIZCgVQa2dJRBgBIAEoDjIKLlBL",
            "R1R5cGVJRBIOCgZVc2VySUQYAiABKAQSDgoGUm9sZUlEGAMgASgEEhEKCVJv",
            "bGVMZXZlbBgEIAEoBRINCgVDdXJIUBgFIAEoAxINCgVDdXJNUBgGIAEoAxIO",
            "CgZDdXJFeHAYByABKAMSDQoFTW9uZXkYCCABKAQSDgoGR3VpZElEGAkgASgE",
            "EhEKCUd1aWRMZXZlbBgKIAEoBRINCgVNYXBJRBgLIAEoBRIMCgRQb3NYGAwg",
            "ASgCEgwKBFBvc1kYDSABKAISDAoEUG9zWhgOIAEoAhIRCglEaXJlY3Rpb24Y",
            "DyABKAISDQoFUG93ZXIYECABKAUSEAoIQWNjdXJhdGUYESABKAUSFQoNUmVz",
            "aXN0aWJpbGl0eRgSIAEoBRIQCghWaXRhbGl0eRgTIAEoBRINCgVMdWNreRgU",
            "IAEoBRIPCgdDb29saW5nGBUgASgFEhEKCUZyZWVQb2ludBgWIAEoBSJtCghS",
            "b2xlTGlzdBIZCgVQa2dJRBgBIAEoDjIKLlBLR1R5cGVJRBIOCgZVc2VySUQY",
            "AiABKAQSEQoJU2VsUm9sZUlEGAMgASgEEiMKCFJvbGVMaXN0GAQgAygLMhEu",
            "R2FtZVBLRy5Sb2xlSW5mbyJvCgpEZWxldGVSb2xlEhkKBVBrZ0lEGAEgASgO",
            "MgouUEtHVHlwZUlEEg4KBlVzZXJJRBgCIAEoBBIOCgZSb2xlSUQYAyABKAQS",
            "EgoKRGVsZXRlV29yZBgEIAEoCRISCgpWZXJpZnlDb2RlGAUgASgJIq4CCg1S",
            "b2xlQXR0clZhbHVlEhkKBVBrZ0lEGAEgASgOMgouUEtHVHlwZUlEEg4KBlVz",
            "ZXJJRBgCIAEoBBIOCgZSb2xlSUQYAyABKAQSCgoCSFAYBCABKAUSCgoCTVAY",
            "BSABKAUSEQoJQXR0YWNrTWluGAYgASgFEhEKCUF0dGFja01heBgHIAEoBRIS",
            "CgpEZWZlbnNlTWluGAggASgFEhIKCkRlZmVuc2VNYXgYCSABKAUSDQoFUG93",
            "ZXIYCiABKAUSEAoIQWNjdXJhdGUYCyABKAUSFQoNUmVzaXN0aWJpbGl0eRgM",
            "IAEoBRIQCghWaXRhbGl0eRgNIAEoBRINCgVMdWNreRgOIAEoBRIPCgdDb29s",
            "aW5nGA8gASgFEhIKClZlcmlmeUNvZGUYECABKAliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::MessageIDReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.QueryRoleList), global::GamePKG.QueryRoleList.Parser, new[]{ "PkgID", "UserID", "VerifyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.RoleInfo), global::GamePKG.RoleInfo.Parser, new[]{ "PkgID", "UserID", "RoleID", "RoleName", "Vocation", "Gender", "Hair", "HairColor", "Face", "State", "VerifyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.RoleAttr), global::GamePKG.RoleAttr.Parser, new[]{ "PkgID", "UserID", "RoleID", "RoleLevel", "CurHP", "CurMP", "CurExp", "Money", "GuidID", "GuidLevel", "MapID", "PosX", "PosY", "PosZ", "Direction", "Power", "Accurate", "Resistibility", "Vitality", "Lucky", "Cooling", "FreePoint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.RoleList), global::GamePKG.RoleList.Parser, new[]{ "PkgID", "UserID", "SelRoleID", "RoleList_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.DeleteRole), global::GamePKG.DeleteRole.Parser, new[]{ "PkgID", "UserID", "RoleID", "DeleteWord", "VerifyCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GamePKG.RoleAttrValue), global::GamePKG.RoleAttrValue.Parser, new[]{ "PkgID", "UserID", "RoleID", "HP", "MP", "AttackMin", "AttackMax", "DefenseMin", "DefenseMax", "Power", "Accurate", "Resistibility", "Vitality", "Lucky", "Cooling", "VerifyCode" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class QueryRoleList : pb::IMessage<QueryRoleList> {
    private static readonly pb::MessageParser<QueryRoleList> _parser = new pb::MessageParser<QueryRoleList>(() => new QueryRoleList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QueryRoleList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.RolePKGReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRoleList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRoleList(QueryRoleList other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      verifyCode_ = other.verifyCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QueryRoleList Clone() {
      return new QueryRoleList(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "VerifyCode" field.</summary>
    public const int VerifyCodeFieldNumber = 3;
    private string verifyCode_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QueryRoleList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QueryRoleList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (VerifyCode != other.VerifyCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (VerifyCode.Length != 0) hash ^= VerifyCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (VerifyCode.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(VerifyCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (VerifyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerifyCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QueryRoleList other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.VerifyCode.Length != 0) {
        VerifyCode = other.VerifyCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 26: {
            VerifyCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoleInfo : pb::IMessage<RoleInfo> {
    private static readonly pb::MessageParser<RoleInfo> _parser = new pb::MessageParser<RoleInfo>(() => new RoleInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.RolePKGReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleInfo(RoleInfo other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      roleID_ = other.roleID_;
      roleName_ = other.roleName_;
      vocation_ = other.vocation_;
      gender_ = other.gender_;
      hair_ = other.hair_;
      hairColor_ = other.hairColor_;
      face_ = other.face_;
      state_ = other.state_;
      verifyCode_ = other.verifyCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleInfo Clone() {
      return new RoleInfo(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 3;
    private ulong roleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "RoleName" field.</summary>
    public const int RoleNameFieldNumber = 4;
    private string roleName_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoleName {
      get { return roleName_; }
      set {
        roleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Vocation" field.</summary>
    public const int VocationFieldNumber = 5;
    private int vocation_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Vocation {
      get { return vocation_; }
      set {
        vocation_ = value;
      }
    }

    /// <summary>Field number for the "Gender" field.</summary>
    public const int GenderFieldNumber = 6;
    private int gender_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "Hair" field.</summary>
    public const int HairFieldNumber = 7;
    private int hair_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hair {
      get { return hair_; }
      set {
        hair_ = value;
      }
    }

    /// <summary>Field number for the "HairColor" field.</summary>
    public const int HairColorFieldNumber = 8;
    private int hairColor_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HairColor {
      get { return hairColor_; }
      set {
        hairColor_ = value;
      }
    }

    /// <summary>Field number for the "Face" field.</summary>
    public const int FaceFieldNumber = 9;
    private int face_;
    /// <summary>
    /// 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Face {
      get { return face_; }
      set {
        face_ = value;
      }
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 10;
    private int state_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "VerifyCode" field.</summary>
    public const int VerifyCodeFieldNumber = 11;
    private string verifyCode_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (RoleID != other.RoleID) return false;
      if (RoleName != other.RoleName) return false;
      if (Vocation != other.Vocation) return false;
      if (Gender != other.Gender) return false;
      if (Hair != other.Hair) return false;
      if (HairColor != other.HairColor) return false;
      if (Face != other.Face) return false;
      if (State != other.State) return false;
      if (VerifyCode != other.VerifyCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (RoleID != 0UL) hash ^= RoleID.GetHashCode();
      if (RoleName.Length != 0) hash ^= RoleName.GetHashCode();
      if (Vocation != 0) hash ^= Vocation.GetHashCode();
      if (Gender != 0) hash ^= Gender.GetHashCode();
      if (Hair != 0) hash ^= Hair.GetHashCode();
      if (HairColor != 0) hash ^= HairColor.GetHashCode();
      if (Face != 0) hash ^= Face.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (VerifyCode.Length != 0) hash ^= VerifyCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (RoleID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoleID);
      }
      if (RoleName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RoleName);
      }
      if (Vocation != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Vocation);
      }
      if (Gender != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Gender);
      }
      if (Hair != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Hair);
      }
      if (HairColor != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(HairColor);
      }
      if (Face != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Face);
      }
      if (State != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(State);
      }
      if (VerifyCode.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(VerifyCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      if (RoleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoleName);
      }
      if (Vocation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vocation);
      }
      if (Gender != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gender);
      }
      if (Hair != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hair);
      }
      if (HairColor != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HairColor);
      }
      if (Face != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Face);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      if (VerifyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerifyCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleInfo other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.RoleID != 0UL) {
        RoleID = other.RoleID;
      }
      if (other.RoleName.Length != 0) {
        RoleName = other.RoleName;
      }
      if (other.Vocation != 0) {
        Vocation = other.Vocation;
      }
      if (other.Gender != 0) {
        Gender = other.Gender;
      }
      if (other.Hair != 0) {
        Hair = other.Hair;
      }
      if (other.HairColor != 0) {
        HairColor = other.HairColor;
      }
      if (other.Face != 0) {
        Face = other.Face;
      }
      if (other.State != 0) {
        State = other.State;
      }
      if (other.VerifyCode.Length != 0) {
        VerifyCode = other.VerifyCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 24: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 34: {
            RoleName = input.ReadString();
            break;
          }
          case 40: {
            Vocation = input.ReadInt32();
            break;
          }
          case 48: {
            Gender = input.ReadInt32();
            break;
          }
          case 56: {
            Hair = input.ReadInt32();
            break;
          }
          case 64: {
            HairColor = input.ReadInt32();
            break;
          }
          case 72: {
            Face = input.ReadInt32();
            break;
          }
          case 80: {
            State = input.ReadInt32();
            break;
          }
          case 90: {
            VerifyCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoleAttr : pb::IMessage<RoleAttr> {
    private static readonly pb::MessageParser<RoleAttr> _parser = new pb::MessageParser<RoleAttr>(() => new RoleAttr());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleAttr> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.RolePKGReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleAttr() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleAttr(RoleAttr other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      roleID_ = other.roleID_;
      roleLevel_ = other.roleLevel_;
      curHP_ = other.curHP_;
      curMP_ = other.curMP_;
      curExp_ = other.curExp_;
      money_ = other.money_;
      guidID_ = other.guidID_;
      guidLevel_ = other.guidLevel_;
      mapID_ = other.mapID_;
      posX_ = other.posX_;
      posY_ = other.posY_;
      posZ_ = other.posZ_;
      direction_ = other.direction_;
      power_ = other.power_;
      accurate_ = other.accurate_;
      resistibility_ = other.resistibility_;
      vitality_ = other.vitality_;
      lucky_ = other.lucky_;
      cooling_ = other.cooling_;
      freePoint_ = other.freePoint_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleAttr Clone() {
      return new RoleAttr(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 3;
    private ulong roleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "RoleLevel" field.</summary>
    public const int RoleLevelFieldNumber = 4;
    private int roleLevel_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoleLevel {
      get { return roleLevel_; }
      set {
        roleLevel_ = value;
      }
    }

    /// <summary>Field number for the "CurHP" field.</summary>
    public const int CurHPFieldNumber = 5;
    private long curHP_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurHP {
      get { return curHP_; }
      set {
        curHP_ = value;
      }
    }

    /// <summary>Field number for the "CurMP" field.</summary>
    public const int CurMPFieldNumber = 6;
    private long curMP_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurMP {
      get { return curMP_; }
      set {
        curMP_ = value;
      }
    }

    /// <summary>Field number for the "CurExp" field.</summary>
    public const int CurExpFieldNumber = 7;
    private long curExp_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurExp {
      get { return curExp_; }
      set {
        curExp_ = value;
      }
    }

    /// <summary>Field number for the "Money" field.</summary>
    public const int MoneyFieldNumber = 8;
    private ulong money_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    /// <summary>Field number for the "GuidID" field.</summary>
    public const int GuidIDFieldNumber = 9;
    private ulong guidID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong GuidID {
      get { return guidID_; }
      set {
        guidID_ = value;
      }
    }

    /// <summary>Field number for the "GuidLevel" field.</summary>
    public const int GuidLevelFieldNumber = 10;
    private int guidLevel_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GuidLevel {
      get { return guidLevel_; }
      set {
        guidLevel_ = value;
      }
    }

    /// <summary>Field number for the "MapID" field.</summary>
    public const int MapIDFieldNumber = 11;
    private int mapID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MapID {
      get { return mapID_; }
      set {
        mapID_ = value;
      }
    }

    /// <summary>Field number for the "PosX" field.</summary>
    public const int PosXFieldNumber = 12;
    private float posX_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosX {
      get { return posX_; }
      set {
        posX_ = value;
      }
    }

    /// <summary>Field number for the "PosY" field.</summary>
    public const int PosYFieldNumber = 13;
    private float posY_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosY {
      get { return posY_; }
      set {
        posY_ = value;
      }
    }

    /// <summary>Field number for the "PosZ" field.</summary>
    public const int PosZFieldNumber = 14;
    private float posZ_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosZ {
      get { return posZ_; }
      set {
        posZ_ = value;
      }
    }

    /// <summary>Field number for the "Direction" field.</summary>
    public const int DirectionFieldNumber = 15;
    private float direction_;
    /// <summary>
    ///)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "Power" field.</summary>
    public const int PowerFieldNumber = 16;
    private int power_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "Accurate" field.</summary>
    public const int AccurateFieldNumber = 17;
    private int accurate_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Accurate {
      get { return accurate_; }
      set {
        accurate_ = value;
      }
    }

    /// <summary>Field number for the "Resistibility" field.</summary>
    public const int ResistibilityFieldNumber = 18;
    private int resistibility_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Resistibility {
      get { return resistibility_; }
      set {
        resistibility_ = value;
      }
    }

    /// <summary>Field number for the "Vitality" field.</summary>
    public const int VitalityFieldNumber = 19;
    private int vitality_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Vitality {
      get { return vitality_; }
      set {
        vitality_ = value;
      }
    }

    /// <summary>Field number for the "Lucky" field.</summary>
    public const int LuckyFieldNumber = 20;
    private int lucky_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lucky {
      get { return lucky_; }
      set {
        lucky_ = value;
      }
    }

    /// <summary>Field number for the "Cooling" field.</summary>
    public const int CoolingFieldNumber = 21;
    private int cooling_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cooling {
      get { return cooling_; }
      set {
        cooling_ = value;
      }
    }

    /// <summary>Field number for the "FreePoint" field.</summary>
    public const int FreePointFieldNumber = 22;
    private int freePoint_;
    /// <summary>
    ///                        
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FreePoint {
      get { return freePoint_; }
      set {
        freePoint_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleAttr);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleAttr other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (RoleID != other.RoleID) return false;
      if (RoleLevel != other.RoleLevel) return false;
      if (CurHP != other.CurHP) return false;
      if (CurMP != other.CurMP) return false;
      if (CurExp != other.CurExp) return false;
      if (Money != other.Money) return false;
      if (GuidID != other.GuidID) return false;
      if (GuidLevel != other.GuidLevel) return false;
      if (MapID != other.MapID) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosZ, other.PosZ)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Direction, other.Direction)) return false;
      if (Power != other.Power) return false;
      if (Accurate != other.Accurate) return false;
      if (Resistibility != other.Resistibility) return false;
      if (Vitality != other.Vitality) return false;
      if (Lucky != other.Lucky) return false;
      if (Cooling != other.Cooling) return false;
      if (FreePoint != other.FreePoint) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (RoleID != 0UL) hash ^= RoleID.GetHashCode();
      if (RoleLevel != 0) hash ^= RoleLevel.GetHashCode();
      if (CurHP != 0L) hash ^= CurHP.GetHashCode();
      if (CurMP != 0L) hash ^= CurMP.GetHashCode();
      if (CurExp != 0L) hash ^= CurExp.GetHashCode();
      if (Money != 0UL) hash ^= Money.GetHashCode();
      if (GuidID != 0UL) hash ^= GuidID.GetHashCode();
      if (GuidLevel != 0) hash ^= GuidLevel.GetHashCode();
      if (MapID != 0) hash ^= MapID.GetHashCode();
      if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
      if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
      if (PosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosZ);
      if (Direction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Direction);
      if (Power != 0) hash ^= Power.GetHashCode();
      if (Accurate != 0) hash ^= Accurate.GetHashCode();
      if (Resistibility != 0) hash ^= Resistibility.GetHashCode();
      if (Vitality != 0) hash ^= Vitality.GetHashCode();
      if (Lucky != 0) hash ^= Lucky.GetHashCode();
      if (Cooling != 0) hash ^= Cooling.GetHashCode();
      if (FreePoint != 0) hash ^= FreePoint.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (RoleID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoleID);
      }
      if (RoleLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(RoleLevel);
      }
      if (CurHP != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CurHP);
      }
      if (CurMP != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(CurMP);
      }
      if (CurExp != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(CurExp);
      }
      if (Money != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(Money);
      }
      if (GuidID != 0UL) {
        output.WriteRawTag(72);
        output.WriteUInt64(GuidID);
      }
      if (GuidLevel != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(GuidLevel);
      }
      if (MapID != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(MapID);
      }
      if (PosX != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(PosX);
      }
      if (PosY != 0F) {
        output.WriteRawTag(109);
        output.WriteFloat(PosY);
      }
      if (PosZ != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(PosZ);
      }
      if (Direction != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(Direction);
      }
      if (Power != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Power);
      }
      if (Accurate != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Accurate);
      }
      if (Resistibility != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Resistibility);
      }
      if (Vitality != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(Vitality);
      }
      if (Lucky != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Lucky);
      }
      if (Cooling != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(Cooling);
      }
      if (FreePoint != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(FreePoint);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      if (RoleLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoleLevel);
      }
      if (CurHP != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurHP);
      }
      if (CurMP != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurMP);
      }
      if (CurExp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurExp);
      }
      if (Money != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Money);
      }
      if (GuidID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(GuidID);
      }
      if (GuidLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuidLevel);
      }
      if (MapID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapID);
      }
      if (PosX != 0F) {
        size += 1 + 4;
      }
      if (PosY != 0F) {
        size += 1 + 4;
      }
      if (PosZ != 0F) {
        size += 1 + 4;
      }
      if (Direction != 0F) {
        size += 1 + 4;
      }
      if (Power != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (Accurate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Accurate);
      }
      if (Resistibility != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Resistibility);
      }
      if (Vitality != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Vitality);
      }
      if (Lucky != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Lucky);
      }
      if (Cooling != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Cooling);
      }
      if (FreePoint != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FreePoint);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleAttr other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.RoleID != 0UL) {
        RoleID = other.RoleID;
      }
      if (other.RoleLevel != 0) {
        RoleLevel = other.RoleLevel;
      }
      if (other.CurHP != 0L) {
        CurHP = other.CurHP;
      }
      if (other.CurMP != 0L) {
        CurMP = other.CurMP;
      }
      if (other.CurExp != 0L) {
        CurExp = other.CurExp;
      }
      if (other.Money != 0UL) {
        Money = other.Money;
      }
      if (other.GuidID != 0UL) {
        GuidID = other.GuidID;
      }
      if (other.GuidLevel != 0) {
        GuidLevel = other.GuidLevel;
      }
      if (other.MapID != 0) {
        MapID = other.MapID;
      }
      if (other.PosX != 0F) {
        PosX = other.PosX;
      }
      if (other.PosY != 0F) {
        PosY = other.PosY;
      }
      if (other.PosZ != 0F) {
        PosZ = other.PosZ;
      }
      if (other.Direction != 0F) {
        Direction = other.Direction;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.Accurate != 0) {
        Accurate = other.Accurate;
      }
      if (other.Resistibility != 0) {
        Resistibility = other.Resistibility;
      }
      if (other.Vitality != 0) {
        Vitality = other.Vitality;
      }
      if (other.Lucky != 0) {
        Lucky = other.Lucky;
      }
      if (other.Cooling != 0) {
        Cooling = other.Cooling;
      }
      if (other.FreePoint != 0) {
        FreePoint = other.FreePoint;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 24: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 32: {
            RoleLevel = input.ReadInt32();
            break;
          }
          case 40: {
            CurHP = input.ReadInt64();
            break;
          }
          case 48: {
            CurMP = input.ReadInt64();
            break;
          }
          case 56: {
            CurExp = input.ReadInt64();
            break;
          }
          case 64: {
            Money = input.ReadUInt64();
            break;
          }
          case 72: {
            GuidID = input.ReadUInt64();
            break;
          }
          case 80: {
            GuidLevel = input.ReadInt32();
            break;
          }
          case 88: {
            MapID = input.ReadInt32();
            break;
          }
          case 101: {
            PosX = input.ReadFloat();
            break;
          }
          case 109: {
            PosY = input.ReadFloat();
            break;
          }
          case 117: {
            PosZ = input.ReadFloat();
            break;
          }
          case 125: {
            Direction = input.ReadFloat();
            break;
          }
          case 128: {
            Power = input.ReadInt32();
            break;
          }
          case 136: {
            Accurate = input.ReadInt32();
            break;
          }
          case 144: {
            Resistibility = input.ReadInt32();
            break;
          }
          case 152: {
            Vitality = input.ReadInt32();
            break;
          }
          case 160: {
            Lucky = input.ReadInt32();
            break;
          }
          case 168: {
            Cooling = input.ReadInt32();
            break;
          }
          case 176: {
            FreePoint = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoleList : pb::IMessage<RoleList> {
    private static readonly pb::MessageParser<RoleList> _parser = new pb::MessageParser<RoleList>(() => new RoleList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.RolePKGReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleList(RoleList other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      selRoleID_ = other.selRoleID_;
      roleList_ = other.roleList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleList Clone() {
      return new RoleList(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "SelRoleID" field.</summary>
    public const int SelRoleIDFieldNumber = 3;
    private ulong selRoleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SelRoleID {
      get { return selRoleID_; }
      set {
        selRoleID_ = value;
      }
    }

    /// <summary>Field number for the "RoleList" field.</summary>
    public const int RoleList_FieldNumber = 4;
    private static readonly pb::FieldCodec<global::GamePKG.RoleInfo> _repeated_roleList_codec
        = pb::FieldCodec.ForMessage(34, global::GamePKG.RoleInfo.Parser);
    private readonly pbc::RepeatedField<global::GamePKG.RoleInfo> roleList_ = new pbc::RepeatedField<global::GamePKG.RoleInfo>();
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GamePKG.RoleInfo> RoleList_ {
      get { return roleList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (SelRoleID != other.SelRoleID) return false;
      if(!roleList_.Equals(other.roleList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (SelRoleID != 0UL) hash ^= SelRoleID.GetHashCode();
      hash ^= roleList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (SelRoleID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SelRoleID);
      }
      roleList_.WriteTo(output, _repeated_roleList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (SelRoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SelRoleID);
      }
      size += roleList_.CalculateSize(_repeated_roleList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleList other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.SelRoleID != 0UL) {
        SelRoleID = other.SelRoleID;
      }
      roleList_.Add(other.roleList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 24: {
            SelRoleID = input.ReadUInt64();
            break;
          }
          case 34: {
            roleList_.AddEntriesFrom(input, _repeated_roleList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteRole : pb::IMessage<DeleteRole> {
    private static readonly pb::MessageParser<DeleteRole> _parser = new pb::MessageParser<DeleteRole>(() => new DeleteRole());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteRole> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.RolePKGReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRole() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRole(DeleteRole other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      roleID_ = other.roleID_;
      deleteWord_ = other.deleteWord_;
      verifyCode_ = other.verifyCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteRole Clone() {
      return new DeleteRole(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 3;
    private ulong roleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "DeleteWord" field.</summary>
    public const int DeleteWordFieldNumber = 4;
    private string deleteWord_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeleteWord {
      get { return deleteWord_; }
      set {
        deleteWord_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VerifyCode" field.</summary>
    public const int VerifyCodeFieldNumber = 5;
    private string verifyCode_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteRole);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteRole other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (RoleID != other.RoleID) return false;
      if (DeleteWord != other.DeleteWord) return false;
      if (VerifyCode != other.VerifyCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (RoleID != 0UL) hash ^= RoleID.GetHashCode();
      if (DeleteWord.Length != 0) hash ^= DeleteWord.GetHashCode();
      if (VerifyCode.Length != 0) hash ^= VerifyCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (RoleID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoleID);
      }
      if (DeleteWord.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DeleteWord);
      }
      if (VerifyCode.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(VerifyCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      if (DeleteWord.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeleteWord);
      }
      if (VerifyCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerifyCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteRole other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.RoleID != 0UL) {
        RoleID = other.RoleID;
      }
      if (other.DeleteWord.Length != 0) {
        DeleteWord = other.DeleteWord;
      }
      if (other.VerifyCode.Length != 0) {
        VerifyCode = other.VerifyCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 24: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 34: {
            DeleteWord = input.ReadString();
            break;
          }
          case 42: {
            VerifyCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoleAttrValue : pb::IMessage<RoleAttrValue> {
    private static readonly pb::MessageParser<RoleAttrValue> _parser = new pb::MessageParser<RoleAttrValue>(() => new RoleAttrValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoleAttrValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GamePKG.RolePKGReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleAttrValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleAttrValue(RoleAttrValue other) : this() {
      pkgID_ = other.pkgID_;
      userID_ = other.userID_;
      roleID_ = other.roleID_;
      hP_ = other.hP_;
      mP_ = other.mP_;
      attackMin_ = other.attackMin_;
      attackMax_ = other.attackMax_;
      defenseMin_ = other.defenseMin_;
      defenseMax_ = other.defenseMax_;
      power_ = other.power_;
      accurate_ = other.accurate_;
      resistibility_ = other.resistibility_;
      vitality_ = other.vitality_;
      lucky_ = other.lucky_;
      cooling_ = other.cooling_;
      verifyCode_ = other.verifyCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoleAttrValue Clone() {
      return new RoleAttrValue(this);
    }

    /// <summary>Field number for the "PkgID" field.</summary>
    public const int PkgIDFieldNumber = 1;
    private global::PKGTypeID pkgID_ = 0;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::PKGTypeID PkgID {
      get { return pkgID_; }
      set {
        pkgID_ = value;
      }
    }

    /// <summary>Field number for the "UserID" field.</summary>
    public const int UserIDFieldNumber = 2;
    private ulong userID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UserID {
      get { return userID_; }
      set {
        userID_ = value;
      }
    }

    /// <summary>Field number for the "RoleID" field.</summary>
    public const int RoleIDFieldNumber = 3;
    private ulong roleID_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong RoleID {
      get { return roleID_; }
      set {
        roleID_ = value;
      }
    }

    /// <summary>Field number for the "HP" field.</summary>
    public const int HPFieldNumber = 4;
    private int hP_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HP {
      get { return hP_; }
      set {
        hP_ = value;
      }
    }

    /// <summary>Field number for the "MP" field.</summary>
    public const int MPFieldNumber = 5;
    private int mP_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MP {
      get { return mP_; }
      set {
        mP_ = value;
      }
    }

    /// <summary>Field number for the "AttackMin" field.</summary>
    public const int AttackMinFieldNumber = 6;
    private int attackMin_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackMin {
      get { return attackMin_; }
      set {
        attackMin_ = value;
      }
    }

    /// <summary>Field number for the "AttackMax" field.</summary>
    public const int AttackMaxFieldNumber = 7;
    private int attackMax_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackMax {
      get { return attackMax_; }
      set {
        attackMax_ = value;
      }
    }

    /// <summary>Field number for the "DefenseMin" field.</summary>
    public const int DefenseMinFieldNumber = 8;
    private int defenseMin_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefenseMin {
      get { return defenseMin_; }
      set {
        defenseMin_ = value;
      }
    }

    /// <summary>Field number for the "DefenseMax" field.</summary>
    public const int DefenseMaxFieldNumber = 9;
    private int defenseMax_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefenseMax {
      get { return defenseMax_; }
      set {
        defenseMax_ = value;
      }
    }

    /// <summary>Field number for the "Power" field.</summary>
    public const int PowerFieldNumber = 10;
    private int power_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "Accurate" field.</summary>
    public const int AccurateFieldNumber = 11;
    private int accurate_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Accurate {
      get { return accurate_; }
      set {
        accurate_ = value;
      }
    }

    /// <summary>Field number for the "Resistibility" field.</summary>
    public const int ResistibilityFieldNumber = 12;
    private int resistibility_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Resistibility {
      get { return resistibility_; }
      set {
        resistibility_ = value;
      }
    }

    /// <summary>Field number for the "Vitality" field.</summary>
    public const int VitalityFieldNumber = 13;
    private int vitality_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Vitality {
      get { return vitality_; }
      set {
        vitality_ = value;
      }
    }

    /// <summary>Field number for the "Lucky" field.</summary>
    public const int LuckyFieldNumber = 14;
    private int lucky_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Lucky {
      get { return lucky_; }
      set {
        lucky_ = value;
      }
    }

    /// <summary>Field number for the "Cooling" field.</summary>
    public const int CoolingFieldNumber = 15;
    private int cooling_;
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cooling {
      get { return cooling_; }
      set {
        cooling_ = value;
      }
    }

    /// <summary>Field number for the "VerifyCode" field.</summary>
    public const int VerifyCodeFieldNumber = 16;
    private string verifyCode_ = "";
    /// <summary>
    ///
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerifyCode {
      get { return verifyCode_; }
      set {
        verifyCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoleAttrValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoleAttrValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PkgID != other.PkgID) return false;
      if (UserID != other.UserID) return false;
      if (RoleID != other.RoleID) return false;
      if (HP != other.HP) return false;
      if (MP != other.MP) return false;
      if (AttackMin != other.AttackMin) return false;
      if (AttackMax != other.AttackMax) return false;
      if (DefenseMin != other.DefenseMin) return false;
      if (DefenseMax != other.DefenseMax) return false;
      if (Power != other.Power) return false;
      if (Accurate != other.Accurate) return false;
      if (Resistibility != other.Resistibility) return false;
      if (Vitality != other.Vitality) return false;
      if (Lucky != other.Lucky) return false;
      if (Cooling != other.Cooling) return false;
      if (VerifyCode != other.VerifyCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PkgID != 0) hash ^= PkgID.GetHashCode();
      if (UserID != 0UL) hash ^= UserID.GetHashCode();
      if (RoleID != 0UL) hash ^= RoleID.GetHashCode();
      if (HP != 0) hash ^= HP.GetHashCode();
      if (MP != 0) hash ^= MP.GetHashCode();
      if (AttackMin != 0) hash ^= AttackMin.GetHashCode();
      if (AttackMax != 0) hash ^= AttackMax.GetHashCode();
      if (DefenseMin != 0) hash ^= DefenseMin.GetHashCode();
      if (DefenseMax != 0) hash ^= DefenseMax.GetHashCode();
      if (Power != 0) hash ^= Power.GetHashCode();
      if (Accurate != 0) hash ^= Accurate.GetHashCode();
      if (Resistibility != 0) hash ^= Resistibility.GetHashCode();
      if (Vitality != 0) hash ^= Vitality.GetHashCode();
      if (Lucky != 0) hash ^= Lucky.GetHashCode();
      if (Cooling != 0) hash ^= Cooling.GetHashCode();
      if (VerifyCode.Length != 0) hash ^= VerifyCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PkgID != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PkgID);
      }
      if (UserID != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UserID);
      }
      if (RoleID != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(RoleID);
      }
      if (HP != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(HP);
      }
      if (MP != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MP);
      }
      if (AttackMin != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(AttackMin);
      }
      if (AttackMax != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AttackMax);
      }
      if (DefenseMin != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DefenseMin);
      }
      if (DefenseMax != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(DefenseMax);
      }
      if (Power != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Power);
      }
      if (Accurate != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Accurate);
      }
      if (Resistibility != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(Resistibility);
      }
      if (Vitality != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Vitality);
      }
      if (Lucky != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Lucky);
      }
      if (Cooling != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Cooling);
      }
      if (VerifyCode.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(VerifyCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PkgID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PkgID);
      }
      if (UserID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UserID);
      }
      if (RoleID != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(RoleID);
      }
      if (HP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HP);
      }
      if (MP != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MP);
      }
      if (AttackMin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackMin);
      }
      if (AttackMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackMax);
      }
      if (DefenseMin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefenseMin);
      }
      if (DefenseMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefenseMax);
      }
      if (Power != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
      }
      if (Accurate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Accurate);
      }
      if (Resistibility != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Resistibility);
      }
      if (Vitality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vitality);
      }
      if (Lucky != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lucky);
      }
      if (Cooling != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cooling);
      }
      if (VerifyCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(VerifyCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoleAttrValue other) {
      if (other == null) {
        return;
      }
      if (other.PkgID != 0) {
        PkgID = other.PkgID;
      }
      if (other.UserID != 0UL) {
        UserID = other.UserID;
      }
      if (other.RoleID != 0UL) {
        RoleID = other.RoleID;
      }
      if (other.HP != 0) {
        HP = other.HP;
      }
      if (other.MP != 0) {
        MP = other.MP;
      }
      if (other.AttackMin != 0) {
        AttackMin = other.AttackMin;
      }
      if (other.AttackMax != 0) {
        AttackMax = other.AttackMax;
      }
      if (other.DefenseMin != 0) {
        DefenseMin = other.DefenseMin;
      }
      if (other.DefenseMax != 0) {
        DefenseMax = other.DefenseMax;
      }
      if (other.Power != 0) {
        Power = other.Power;
      }
      if (other.Accurate != 0) {
        Accurate = other.Accurate;
      }
      if (other.Resistibility != 0) {
        Resistibility = other.Resistibility;
      }
      if (other.Vitality != 0) {
        Vitality = other.Vitality;
      }
      if (other.Lucky != 0) {
        Lucky = other.Lucky;
      }
      if (other.Cooling != 0) {
        Cooling = other.Cooling;
      }
      if (other.VerifyCode.Length != 0) {
        VerifyCode = other.VerifyCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pkgID_ = (global::PKGTypeID) input.ReadEnum();
            break;
          }
          case 16: {
            UserID = input.ReadUInt64();
            break;
          }
          case 24: {
            RoleID = input.ReadUInt64();
            break;
          }
          case 32: {
            HP = input.ReadInt32();
            break;
          }
          case 40: {
            MP = input.ReadInt32();
            break;
          }
          case 48: {
            AttackMin = input.ReadInt32();
            break;
          }
          case 56: {
            AttackMax = input.ReadInt32();
            break;
          }
          case 64: {
            DefenseMin = input.ReadInt32();
            break;
          }
          case 72: {
            DefenseMax = input.ReadInt32();
            break;
          }
          case 80: {
            Power = input.ReadInt32();
            break;
          }
          case 88: {
            Accurate = input.ReadInt32();
            break;
          }
          case 96: {
            Resistibility = input.ReadInt32();
            break;
          }
          case 104: {
            Vitality = input.ReadInt32();
            break;
          }
          case 112: {
            Lucky = input.ReadInt32();
            break;
          }
          case 120: {
            Cooling = input.ReadInt32();
            break;
          }
          case 130: {
            VerifyCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
