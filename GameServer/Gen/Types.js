//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------






/**
 * map type
 */
exports.MapType = {
    /**
     * Beginner's map
     */
    Born: 0,
    /**
     * Ordinary map
     */
    Normal: 1,
    /**
     * Single player copy
     */
    Single: 2,
    /**
     * Multiplayer copy map
     */
    Duplicate: 3,
    /**
     * Guild map
     */
    Guild: 4,
}



/**
 * Occupation (role)
 */
exports.Vocation = {
    Free: 0,
    Shiba: 1,
    Doge: 2,
    Saitama: 3,
    Floki: 4,
    Inus: 5,
    Unknow: 6,
}



/**
 * time limit type
 */
exports.TimeType = {
    /**
     * day
     */
    DayTime: 0,
    /**
     * weekly
     */
    WeekTime: 1,
    /**
     * month
     */
    MonthTime: 2,
    /**
     * year
     */
    YearTime: 3,
}



/**
 * condition type
 */
exports.ConditionType = {
    /**
     * Unknow
     */
    Unknow: 0,
    /**
     * Vocation
     */
    Vocation: 1,
    /**
     * Level
     */
    Level: 2,
    /**
     * Gender
     */
    Gender: 3,
    /**
     * Position
     */
    Position: 4,
    /**
     * Power
     */
    Power: 5,
    /**
     * PlayerCount
     */
    PlayerCount: 6,
    /**
     * TimeLimit
     */
    TimeLimit: 7,
    /**
     * TimesLimit
     */
    TimesLimit: 8,
    /**
     * CompleteQuest
     */
    CompleteQuest: 9,
    /**
     * LoseQuest
     */
    LoseQuest: 10,
    /**
     * BagSpace
     */
    BagSpace: 11,
    /**
     * NeedAttr
     */
    NeedAttr: 12,
}



/**
 * Conditional trigger type
 */
exports.TriggerCondition = {
    None: 0,
    /**
     * HasItem
     */
    HasItem: 1,
    /**
     * UseItem
     */
    UseItem: 2,
    /**
     * KillMonster
     */
    KillMonster: 3,
    /**
     * TimeLimit
     */
    TimeLimit: 4,
    /**
     * TalkAbout
     */
    TalkAbout: 5,
    /**
     * BagSpace
     */
    BagSpace: 6,
}



/**
 * Quest type
 */
exports.QuestType = {
    /**
     * QT_Main
     */
    QT_Main: 0,
    /**
     * QT_Guild
     */
    QT_Guild: 1,
    /**
     * QT_Instance
     */
    QT_Instance: 2,
    /**
     * QT_Branch
     */
    QT_Branch: 3,
    /**
     * QT_Daily
     */
    QT_Daily: 4,
    QT_Max: 5,
}



/**
 * AttrType
 */
exports.AttrType = {
    /**
     * hp
     */
    Attr_HP: 0,
    /**
     * MP
     */
    Attr_MP: 1,
    /**
     * Attack
     */
    Attr_Attack: 2,
    /**
     * Defense
     */
    Attr_Defense: 3,
    /**
     * Power
     */
    Attr_Power: 4,
    /**
     * Accurate
     */
    Attr_Accurate: 5,
    /**
     * Resistibility
     */
    Attr_Resistibility: 6,
    /**
     * Vitality
     */
    Attr_Vitality: 7,
    /**
     * Lucky
     */
    Attr_Lucky: 8,
    /**
     * Cooling
     */
    Attr_Cooling: 9,
}



/**
 * ActionType
 */
exports.ActionType = {
    /**
     * None
     */
    None: 0,
    /**
     * AddAttr
     */
    AddAttr: 1,
    /**
     * AddBuff
     */
    AddBuff: 2,
    /**
     * AddSkill 
     */
    AddSkill: 3,
    /**
     * AddItem
     */
    AddItem: 4,
    /**
     * MoveMap
     */
    MoveMap: 5,
}



/**
 * Item Type
 */
exports.ItemType = {
    /**
     * Unknow
     */
    Unknow: -1,
    /**
     * Weapon
     */
    Weapon: 0,
    /**
     * ViceWeapon
     */
    ViceWeapon: 1,
    /**
     * Head
     */
    Head: 2,
    /**
     * Chest
     */
    Chest: 3,
    /**
     * Gloves
     */
    Gloves: 4,
    /**
     * Trousers
     */
    Trousers: 5,
    /**
     * Shoes
     */
    Shoes: 6,
    /**
     * Trinket
     */
    Trinket: 7,
    /**
     * FashionHead
     */
    FashionHead: 8,
    /**
     * FashionChest
     */
    FashionChest: 9,
    /**
     * FashionGloves
     */
    FashionGloves: 10,
    /**
     * FashionTrousers
     */
    FashionTrousers: 11,
    /**
     * FashionShoes
     */
    FashionShoes: 12,
    /**
     * Expendable
     */
    Expendable: 13,
    /**
     * Normal
     */
    Normal: 14,
}



/**
 * ItemQuality
 */
exports.ItemQuality = {
    /**
     * 
     */
    Normal: 0,
    /**
     * 
     */
    Blue: 1,
    /**
     * 
     */
    Purple: 2,
    /**
     * 
     */
    Green: 3,
    /**
     * 
     */
    Golden: 4,
    /**
     * 
     */
    Red: 5,
}



/**
 * 
 */
exports.BandTypes = {
    /**
     * 
     */
    None: 0,
    /**
     * 
     */
    BindOncePicked: 1,
    /**
     * 
     */
    BindOnceUsed: 2,
}



/**
 * 
 */
exports.NPCTypes = {
    /**
     * 
     */
    Normal: 0,
    /**
     * 
     */
    Monster: 1,
}



/**
 * 
 */
exports.NPCAIType = {
    /**
     * 
     */
    Normal: 0,
    /**
     * 
     */
    Elite: 1,
    /**
     * 
     */
    Boss: 2,
}



/**
 * 
 */
exports.NPCBornType = {
    /**
     * 
     */
    Once: 0,
    /**
     * 
     */
    SetTime: 1,
    /**
     * 
     */
    Quantity: 2,
}



/**
 * 
 */
exports.BufferType = {
    None: 0,
    /**
     * 
     */
    AddExp: 1,
    /**
     * 
     */
    AddHP: 2,
    /**
     * 
     */
    AddMP: 3,
    /**
     * 
     */
    HPPool: 4,
    /**
     * 
     */
    MPPool: 5,
    /**
     * 
     */
    Invincibility: 6,
}



class MapSet {

    constructor(_buf_) {
        this._dataMap = {}
        this._dataList = []

        for (let n = _buf_.ReadInt(); n > 0; n--) {
            let _v = new Map(_buf_)
            this._dataList.push(_v)
            this._dataMap[_v.ID] = _v
        }
    }

    getDataMap () { return this._dataMap }
    getDataList () { return this._dataList }

    get (key) { return this._dataMap[key] }

    resolve (_tables) {
        for (var v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
exports.MapSet = MapSet






class Map {

    constructor(_buf_) {
        this.ID = _buf_.ReadInt()
        this.Name = _buf_.ReadString()
        this.Desc = _buf_.ReadString()
        this.Type = _buf_.ReadInt()
        { this.EnterConditions = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = new ConditionsCF(_buf_); this.EnterConditions.push(_e) } }
        this.ResourceName = _buf_.ReadString()
        this.BGMusic = _buf_.ReadString()
        this.BornPosition = new Position(_buf_)
        this.Duration = _buf_.ReadFloat()
        this.Direction = _buf_.ReadFloat()
        this.EnterPoint = new MapPoint(_buf_)
    }

    resolve (_tables) {
        for (let _e of this.EnterConditions) { if (_e != null) { _e.resolve(_tables) } }
        if (this.BornPosition != null) { this.BornPosition.resolve(_tables) }
        if (this.EnterPoint != null) { this.EnterPoint.resolve(_tables) }
    }
}
exports.Map = Map






/**
 * Condition type and parameters
 */
class ConditionsCF {

    constructor(_buf_) {
        this.ConditionTypeID = _buf_.ReadInt()
        this.Param1 = _buf_.ReadLongAsNumber()
        this.Param2 = _buf_.ReadLongAsNumber()
        this.Param3 = _buf_.ReadLongAsNumber()
    }

    resolve (_tables) {
    }
}
exports.ConditionsCF = ConditionsCF






/**
 * Position coordinates
 */
class Position {

    constructor(_buf_) {
        this.x = _buf_.ReadFloat()
        this.y = _buf_.ReadFloat()
        this.z = _buf_.ReadFloat()
    }

    resolve (_tables) {
    }
}
exports.Position = Position






/**
 * map point location
 */
class MapPoint {

    constructor(_buf_) {
        this.MapID = _buf_.ReadInt()
        this.x = _buf_.ReadFloat()
        this.y = _buf_.ReadFloat()
        this.z = _buf_.ReadFloat()
    }

    resolve (_tables) {
    }
}
exports.MapPoint = MapPoint




class LevelSet {

    constructor(_buf_) {
        this._dataMap = {}
        this._dataList = []

        for (let n = _buf_.ReadInt(); n > 0; n--) {
            let _v = new Level(_buf_)
            this._dataList.push(_v)
            this._dataMap[_v.LEVEL] = _v
        }
    }

    getDataMap () { return this._dataMap }
    getDataList () { return this._dataList }

    get (key) { return this._dataMap[key] }

    resolve (_tables) {
        for (var v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
exports.LevelSet = LevelSet






class Level {

    constructor(_buf_) {
        this.LEVEL = _buf_.ReadInt()
        this.Exp = _buf_.ReadLongAsNumber()
        this.BaseHP = _buf_.ReadLongAsNumber()
        this.BaseMP = _buf_.ReadLongAsNumber()
        this.Attack = _buf_.ReadLongAsNumber()
        this.Defense = _buf_.ReadLongAsNumber()
    }

    resolve (_tables) {
    }
}
exports.Level = Level




class ItemDataSet {

    constructor(_buf_) {
        this._dataMap = {}
        this._dataList = []

        for (let n = _buf_.ReadInt(); n > 0; n--) {
            let _v = new ItemData(_buf_)
            this._dataList.push(_v)
            this._dataMap[_v.ID] = _v
        }
    }

    getDataMap () { return this._dataMap }
    getDataList () { return this._dataList }

    get (key) { return this._dataMap[key] }

    resolve (_tables) {
        for (var v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
exports.ItemDataSet = ItemDataSet






class ItemData {

    constructor(_buf_) {
        this.ID = _buf_.ReadLongAsNumber()
        this.Name = _buf_.ReadString()
        this.Desc = _buf_.ReadString()
        this.Price = _buf_.ReadLongAsNumber()
        this.RecoveryPrice = _buf_.ReadLongAsNumber()
        this.Type = _buf_.ReadInt()
        this.SubType = _buf_.ReadInt()
        this.Quality = _buf_.ReadInt()
        this.BindType = _buf_.ReadInt()
        this.SetID = _buf_.ReadInt()
        this.Durability = _buf_.ReadInt()
        this.Duration = _buf_.ReadLongAsNumber()
        { this.NeedConditions = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = new ConditionsCF(_buf_); this.NeedConditions.push(_e) } }
        this.NeedAllConditions = _buf_.ReadBool()
        this.UseTimes = _buf_.ReadInt()
        this.RemoveAfterUsed = _buf_.ReadBool()
        this.IconResource = _buf_.ReadString()
        this.ModelResource = _buf_.ReadString()
        this.EquipPositionName = _buf_.ReadString()
        this.EquipWave = _buf_.ReadString()
        this.StackLimit = _buf_.ReadInt()
        this.CoolDown = _buf_.ReadInt()
        { this.ItemAttr = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = new EquipAttr(_buf_); this.ItemAttr.push(_e) } }
        { this.OnUseActions = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = new ActionsCF(_buf_); this.OnUseActions.push(_e) } }
    }

    resolve (_tables) {
        for (let _e of this.NeedConditions) { if (_e != null) { _e.resolve(_tables) } }
        for (let _e of this.ItemAttr) { if (_e != null) { _e.resolve(_tables) } }
        for (let _e of this.OnUseActions) { if (_e != null) { _e.resolve(_tables) } }
    }
}
exports.ItemData = ItemData






/**
 * Item attributes when equipped
 */
class EquipAttr {

    constructor(_buf_) {
        this.Type = _buf_.ReadInt()
        this.Value1 = _buf_.ReadInt()
        this.Value2 = _buf_.ReadInt()
    }

    resolve (_tables) {
    }
}
exports.EquipAttr = EquipAttr






/**
 * Effects and parameters
 */
class ActionsCF {

    constructor(_buf_) {
        this.ActionTypeID = _buf_.ReadInt()
        this.Param1 = _buf_.ReadLongAsNumber()
        this.Param2 = _buf_.ReadLongAsNumber()
        this.Param3 = _buf_.ReadLongAsNumber()
    }

    resolve (_tables) {
    }
}
exports.ActionsCF = ActionsCF




class ItemSetData {

    constructor(_buf_) {
        this._dataMap = {}
        this._dataList = []

        for (let n = _buf_.ReadInt(); n > 0; n--) {
            let _v = new ItemSet(_buf_)
            this._dataList.push(_v)
            this._dataMap[_v.ID] = _v
        }
    }

    getDataMap () { return this._dataMap }
    getDataList () { return this._dataList }

    get (key) { return this._dataMap[key] }

    resolve (_tables) {
        for (var v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
exports.ItemSetData = ItemSetData






class ItemSet {

    constructor(_buf_) {
        this.ID = _buf_.ReadInt()
        this.Name = _buf_.ReadString()
        this.Desc = _buf_.ReadString()
        { this.ItemList = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = _buf_.ReadLongAsNumber(); this.ItemList.push(_e) } }
        { this.GroupAttr = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = new EquipAttr(_buf_); this.GroupAttr.push(_e) } }
    }

    resolve (_tables) {
        for (let _e of this.GroupAttr) { if (_e != null) { _e.resolve(_tables) } }
    }
}
exports.ItemSet = ItemSet




class VocationSettings {

    constructor(_buf_) {
        this._dataMap = {}
        this._dataList = []

        for (let n = _buf_.ReadInt(); n > 0; n--) {
            let _v = new VocationSetting(_buf_)
            this._dataList.push(_v)
            this._dataMap[_v.Vocation] = _v
        }
    }

    getDataMap () { return this._dataMap }
    getDataList () { return this._dataList }

    get (key) { return this._dataMap[key] }

    resolve (_tables) {
        for (var v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
exports.VocationSettings = VocationSettings






class VocationSetting {

    constructor(_buf_) {
        this.Vocation = _buf_.ReadInt()
        this.HPCoefficient = _buf_.ReadFloat()
        this.GrowUpHP = _buf_.ReadFloat()
        this.HPGrowUpValue = _buf_.ReadInt()
        this.MPCoefficient = _buf_.ReadFloat()
        this.GrowUpMP = _buf_.ReadFloat()
        this.MPGrowUpValue = _buf_.ReadInt()
        this.AttackCoefficient = _buf_.ReadFloat()
        this.GrowUpAttack = _buf_.ReadFloat()
        this.AttackGrowUpValue = _buf_.ReadInt()
        this.DefenseCoefficient = _buf_.ReadFloat()
        this.GrowUpDefense = _buf_.ReadFloat()
        this.DefenseGrowUpValue = _buf_.ReadInt()
    }

    resolve (_tables) {
    }
}
exports.VocationSetting = VocationSetting




class NpcSet {

    constructor(_buf_) {
        this._dataMap = {}
        this._dataList = []

        for (let n = _buf_.ReadInt(); n > 0; n--) {
            let _v = new NPCAttr(_buf_)
            this._dataList.push(_v)
            this._dataMap[_v.ID] = _v
        }
    }

    getDataMap () { return this._dataMap }
    getDataList () { return this._dataList }

    get (key) { return this._dataMap[key] }

    resolve (_tables) {
        for (var v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
exports.NpcSet = NpcSet






class NPCAttr {

    constructor(_buf_) {
        this.ID = _buf_.ReadInt()
        this.NpcName = _buf_.ReadString()
        this.NpcDesc = _buf_.ReadString()
        this.Level = _buf_.ReadInt()
        this.Type = _buf_.ReadInt()
        this.MoveTye = _buf_.ReadInt()
        this.Resource = _buf_.ReadString()
        this.ResIcon = _buf_.ReadString()
        this.Title = _buf_.ReadString()
        this.Life = _buf_.ReadLongAsNumber()
        this.Defense = _buf_.ReadInt()
        this.Attack = _buf_.ReadInt()
        this.Experience = _buf_.ReadInt()
        this.Money = _buf_.ReadInt()
        { this.ItemRate = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = _buf_.ReadLongAsNumber(); this.ItemRate.push(_e) } }
        { this.DefaultSay = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = _buf_.ReadString(); this.DefaultSay.push(_e) } }
        { this.Options = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = new DialogOptions(_buf_); this.Options.push(_e) } }
        this.DARadio = _buf_.ReadFloat()
        this.PatrolRadio = _buf_.ReadFloat()
        this.ChevyRadio = _buf_.ReadFloat()
        this.AIType = _buf_.ReadInt()
        this.PatrolSpeed = _buf_.ReadFloat()
        this.ChevySpeed = _buf_.ReadFloat()
    }

    resolve (_tables) {
        for (let _e of this.Options) { if (_e != null) { _e.resolve(_tables) } }
    }
}
exports.NPCAttr = NPCAttr






/**
 * Dialogue options
 */
class DialogOptions {

    constructor(_buf_) {
        this.OptionString = _buf_.ReadString()
        this.OptionAction = _buf_.ReadInt()
        this.Param1 = _buf_.ReadLongAsNumber()
        this.Param2 = _buf_.ReadLongAsNumber()
        this.Param3 = _buf_.ReadLongAsNumber()
    }

    resolve (_tables) {
    }
}
exports.DialogOptions = DialogOptions




class NpcRateSet {

    constructor(_buf_) {
        this._dataMap = {}
        this._dataList = []

        for (let n = _buf_.ReadInt(); n > 0; n--) {
            let _v = new NpcRate(_buf_)
            this._dataList.push(_v)
            this._dataMap[_v.ID] = _v
        }
    }

    getDataMap () { return this._dataMap }
    getDataList () { return this._dataList }

    get (key) { return this._dataMap[key] }

    resolve (_tables) {
        for (var v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
exports.NpcRateSet = NpcRateSet






class NpcRate {

    constructor(_buf_) {
        this.ID = _buf_.ReadInt()
        this.MapID = _buf_.ReadInt()
        this.NpcID = _buf_.ReadInt()
        this.BornPosition = new Position(_buf_)
        this.Direction = _buf_.ReadFloat()
        this.OffestRadio = _buf_.ReadFloat()
        this.Count = _buf_.ReadInt()
        this.BornType = _buf_.ReadInt()
        this.OnceBone = _buf_.ReadInt()
        this.BornTime = _buf_.ReadFloat()
    }

    resolve (_tables) {
        if (this.BornPosition != null) { this.BornPosition.resolve(_tables) }
    }
}
exports.NpcRate = NpcRate




class QuestDataSet {

    constructor(_buf_) {
        this._dataMap = {}
        this._dataList = []

        for (let n = _buf_.ReadInt(); n > 0; n--) {
            let _v = new QuestData(_buf_)
            this._dataList.push(_v)
            this._dataMap[_v.ID] = _v
        }
    }

    getDataMap () { return this._dataMap }
    getDataList () { return this._dataList }

    get (key) { return this._dataMap[key] }

    resolve (_tables) {
        for (var v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
exports.QuestDataSet = QuestDataSet






class QuestData {

    constructor(_buf_) {
        this.ID = _buf_.ReadInt()
        this.QuestType = _buf_.ReadInt()
        this.Memo = _buf_.ReadString()
        this.QuestName = _buf_.ReadString()
        this.QuestDesc = _buf_.ReadString()
        this.AcceptNPC = _buf_.ReadInt()
        this.CompleteNPC = _buf_.ReadInt()
        this.TargetStr = _buf_.ReadString()
        this.ContinueStr = _buf_.ReadString()
        this.EndStr = _buf_.ReadString()
        this.RewardStr = _buf_.ReadString()
        { this.NeedConditions = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = new ConditionsCF(_buf_); this.NeedConditions.push(_e) } }
        this.NeedAllConditions = _buf_.ReadBool()
        { this.AcceptActions = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = new ActionsCF(_buf_); this.AcceptActions.push(_e) } }
        { this.QuestContent = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = new TriggerConditions(_buf_); this.QuestContent.push(_e) } }
        this.NeedAllTrigger = _buf_.ReadBool()
        { this.RewardActions = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = new ActionsCF(_buf_); this.RewardActions.push(_e) } }
        { this.ChooseRewardActions = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = new DialogOptions(_buf_); this.ChooseRewardActions.push(_e) } }
    }

    resolve (_tables) {
        for (let _e of this.NeedConditions) { if (_e != null) { _e.resolve(_tables) } }
        for (let _e of this.AcceptActions) { if (_e != null) { _e.resolve(_tables) } }
        for (let _e of this.QuestContent) { if (_e != null) { _e.resolve(_tables) } }
        for (let _e of this.RewardActions) { if (_e != null) { _e.resolve(_tables) } }
        for (let _e of this.ChooseRewardActions) { if (_e != null) { _e.resolve(_tables) } }
    }
}
exports.QuestData = QuestData






/**
 * Condition type and parameters
 */
class TriggerConditions {

    constructor(_buf_) {
        this.Type = _buf_.ReadInt()
        this.Param1 = _buf_.ReadLongAsNumber()
        this.Param2 = _buf_.ReadLongAsNumber()
        this.Param3 = _buf_.ReadLongAsNumber()
    }

    resolve (_tables) {
    }
}
exports.TriggerConditions = TriggerConditions




class ItemRateSet {

    constructor(_buf_) {
        this._dataMap = {}
        this._dataList = []

        for (let n = _buf_.ReadInt(); n > 0; n--) {
            let _v = new ItemRate(_buf_)
            this._dataList.push(_v)
            this._dataMap[_v.ID] = _v
        }
    }

    getDataMap () { return this._dataMap }
    getDataList () { return this._dataList }

    get (key) { return this._dataMap[key] }

    resolve (_tables) {
        for (var v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
exports.ItemRateSet = ItemRateSet






class ItemRate {

    constructor(_buf_) {
        this.ID = _buf_.ReadInt()
        this.MapID = _buf_.ReadInt()
        this.ItemID = _buf_.ReadInt()
        this.BornPosition = new Position(_buf_)
        this.Direction = _buf_.ReadFloat()
        this.OffestRadio = _buf_.ReadFloat()
        this.Count = _buf_.ReadInt()
        this.BornType = _buf_.ReadInt()
        this.OnceBone = _buf_.ReadInt()
        this.BornTime = _buf_.ReadFloat()
        this.RotateSpeed = _buf_.ReadFloat()
    }

    resolve (_tables) {
        if (this.BornPosition != null) { this.BornPosition.resolve(_tables) }
    }
}
exports.ItemRate = ItemRate




class ExplosionRateSet {

    constructor(_buf_) {
        this._dataMap = {}
        this._dataList = []

        for (let n = _buf_.ReadInt(); n > 0; n--) {
            let _v = new ExplosionRate(_buf_)
            this._dataList.push(_v)
            this._dataMap[_v.ID] = _v
        }
    }

    getDataMap () { return this._dataMap }
    getDataList () { return this._dataList }

    get (key) { return this._dataMap[key] }

    resolve (_tables) {
        for (var v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
exports.ExplosionRateSet = ExplosionRateSet






class ExplosionRate {

    constructor(_buf_) {
        this.ID = _buf_.ReadLongAsNumber()
        { this.RateSet1 = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = new ItemExplosionRate(_buf_); this.RateSet1.push(_e) } }
        this.Rate1 = _buf_.ReadInt()
        { this.RateSet2 = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = new ItemExplosionRate(_buf_); this.RateSet2.push(_e) } }
        this.Rate2 = _buf_.ReadInt()
        { this.RateSet3 = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = new ItemExplosionRate(_buf_); this.RateSet3.push(_e) } }
        this.Rate3 = _buf_.ReadInt()
    }

    resolve (_tables) {
        for (let _e of this.RateSet1) { if (_e != null) { _e.resolve(_tables) } }
        for (let _e of this.RateSet2) { if (_e != null) { _e.resolve(_tables) } }
        for (let _e of this.RateSet3) { if (_e != null) { _e.resolve(_tables) } }
    }
}
exports.ExplosionRate = ExplosionRate






/**
 * Item explosion rate
 */
class ItemExplosionRate {

    constructor(_buf_) {
        this.ItemTypeID = _buf_.ReadLongAsNumber()
        this.ItemWeight = _buf_.ReadInt()
    }

    resolve (_tables) {
    }
}
exports.ItemExplosionRate = ItemExplosionRate




class SkillTable {

    constructor(_buf_) {
        this._dataMap = {}
        this._dataList = []

        for (let n = _buf_.ReadInt(); n > 0; n--) {
            let _v = new SkillData(_buf_)
            this._dataList.push(_v)
            this._dataMap[_v.ID] = _v
        }
    }

    getDataMap () { return this._dataMap }
    getDataList () { return this._dataList }

    get (key) { return this._dataMap[key] }

    resolve (_tables) {
        for (var v of this._dataList) {
            v.resolve(_tables)
        }
    }

}
exports.SkillTable = SkillTable






class SkillData {

    constructor(_buf_) {
        this.ID = _buf_.ReadLongAsNumber()
        this.Name = _buf_.ReadString()
        this.Icon = _buf_.ReadString()
        this.Desc = _buf_.ReadString()
        this.MustTarget = _buf_.ReadBool()
        { this.GetConditions = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = new ConditionsCF(_buf_); this.GetConditions.push(_e) } }
        { this.UseConditions = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = new ConditionsCF(_buf_); this.UseConditions.push(_e) } }
        { this.PreAction = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = new ActionsCF(_buf_); this.PreAction.push(_e) } }
        this.MaxLevel = _buf_.ReadInt()
        { this.CoolDown = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = _buf_.ReadFloat(); this.CoolDown.push(_e) } }
        { this.TargetCount = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = _buf_.ReadInt(); this.TargetCount.push(_e) } }
        { this.TargetDistance = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = _buf_.ReadFloat(); this.TargetDistance.push(_e) } }
        { this.AttackRadio = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = _buf_.ReadFloat(); this.AttackRadio.push(_e) } }
        { this.UseTime = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = _buf_.ReadFloat(); this.UseTime.push(_e) } }
        { this.EffectsMuti = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = _buf_.ReadFloat(); this.EffectsMuti.push(_e) } }
        { this.Effects = []; for (let i = 0, n = _buf_.ReadSize(); i < n; i++) { let _e = new ActionsCF(_buf_); this.Effects.push(_e) } }
        this.UseAnimation = _buf_.ReadString()
        this.UseEffect = new EffectPlaySet(_buf_)
        this.FlyEffect = new EffectPlaySet(_buf_)
        this.HitEffect = new EffectPlaySet(_buf_)
    }

    resolve (_tables) {
        for (let _e of this.GetConditions) { if (_e != null) { _e.resolve(_tables) } }
        for (let _e of this.UseConditions) { if (_e != null) { _e.resolve(_tables) } }
        for (let _e of this.PreAction) { if (_e != null) { _e.resolve(_tables) } }
        for (let _e of this.Effects) { if (_e != null) { _e.resolve(_tables) } }
        if (this.UseEffect != null) { this.UseEffect.resolve(_tables) }
        if (this.FlyEffect != null) { this.FlyEffect.resolve(_tables) }
        if (this.HitEffect != null) { this.HitEffect.resolve(_tables) }
    }
}
exports.SkillData = SkillData






/**
 * Special effects playback settings
 */
class EffectPlaySet {

    constructor(_buf_) {
        this.EffectName = _buf_.ReadString()
        this.DelayTime = _buf_.ReadFloat()
        this.OffestX = _buf_.ReadFloat()
        this.OffestY = _buf_.ReadFloat()
        this.OffestZ = _buf_.ReadFloat()
        this.MoveSpeed = _buf_.ReadFloat()
    }

    resolve (_tables) {
    }
}
exports.EffectPlaySet = EffectPlaySet




var ByteBuf = require('./ByteBuf.js').ByteBuf

class Tables {

    get MapSet () { return this._MapSet }

    get LevelSet () { return this._LevelSet }

    get ItemDataSet () { return this._ItemDataSet }

    get ItemSetData () { return this._ItemSetData }

    get VocationSettings () { return this._VocationSettings }

    get NpcSet () { return this._NpcSet }

    get NpcRateSet () { return this._NpcRateSet }

    get QuestDataSet () { return this._QuestDataSet }

    get ItemRateSet () { return this._ItemRateSet }

    get ExplosionRateSet () { return this._ExplosionRateSet }

    get SkillTable () { return this._SkillTable }

    constructor(loader) {
        let tables = {}
        this._MapSet = new MapSet(loader('mapset'))
        tables['MapSet'] = this._MapSet
        this._LevelSet = new LevelSet(loader('levelset'))
        tables['LevelSet'] = this._LevelSet
        this._ItemDataSet = new ItemDataSet(loader('itemdataset'))
        tables['ItemDataSet'] = this._ItemDataSet
        this._ItemSetData = new ItemSetData(loader('itemsetdata'))
        tables['ItemSetData'] = this._ItemSetData
        this._VocationSettings = new VocationSettings(loader('vocationsettings'))
        tables['VocationSettings'] = this._VocationSettings
        this._NpcSet = new NpcSet(loader('npcset'))
        tables['NpcSet'] = this._NpcSet
        this._NpcRateSet = new NpcRateSet(loader('npcrateset'))
        tables['NpcRateSet'] = this._NpcRateSet
        this._QuestDataSet = new QuestDataSet(loader('questdataset'))
        tables['QuestDataSet'] = this._QuestDataSet
        this._ItemRateSet = new ItemRateSet(loader('itemrateset'))
        tables['ItemRateSet'] = this._ItemRateSet
        this._ExplosionRateSet = new ExplosionRateSet(loader('explosionrateset'))
        tables['ExplosionRateSet'] = this._ExplosionRateSet
        this._SkillTable = new SkillTable(loader('skilltable'))
        tables['SkillTable'] = this._SkillTable

        this._MapSet.resolve(tables)
        this._LevelSet.resolve(tables)
        this._ItemDataSet.resolve(tables)
        this._ItemSetData.resolve(tables)
        this._VocationSettings.resolve(tables)
        this._NpcSet.resolve(tables)
        this._NpcRateSet.resolve(tables)
        this._QuestDataSet.resolve(tables)
        this._ItemRateSet.resolve(tables)
        this._ExplosionRateSet.resolve(tables)
        this._SkillTable.resolve(tables)
    }
}

exports.Tables = Tables
